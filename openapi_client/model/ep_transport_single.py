# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class EPTransportSingle(
    schemas.ComposedSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    
                    
                    class attributes(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                            
                                @staticmethod
                                def ipAddress() -> typing.Type['IpAddress']:
                                    return IpAddress
                            
                                @staticmethod
                                def logicalInterfaceInfo() -> typing.Type['LogicalInterfaceInfo']:
                                    return LogicalInterfaceInfo
                                nextHopInfo = schemas.StrSchema
                                qosProfile = schemas.StrSchema
                            
                                @staticmethod
                                def epApplicationRefs() -> typing.Type['DnList']:
                                    return DnList
                                __annotations__ = {
                                    "ipAddress": ipAddress,
                                    "logicalInterfaceInfo": logicalInterfaceInfo,
                                    "nextHopInfo": nextHopInfo,
                                    "qosProfile": qosProfile,
                                    "epApplicationRefs": epApplicationRefs,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["ipAddress"]) -> 'IpAddress': ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["logicalInterfaceInfo"]) -> 'LogicalInterfaceInfo': ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["nextHopInfo"]) -> MetaOapg.properties.nextHopInfo: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["qosProfile"]) -> MetaOapg.properties.qosProfile: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["epApplicationRefs"]) -> 'DnList': ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["ipAddress", "logicalInterfaceInfo", "nextHopInfo", "qosProfile", "epApplicationRefs", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["ipAddress"]) -> typing.Union['IpAddress', schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["logicalInterfaceInfo"]) -> typing.Union['LogicalInterfaceInfo', schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["nextHopInfo"]) -> typing.Union[MetaOapg.properties.nextHopInfo, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["qosProfile"]) -> typing.Union[MetaOapg.properties.qosProfile, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["epApplicationRefs"]) -> typing.Union['DnList', schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ipAddress", "logicalInterfaceInfo", "nextHopInfo", "qosProfile", "epApplicationRefs", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            ipAddress: typing.Union['IpAddress', schemas.Unset] = schemas.unset,
                            logicalInterfaceInfo: typing.Union['LogicalInterfaceInfo', schemas.Unset] = schemas.unset,
                            nextHopInfo: typing.Union[MetaOapg.properties.nextHopInfo, str, schemas.Unset] = schemas.unset,
                            qosProfile: typing.Union[MetaOapg.properties.qosProfile, str, schemas.Unset] = schemas.unset,
                            epApplicationRefs: typing.Union['DnList', schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'attributes':
                            return super().__new__(
                                cls,
                                *_args,
                                ipAddress=ipAddress,
                                logicalInterfaceInfo=logicalInterfaceInfo,
                                nextHopInfo=nextHopInfo,
                                qosProfile=qosProfile,
                                epApplicationRefs=epApplicationRefs,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    __annotations__ = {
                        "attributes": attributes,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> MetaOapg.properties.attributes: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["attributes", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> typing.Union[MetaOapg.properties.attributes, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["attributes", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                attributes: typing.Union[MetaOapg.properties.attributes, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *_args,
                    attributes=attributes,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                Top,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EPTransportSingle':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.dn_list import DnList
from openapi_client.model.ip_address import IpAddress
from openapi_client.model.logical_interface_info import LogicalInterfaceInfo
from openapi_client.model.top import Top
