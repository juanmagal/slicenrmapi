# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class TceMappingInfo(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class TceIPAddress(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            Ipv4Addr,
                            Ipv6Addr,
                        ]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'TceIPAddress':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            TceID = schemas.IntSchema
        
            @staticmethod
            def PlmnTarget() -> typing.Type['PlmnId']:
                return PlmnId
            __annotations__ = {
                "TceIPAddress": TceIPAddress,
                "TceID": TceID,
                "PlmnTarget": PlmnTarget,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TceIPAddress"]) -> MetaOapg.properties.TceIPAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TceID"]) -> MetaOapg.properties.TceID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PlmnTarget"]) -> 'PlmnId': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["TceIPAddress", "TceID", "PlmnTarget", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TceIPAddress"]) -> typing.Union[MetaOapg.properties.TceIPAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TceID"]) -> typing.Union[MetaOapg.properties.TceID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PlmnTarget"]) -> typing.Union['PlmnId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["TceIPAddress", "TceID", "PlmnTarget", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        TceIPAddress: typing.Union[MetaOapg.properties.TceIPAddress, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        TceID: typing.Union[MetaOapg.properties.TceID, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        PlmnTarget: typing.Union['PlmnId', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TceMappingInfo':
        return super().__new__(
            cls,
            *_args,
            TceIPAddress=TceIPAddress,
            TceID=TceID,
            PlmnTarget=PlmnTarget,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.ipv4_addr import Ipv4Addr
from openapi_client.model.ipv6_addr import Ipv6Addr
from openapi_client.model.plmn_id import PlmnId
