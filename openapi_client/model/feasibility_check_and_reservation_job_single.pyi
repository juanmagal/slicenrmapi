# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class FeasibilityCheckAndReservationJobSingle(
    schemas.ComposedSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    
                    
                    class attributes(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                
                                
                                class profile(
                                    schemas.ComposedSchema,
                                ):
                                
                                
                                    class MetaOapg:
                                        
                                        @classmethod
                                        @functools.lru_cache()
                                        def one_of(cls):
                                            # we need this here to make our import statements work
                                            # we must store _composed_schemas in here so the code is only run
                                            # when we invoke this method. If we kept this at the class
                                            # level we would get an error because the class level
                                            # code would be run when this module is imported, and these composed
                                            # classes don't exist yet because their module has not finished
                                            # loading
                                            return [
                                                SliceProfile,
                                                ServiceProfile,
                                            ]
                                
                                
                                    def __new__(
                                        cls,
                                        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                    ) -> 'profile':
                                        return super().__new__(
                                            cls,
                                            *_args,
                                            _configuration=_configuration,
                                            **kwargs,
                                        )
                                resourceReservation = schemas.BoolSchema
                                requestedReservationExpiration = schemas.StrSchema
                            
                                @staticmethod
                                def processMonitor() -> typing.Type['ProcessMonitor']:
                                    return ProcessMonitor
                            
                                @staticmethod
                                def feasibilityResult() -> typing.Type['FeasibilityResult']:
                                    return FeasibilityResult
                                inFeasibleReason = schemas.StrSchema
                            
                                @staticmethod
                                def resourceReservationStatus() -> typing.Type['ResourceReservationStatus']:
                                    return ResourceReservationStatus
                                reservationFailureReason = schemas.StrSchema
                                reservationExpiration = schemas.StrSchema
                                recommendedRequirements = schemas.StrSchema
                                __annotations__ = {
                                    "profile": profile,
                                    "resourceReservation": resourceReservation,
                                    "requestedReservationExpiration": requestedReservationExpiration,
                                    "processMonitor": processMonitor,
                                    "feasibilityResult": feasibilityResult,
                                    "inFeasibleReason": inFeasibleReason,
                                    "resourceReservationStatus": resourceReservationStatus,
                                    "reservationFailureReason": reservationFailureReason,
                                    "reservationExpiration": reservationExpiration,
                                    "recommendedRequirements": recommendedRequirements,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["profile"]) -> MetaOapg.properties.profile: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["resourceReservation"]) -> MetaOapg.properties.resourceReservation: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["requestedReservationExpiration"]) -> MetaOapg.properties.requestedReservationExpiration: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["processMonitor"]) -> 'ProcessMonitor': ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["feasibilityResult"]) -> 'FeasibilityResult': ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["inFeasibleReason"]) -> MetaOapg.properties.inFeasibleReason: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["resourceReservationStatus"]) -> 'ResourceReservationStatus': ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["reservationFailureReason"]) -> MetaOapg.properties.reservationFailureReason: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["reservationExpiration"]) -> MetaOapg.properties.reservationExpiration: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["recommendedRequirements"]) -> MetaOapg.properties.recommendedRequirements: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["profile", "resourceReservation", "requestedReservationExpiration", "processMonitor", "feasibilityResult", "inFeasibleReason", "resourceReservationStatus", "reservationFailureReason", "reservationExpiration", "recommendedRequirements", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["profile"]) -> typing.Union[MetaOapg.properties.profile, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["resourceReservation"]) -> typing.Union[MetaOapg.properties.resourceReservation, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["requestedReservationExpiration"]) -> typing.Union[MetaOapg.properties.requestedReservationExpiration, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["processMonitor"]) -> typing.Union['ProcessMonitor', schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["feasibilityResult"]) -> typing.Union['FeasibilityResult', schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["inFeasibleReason"]) -> typing.Union[MetaOapg.properties.inFeasibleReason, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["resourceReservationStatus"]) -> typing.Union['ResourceReservationStatus', schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["reservationFailureReason"]) -> typing.Union[MetaOapg.properties.reservationFailureReason, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["reservationExpiration"]) -> typing.Union[MetaOapg.properties.reservationExpiration, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["recommendedRequirements"]) -> typing.Union[MetaOapg.properties.recommendedRequirements, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["profile", "resourceReservation", "requestedReservationExpiration", "processMonitor", "feasibilityResult", "inFeasibleReason", "resourceReservationStatus", "reservationFailureReason", "reservationExpiration", "recommendedRequirements", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            profile: typing.Union[MetaOapg.properties.profile, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                            resourceReservation: typing.Union[MetaOapg.properties.resourceReservation, bool, schemas.Unset] = schemas.unset,
                            requestedReservationExpiration: typing.Union[MetaOapg.properties.requestedReservationExpiration, str, schemas.Unset] = schemas.unset,
                            processMonitor: typing.Union['ProcessMonitor', schemas.Unset] = schemas.unset,
                            feasibilityResult: typing.Union['FeasibilityResult', schemas.Unset] = schemas.unset,
                            inFeasibleReason: typing.Union[MetaOapg.properties.inFeasibleReason, str, schemas.Unset] = schemas.unset,
                            resourceReservationStatus: typing.Union['ResourceReservationStatus', schemas.Unset] = schemas.unset,
                            reservationFailureReason: typing.Union[MetaOapg.properties.reservationFailureReason, str, schemas.Unset] = schemas.unset,
                            reservationExpiration: typing.Union[MetaOapg.properties.reservationExpiration, str, schemas.Unset] = schemas.unset,
                            recommendedRequirements: typing.Union[MetaOapg.properties.recommendedRequirements, str, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'attributes':
                            return super().__new__(
                                cls,
                                *_args,
                                profile=profile,
                                resourceReservation=resourceReservation,
                                requestedReservationExpiration=requestedReservationExpiration,
                                processMonitor=processMonitor,
                                feasibilityResult=feasibilityResult,
                                inFeasibleReason=inFeasibleReason,
                                resourceReservationStatus=resourceReservationStatus,
                                reservationFailureReason=reservationFailureReason,
                                reservationExpiration=reservationExpiration,
                                recommendedRequirements=recommendedRequirements,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    __annotations__ = {
                        "attributes": attributes,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> MetaOapg.properties.attributes: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["attributes", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> typing.Union[MetaOapg.properties.attributes, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["attributes", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                attributes: typing.Union[MetaOapg.properties.attributes, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *_args,
                    attributes=attributes,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                Top,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FeasibilityCheckAndReservationJobSingle':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.feasibility_result import FeasibilityResult
from openapi_client.model.process_monitor import ProcessMonitor
from openapi_client.model.resource_reservation_status import ResourceReservationStatus
from openapi_client.model.service_profile import ServiceProfile
from openapi_client.model.slice_profile import SliceProfile
from openapi_client.model.top import Top
