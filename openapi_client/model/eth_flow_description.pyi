# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class EthFlowDescription(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Identifies an Ethernet flow.
    """


    class MetaOapg:
        required = {
            "ethType",
        }
        
        class properties:
            ethType = schemas.StrSchema
        
            @staticmethod
            def destMacAddr() -> typing.Type['MacAddr48']:
                return MacAddr48
            fDesc = schemas.StrSchema
        
            @staticmethod
            def fDir() -> typing.Type['FlowDirection']:
                return FlowDirection
        
            @staticmethod
            def sourceMacAddr() -> typing.Type['MacAddr48']:
                return MacAddr48
            
            
            class vlanTags(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'vlanTags':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
        
            @staticmethod
            def srcMacAddrEnd() -> typing.Type['MacAddr48']:
                return MacAddr48
        
            @staticmethod
            def destMacAddrEnd() -> typing.Type['MacAddr48']:
                return MacAddr48
            __annotations__ = {
                "ethType": ethType,
                "destMacAddr": destMacAddr,
                "fDesc": fDesc,
                "fDir": fDir,
                "sourceMacAddr": sourceMacAddr,
                "vlanTags": vlanTags,
                "srcMacAddrEnd": srcMacAddrEnd,
                "destMacAddrEnd": destMacAddrEnd,
            }
    
    ethType: MetaOapg.properties.ethType
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ethType"]) -> MetaOapg.properties.ethType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destMacAddr"]) -> 'MacAddr48': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fDesc"]) -> MetaOapg.properties.fDesc: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fDir"]) -> 'FlowDirection': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceMacAddr"]) -> 'MacAddr48': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vlanTags"]) -> MetaOapg.properties.vlanTags: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["srcMacAddrEnd"]) -> 'MacAddr48': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destMacAddrEnd"]) -> 'MacAddr48': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ethType", "destMacAddr", "fDesc", "fDir", "sourceMacAddr", "vlanTags", "srcMacAddrEnd", "destMacAddrEnd", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ethType"]) -> MetaOapg.properties.ethType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destMacAddr"]) -> typing.Union['MacAddr48', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fDesc"]) -> typing.Union[MetaOapg.properties.fDesc, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fDir"]) -> typing.Union['FlowDirection', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceMacAddr"]) -> typing.Union['MacAddr48', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vlanTags"]) -> typing.Union[MetaOapg.properties.vlanTags, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["srcMacAddrEnd"]) -> typing.Union['MacAddr48', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destMacAddrEnd"]) -> typing.Union['MacAddr48', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ethType", "destMacAddr", "fDesc", "fDir", "sourceMacAddr", "vlanTags", "srcMacAddrEnd", "destMacAddrEnd", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        ethType: typing.Union[MetaOapg.properties.ethType, str, ],
        destMacAddr: typing.Union['MacAddr48', schemas.Unset] = schemas.unset,
        fDesc: typing.Union[MetaOapg.properties.fDesc, str, schemas.Unset] = schemas.unset,
        fDir: typing.Union['FlowDirection', schemas.Unset] = schemas.unset,
        sourceMacAddr: typing.Union['MacAddr48', schemas.Unset] = schemas.unset,
        vlanTags: typing.Union[MetaOapg.properties.vlanTags, list, tuple, schemas.Unset] = schemas.unset,
        srcMacAddrEnd: typing.Union['MacAddr48', schemas.Unset] = schemas.unset,
        destMacAddrEnd: typing.Union['MacAddr48', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EthFlowDescription':
        return super().__new__(
            cls,
            *_args,
            ethType=ethType,
            destMacAddr=destMacAddr,
            fDesc=fDesc,
            fDir=fDir,
            sourceMacAddr=sourceMacAddr,
            vlanTags=vlanTags,
            srcMacAddrEnd=srcMacAddrEnd,
            destMacAddrEnd=destMacAddrEnd,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.flow_direction import FlowDirection
from openapi_client.model.mac_addr48 import MacAddr48
