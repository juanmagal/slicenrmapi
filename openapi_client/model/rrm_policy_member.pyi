# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class RrmPolicyMember(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def plmnId() -> typing.Type['PlmnId']:
                return PlmnId
        
            @staticmethod
            def snssai() -> typing.Type['Snssai']:
                return Snssai
            __annotations__ = {
                "plmnId": plmnId,
                "snssai": snssai,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["plmnId"]) -> 'PlmnId': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["snssai"]) -> 'Snssai': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["plmnId", "snssai", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["plmnId"]) -> typing.Union['PlmnId', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["snssai"]) -> typing.Union['Snssai', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["plmnId", "snssai", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        plmnId: typing.Union['PlmnId', schemas.Unset] = schemas.unset,
        snssai: typing.Union['Snssai', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RrmPolicyMember':
        return super().__new__(
            cls,
            *_args,
            plmnId=plmnId,
            snssai=snssai,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.plmn_id import PlmnId
from openapi_client.model.snssai import Snssai
