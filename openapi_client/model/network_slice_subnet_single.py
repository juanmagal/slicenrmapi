# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class NetworkSliceSubnetSingle(
    schemas.ComposedSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    
                    
                    class attributes(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class all_of_0(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    class properties:
                                    
                                        @staticmethod
                                        def managedFunctionRefList() -> typing.Type['DnList']:
                                            return DnList
                                    
                                        @staticmethod
                                        def networkSliceSubnetRefList() -> typing.Type['DnList']:
                                            return DnList
                                    
                                        @staticmethod
                                        def operationalState() -> typing.Type['OperationalState']:
                                            return OperationalState
                                    
                                        @staticmethod
                                        def administrativeState() -> typing.Type['AdministrativeState']:
                                            return AdministrativeState
                                    
                                        @staticmethod
                                        def nsInfo() -> typing.Type['NsInfo']:
                                            return NsInfo
                                    
                                        @staticmethod
                                        def sliceProfileList() -> typing.Type['SliceProfileList']:
                                            return SliceProfileList
                                    
                                        @staticmethod
                                        def epTransportRefList() -> typing.Type['DnList']:
                                            return DnList
                                        priorityLabel = schemas.IntSchema
                                        
                                        
                                        class networkSliceSubnetType(
                                            schemas.EnumBase,
                                            schemas.StrSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                enum_value_to_name = {
                                                    "TOP_SLICESUBNET": "TOP_SLICESUBNET",
                                                    "RAN_SLICESUBNET": "RAN_SLICESUBNET",
                                                    "CN_SLICESUBNET": "CN_SLICESUBNET",
                                                }
                                            
                                            @schemas.classproperty
                                            def TOP_SLICESUBNET(cls):
                                                return cls("TOP_SLICESUBNET")
                                            
                                            @schemas.classproperty
                                            def RAN_SLICESUBNET(cls):
                                                return cls("RAN_SLICESUBNET")
                                            
                                            @schemas.classproperty
                                            def CN_SLICESUBNET(cls):
                                                return cls("CN_SLICESUBNET")
                                        __annotations__ = {
                                            "managedFunctionRefList": managedFunctionRefList,
                                            "networkSliceSubnetRefList": networkSliceSubnetRefList,
                                            "operationalState": operationalState,
                                            "administrativeState": administrativeState,
                                            "nsInfo": nsInfo,
                                            "sliceProfileList": sliceProfileList,
                                            "epTransportRefList": epTransportRefList,
                                            "priorityLabel": priorityLabel,
                                            "networkSliceSubnetType": networkSliceSubnetType,
                                        }
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["managedFunctionRefList"]) -> 'DnList': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["networkSliceSubnetRefList"]) -> 'DnList': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["operationalState"]) -> 'OperationalState': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["administrativeState"]) -> 'AdministrativeState': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["nsInfo"]) -> 'NsInfo': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["sliceProfileList"]) -> 'SliceProfileList': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["epTransportRefList"]) -> 'DnList': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["priorityLabel"]) -> MetaOapg.properties.priorityLabel: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["networkSliceSubnetType"]) -> MetaOapg.properties.networkSliceSubnetType: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["managedFunctionRefList", "networkSliceSubnetRefList", "operationalState", "administrativeState", "nsInfo", "sliceProfileList", "epTransportRefList", "priorityLabel", "networkSliceSubnetType", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["managedFunctionRefList"]) -> typing.Union['DnList', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["networkSliceSubnetRefList"]) -> typing.Union['DnList', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["operationalState"]) -> typing.Union['OperationalState', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["administrativeState"]) -> typing.Union['AdministrativeState', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["nsInfo"]) -> typing.Union['NsInfo', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["sliceProfileList"]) -> typing.Union['SliceProfileList', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["epTransportRefList"]) -> typing.Union['DnList', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["priorityLabel"]) -> typing.Union[MetaOapg.properties.priorityLabel, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["networkSliceSubnetType"]) -> typing.Union[MetaOapg.properties.networkSliceSubnetType, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["managedFunctionRefList", "networkSliceSubnetRefList", "operationalState", "administrativeState", "nsInfo", "sliceProfileList", "epTransportRefList", "priorityLabel", "networkSliceSubnetType", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *_args: typing.Union[dict, frozendict.frozendict, ],
                                    managedFunctionRefList: typing.Union['DnList', schemas.Unset] = schemas.unset,
                                    networkSliceSubnetRefList: typing.Union['DnList', schemas.Unset] = schemas.unset,
                                    operationalState: typing.Union['OperationalState', schemas.Unset] = schemas.unset,
                                    administrativeState: typing.Union['AdministrativeState', schemas.Unset] = schemas.unset,
                                    nsInfo: typing.Union['NsInfo', schemas.Unset] = schemas.unset,
                                    sliceProfileList: typing.Union['SliceProfileList', schemas.Unset] = schemas.unset,
                                    epTransportRefList: typing.Union['DnList', schemas.Unset] = schemas.unset,
                                    priorityLabel: typing.Union[MetaOapg.properties.priorityLabel, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                    networkSliceSubnetType: typing.Union[MetaOapg.properties.networkSliceSubnetType, str, schemas.Unset] = schemas.unset,
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'all_of_0':
                                    return super().__new__(
                                        cls,
                                        *_args,
                                        managedFunctionRefList=managedFunctionRefList,
                                        networkSliceSubnetRefList=networkSliceSubnetRefList,
                                        operationalState=operationalState,
                                        administrativeState=administrativeState,
                                        nsInfo=nsInfo,
                                        sliceProfileList=sliceProfileList,
                                        epTransportRefList=epTransportRefList,
                                        priorityLabel=priorityLabel,
                                        networkSliceSubnetType=networkSliceSubnetType,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    cls.all_of_0,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'attributes':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    __annotations__ = {
                        "attributes": attributes,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> MetaOapg.properties.attributes: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["attributes", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> typing.Union[MetaOapg.properties.attributes, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["attributes", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                attributes: typing.Union[MetaOapg.properties.attributes, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *_args,
                    attributes=attributes,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                Top,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NetworkSliceSubnetSingle':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.administrative_state import AdministrativeState
from openapi_client.model.dn_list import DnList
from openapi_client.model.ns_info import NsInfo
from openapi_client.model.operational_state import OperationalState
from openapi_client.model.slice_profile_list import SliceProfileList
from openapi_client.model.top import Top
