# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class AlarmRecord(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    The alarmId is not a property of an alarm record. It is used as key in the map of alarm records instead.
    """


    class MetaOapg:
        
        class properties:
            objectInstance = schemas.StrSchema
            notificationId = schemas.IntSchema
            alarmRaisedTime = schemas.DateTimeSchema
            alarmChangedTime = schemas.DateTimeSchema
            alarmClearedTime = schemas.DateTimeSchema
        
            @staticmethod
            def alarmType() -> typing.Type['AlarmType']:
                return AlarmType
        
            @staticmethod
            def probableCause() -> typing.Type['ProbableCause']:
                return ProbableCause
        
            @staticmethod
            def specificProblem() -> typing.Type['SpecificProblem']:
                return SpecificProblem
        
            @staticmethod
            def perceivedSeverity() -> typing.Type['PerceivedSeverity']:
                return PerceivedSeverity
            backedUpStatus = schemas.BoolSchema
            backUpObject = schemas.StrSchema
        
            @staticmethod
            def trendIndication() -> typing.Type['TrendIndication']:
                return TrendIndication
        
            @staticmethod
            def thresholdinfo() -> typing.Type['ThresholdInfo1']:
                return ThresholdInfo1
        
            @staticmethod
            def correlatedNotifications() -> typing.Type['CorrelatedNotifications']:
                return CorrelatedNotifications
        
            @staticmethod
            def stateChangeDefinition() -> typing.Type['AttributeValueChangeSet']:
                return AttributeValueChangeSet
        
            @staticmethod
            def monitoredAttributes() -> typing.Type['AttributeNameValuePairSet']:
                return AttributeNameValuePairSet
            proposedRepairActions = schemas.StrSchema
            additionalText = schemas.StrSchema
        
            @staticmethod
            def additionalInformation() -> typing.Type['AttributeNameValuePairSet']:
                return AttributeNameValuePairSet
            rootCauseIndicator = schemas.BoolSchema
            ackTime = schemas.DateTimeSchema
            ackUserId = schemas.StrSchema
            ackSystemId = schemas.StrSchema
        
            @staticmethod
            def ackState() -> typing.Type['AckState']:
                return AckState
            clearUserId = schemas.StrSchema
            clearSystemId = schemas.StrSchema
            serviceUser = schemas.StrSchema
            serviceProvider = schemas.StrSchema
            securityAlarmDetector = schemas.StrSchema
            __annotations__ = {
                "objectInstance": objectInstance,
                "notificationId": notificationId,
                "alarmRaisedTime": alarmRaisedTime,
                "alarmChangedTime": alarmChangedTime,
                "alarmClearedTime": alarmClearedTime,
                "alarmType": alarmType,
                "probableCause": probableCause,
                "specificProblem": specificProblem,
                "perceivedSeverity": perceivedSeverity,
                "backedUpStatus": backedUpStatus,
                "backUpObject": backUpObject,
                "trendIndication": trendIndication,
                "thresholdinfo": thresholdinfo,
                "correlatedNotifications": correlatedNotifications,
                "stateChangeDefinition": stateChangeDefinition,
                "monitoredAttributes": monitoredAttributes,
                "proposedRepairActions": proposedRepairActions,
                "additionalText": additionalText,
                "additionalInformation": additionalInformation,
                "rootCauseIndicator": rootCauseIndicator,
                "ackTime": ackTime,
                "ackUserId": ackUserId,
                "ackSystemId": ackSystemId,
                "ackState": ackState,
                "clearUserId": clearUserId,
                "clearSystemId": clearSystemId,
                "serviceUser": serviceUser,
                "serviceProvider": serviceProvider,
                "securityAlarmDetector": securityAlarmDetector,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["objectInstance"]) -> MetaOapg.properties.objectInstance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notificationId"]) -> MetaOapg.properties.notificationId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alarmRaisedTime"]) -> MetaOapg.properties.alarmRaisedTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alarmChangedTime"]) -> MetaOapg.properties.alarmChangedTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alarmClearedTime"]) -> MetaOapg.properties.alarmClearedTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alarmType"]) -> 'AlarmType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["probableCause"]) -> 'ProbableCause': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["specificProblem"]) -> 'SpecificProblem': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["perceivedSeverity"]) -> 'PerceivedSeverity': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["backedUpStatus"]) -> MetaOapg.properties.backedUpStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["backUpObject"]) -> MetaOapg.properties.backUpObject: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["trendIndication"]) -> 'TrendIndication': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thresholdinfo"]) -> 'ThresholdInfo1': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["correlatedNotifications"]) -> 'CorrelatedNotifications': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stateChangeDefinition"]) -> 'AttributeValueChangeSet': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["monitoredAttributes"]) -> 'AttributeNameValuePairSet': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proposedRepairActions"]) -> MetaOapg.properties.proposedRepairActions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalText"]) -> MetaOapg.properties.additionalText: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalInformation"]) -> 'AttributeNameValuePairSet': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["rootCauseIndicator"]) -> MetaOapg.properties.rootCauseIndicator: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ackTime"]) -> MetaOapg.properties.ackTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ackUserId"]) -> MetaOapg.properties.ackUserId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ackSystemId"]) -> MetaOapg.properties.ackSystemId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ackState"]) -> 'AckState': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clearUserId"]) -> MetaOapg.properties.clearUserId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["clearSystemId"]) -> MetaOapg.properties.clearSystemId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serviceUser"]) -> MetaOapg.properties.serviceUser: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["serviceProvider"]) -> MetaOapg.properties.serviceProvider: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["securityAlarmDetector"]) -> MetaOapg.properties.securityAlarmDetector: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["objectInstance", "notificationId", "alarmRaisedTime", "alarmChangedTime", "alarmClearedTime", "alarmType", "probableCause", "specificProblem", "perceivedSeverity", "backedUpStatus", "backUpObject", "trendIndication", "thresholdinfo", "correlatedNotifications", "stateChangeDefinition", "monitoredAttributes", "proposedRepairActions", "additionalText", "additionalInformation", "rootCauseIndicator", "ackTime", "ackUserId", "ackSystemId", "ackState", "clearUserId", "clearSystemId", "serviceUser", "serviceProvider", "securityAlarmDetector", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["objectInstance"]) -> typing.Union[MetaOapg.properties.objectInstance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notificationId"]) -> typing.Union[MetaOapg.properties.notificationId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alarmRaisedTime"]) -> typing.Union[MetaOapg.properties.alarmRaisedTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alarmChangedTime"]) -> typing.Union[MetaOapg.properties.alarmChangedTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alarmClearedTime"]) -> typing.Union[MetaOapg.properties.alarmClearedTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alarmType"]) -> typing.Union['AlarmType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["probableCause"]) -> typing.Union['ProbableCause', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["specificProblem"]) -> typing.Union['SpecificProblem', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["perceivedSeverity"]) -> typing.Union['PerceivedSeverity', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["backedUpStatus"]) -> typing.Union[MetaOapg.properties.backedUpStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["backUpObject"]) -> typing.Union[MetaOapg.properties.backUpObject, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["trendIndication"]) -> typing.Union['TrendIndication', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thresholdinfo"]) -> typing.Union['ThresholdInfo1', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["correlatedNotifications"]) -> typing.Union['CorrelatedNotifications', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stateChangeDefinition"]) -> typing.Union['AttributeValueChangeSet', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["monitoredAttributes"]) -> typing.Union['AttributeNameValuePairSet', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proposedRepairActions"]) -> typing.Union[MetaOapg.properties.proposedRepairActions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalText"]) -> typing.Union[MetaOapg.properties.additionalText, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalInformation"]) -> typing.Union['AttributeNameValuePairSet', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["rootCauseIndicator"]) -> typing.Union[MetaOapg.properties.rootCauseIndicator, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ackTime"]) -> typing.Union[MetaOapg.properties.ackTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ackUserId"]) -> typing.Union[MetaOapg.properties.ackUserId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ackSystemId"]) -> typing.Union[MetaOapg.properties.ackSystemId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ackState"]) -> typing.Union['AckState', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clearUserId"]) -> typing.Union[MetaOapg.properties.clearUserId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["clearSystemId"]) -> typing.Union[MetaOapg.properties.clearSystemId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serviceUser"]) -> typing.Union[MetaOapg.properties.serviceUser, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["serviceProvider"]) -> typing.Union[MetaOapg.properties.serviceProvider, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["securityAlarmDetector"]) -> typing.Union[MetaOapg.properties.securityAlarmDetector, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["objectInstance", "notificationId", "alarmRaisedTime", "alarmChangedTime", "alarmClearedTime", "alarmType", "probableCause", "specificProblem", "perceivedSeverity", "backedUpStatus", "backUpObject", "trendIndication", "thresholdinfo", "correlatedNotifications", "stateChangeDefinition", "monitoredAttributes", "proposedRepairActions", "additionalText", "additionalInformation", "rootCauseIndicator", "ackTime", "ackUserId", "ackSystemId", "ackState", "clearUserId", "clearSystemId", "serviceUser", "serviceProvider", "securityAlarmDetector", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        objectInstance: typing.Union[MetaOapg.properties.objectInstance, str, schemas.Unset] = schemas.unset,
        notificationId: typing.Union[MetaOapg.properties.notificationId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        alarmRaisedTime: typing.Union[MetaOapg.properties.alarmRaisedTime, str, datetime, schemas.Unset] = schemas.unset,
        alarmChangedTime: typing.Union[MetaOapg.properties.alarmChangedTime, str, datetime, schemas.Unset] = schemas.unset,
        alarmClearedTime: typing.Union[MetaOapg.properties.alarmClearedTime, str, datetime, schemas.Unset] = schemas.unset,
        alarmType: typing.Union['AlarmType', schemas.Unset] = schemas.unset,
        probableCause: typing.Union['ProbableCause', schemas.Unset] = schemas.unset,
        specificProblem: typing.Union['SpecificProblem', schemas.Unset] = schemas.unset,
        perceivedSeverity: typing.Union['PerceivedSeverity', schemas.Unset] = schemas.unset,
        backedUpStatus: typing.Union[MetaOapg.properties.backedUpStatus, bool, schemas.Unset] = schemas.unset,
        backUpObject: typing.Union[MetaOapg.properties.backUpObject, str, schemas.Unset] = schemas.unset,
        trendIndication: typing.Union['TrendIndication', schemas.Unset] = schemas.unset,
        thresholdinfo: typing.Union['ThresholdInfo1', schemas.Unset] = schemas.unset,
        correlatedNotifications: typing.Union['CorrelatedNotifications', schemas.Unset] = schemas.unset,
        stateChangeDefinition: typing.Union['AttributeValueChangeSet', schemas.Unset] = schemas.unset,
        monitoredAttributes: typing.Union['AttributeNameValuePairSet', schemas.Unset] = schemas.unset,
        proposedRepairActions: typing.Union[MetaOapg.properties.proposedRepairActions, str, schemas.Unset] = schemas.unset,
        additionalText: typing.Union[MetaOapg.properties.additionalText, str, schemas.Unset] = schemas.unset,
        additionalInformation: typing.Union['AttributeNameValuePairSet', schemas.Unset] = schemas.unset,
        rootCauseIndicator: typing.Union[MetaOapg.properties.rootCauseIndicator, bool, schemas.Unset] = schemas.unset,
        ackTime: typing.Union[MetaOapg.properties.ackTime, str, datetime, schemas.Unset] = schemas.unset,
        ackUserId: typing.Union[MetaOapg.properties.ackUserId, str, schemas.Unset] = schemas.unset,
        ackSystemId: typing.Union[MetaOapg.properties.ackSystemId, str, schemas.Unset] = schemas.unset,
        ackState: typing.Union['AckState', schemas.Unset] = schemas.unset,
        clearUserId: typing.Union[MetaOapg.properties.clearUserId, str, schemas.Unset] = schemas.unset,
        clearSystemId: typing.Union[MetaOapg.properties.clearSystemId, str, schemas.Unset] = schemas.unset,
        serviceUser: typing.Union[MetaOapg.properties.serviceUser, str, schemas.Unset] = schemas.unset,
        serviceProvider: typing.Union[MetaOapg.properties.serviceProvider, str, schemas.Unset] = schemas.unset,
        securityAlarmDetector: typing.Union[MetaOapg.properties.securityAlarmDetector, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AlarmRecord':
        return super().__new__(
            cls,
            *_args,
            objectInstance=objectInstance,
            notificationId=notificationId,
            alarmRaisedTime=alarmRaisedTime,
            alarmChangedTime=alarmChangedTime,
            alarmClearedTime=alarmClearedTime,
            alarmType=alarmType,
            probableCause=probableCause,
            specificProblem=specificProblem,
            perceivedSeverity=perceivedSeverity,
            backedUpStatus=backedUpStatus,
            backUpObject=backUpObject,
            trendIndication=trendIndication,
            thresholdinfo=thresholdinfo,
            correlatedNotifications=correlatedNotifications,
            stateChangeDefinition=stateChangeDefinition,
            monitoredAttributes=monitoredAttributes,
            proposedRepairActions=proposedRepairActions,
            additionalText=additionalText,
            additionalInformation=additionalInformation,
            rootCauseIndicator=rootCauseIndicator,
            ackTime=ackTime,
            ackUserId=ackUserId,
            ackSystemId=ackSystemId,
            ackState=ackState,
            clearUserId=clearUserId,
            clearSystemId=clearSystemId,
            serviceUser=serviceUser,
            serviceProvider=serviceProvider,
            securityAlarmDetector=securityAlarmDetector,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.ack_state import AckState
from openapi_client.model.alarm_type import AlarmType
from openapi_client.model.attribute_name_value_pair_set import AttributeNameValuePairSet
from openapi_client.model.attribute_value_change_set import AttributeValueChangeSet
from openapi_client.model.correlated_notifications import CorrelatedNotifications
from openapi_client.model.perceived_severity import PerceivedSeverity
from openapi_client.model.probable_cause import ProbableCause
from openapi_client.model.specific_problem import SpecificProblem
from openapi_client.model.threshold_info1 import ThresholdInfo1
from openapi_client.model.trend_indication import TrendIndication
