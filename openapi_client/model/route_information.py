# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class RouteInformation(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    At least one of the "ipv4Addr" attribute and the "ipv6Addr" attribute shall be included in the "RouteInformation" data type. 

    """


    class MetaOapg:
        required = {
            "portNumber",
        }
        
        class properties:
        
            @staticmethod
            def portNumber() -> typing.Type['Uinteger']:
                return Uinteger
        
            @staticmethod
            def ipv4Addr() -> typing.Type['Ipv4Addr1']:
                return Ipv4Addr1
        
            @staticmethod
            def ipv6Addr() -> typing.Type['Ipv6Addr1']:
                return Ipv6Addr1
            __annotations__ = {
                "portNumber": portNumber,
                "ipv4Addr": ipv4Addr,
                "ipv6Addr": ipv6Addr,
            }

    
    portNumber: 'Uinteger'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["portNumber"]) -> 'Uinteger': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ipv4Addr"]) -> 'Ipv4Addr1': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ipv6Addr"]) -> 'Ipv6Addr1': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["portNumber", "ipv4Addr", "ipv6Addr", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["portNumber"]) -> 'Uinteger': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ipv4Addr"]) -> typing.Union['Ipv4Addr1', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ipv6Addr"]) -> typing.Union['Ipv6Addr1', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["portNumber", "ipv4Addr", "ipv6Addr", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, None, ],
        ipv4Addr: typing.Union['Ipv4Addr1', schemas.Unset] = schemas.unset,
        ipv6Addr: typing.Union['Ipv6Addr1', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RouteInformation':
        return super().__new__(
            cls,
            *_args,
            ipv4Addr=ipv4Addr,
            ipv6Addr=ipv6Addr,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.ipv4_addr1 import Ipv4Addr1
from openapi_client.model.ipv6_addr1 import Ipv6Addr1
from openapi_client.model.uinteger import Uinteger
