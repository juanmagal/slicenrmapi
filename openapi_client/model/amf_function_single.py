# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class AmfFunctionSingle(
    schemas.ComposedSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    
                    
                    class attributes(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class all_of_1(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    class properties:
                                    
                                        @staticmethod
                                        def pLMNInfoList() -> typing.Type['PlmnInfoList']:
                                            return PlmnInfoList
                                    
                                        @staticmethod
                                        def amfIdentifier() -> typing.Type['AmfIdentifier']:
                                            return AmfIdentifier
                                        sBIFqdn = schemas.StrSchema
                                        interPlmnFQDN = schemas.StrSchema
                                    
                                        @staticmethod
                                        def taiList() -> typing.Type['TaiList']:
                                            return TaiList
                                        
                                        
                                        class taiRangeList(
                                            schemas.ListSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                @staticmethod
                                                def items() -> typing.Type['TaiRange']:
                                                    return TaiRange
                                        
                                            def __new__(
                                                cls,
                                                _arg: typing.Union[typing.Tuple['TaiRange'], typing.List['TaiRange']],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                            ) -> 'taiRangeList':
                                                return super().__new__(
                                                    cls,
                                                    _arg,
                                                    _configuration=_configuration,
                                                )
                                        
                                            def __getitem__(self, i: int) -> 'TaiRange':
                                                return super().__getitem__(i)
                                        weightFactor = schemas.IntSchema
                                    
                                        @staticmethod
                                        def cNSIIdList() -> typing.Type['CNSIIdList']:
                                            return CNSIIdList
                                        
                                        
                                        class gUAMIdList(
                                            schemas.ListSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                @staticmethod
                                                def items() -> typing.Type['GUAMInfo']:
                                                    return GUAMInfo
                                        
                                            def __new__(
                                                cls,
                                                _arg: typing.Union[typing.Tuple['GUAMInfo'], typing.List['GUAMInfo']],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                            ) -> 'gUAMIdList':
                                                return super().__new__(
                                                    cls,
                                                    _arg,
                                                    _configuration=_configuration,
                                                )
                                        
                                            def __getitem__(self, i: int) -> 'GUAMInfo':
                                                return super().__getitem__(i)
                                        
                                        
                                        class backupInfoAmfFailure(
                                            schemas.ListSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                @staticmethod
                                                def items() -> typing.Type['GUAMInfo']:
                                                    return GUAMInfo
                                        
                                            def __new__(
                                                cls,
                                                _arg: typing.Union[typing.Tuple['GUAMInfo'], typing.List['GUAMInfo']],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                            ) -> 'backupInfoAmfFailure':
                                                return super().__new__(
                                                    cls,
                                                    _arg,
                                                    _configuration=_configuration,
                                                )
                                        
                                            def __getitem__(self, i: int) -> 'GUAMInfo':
                                                return super().__getitem__(i)
                                        
                                        
                                        class backupInfoAmfRemoval(
                                            schemas.ListSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                @staticmethod
                                                def items() -> typing.Type['GUAMInfo']:
                                                    return GUAMInfo
                                        
                                            def __new__(
                                                cls,
                                                _arg: typing.Union[typing.Tuple['GUAMInfo'], typing.List['GUAMInfo']],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                            ) -> 'backupInfoAmfRemoval':
                                                return super().__new__(
                                                    cls,
                                                    _arg,
                                                    _configuration=_configuration,
                                                )
                                        
                                            def __getitem__(self, i: int) -> 'GUAMInfo':
                                                return super().__getitem__(i)
                                        amfSetRef = schemas.StrSchema
                                    
                                        @staticmethod
                                        def managedNFProfile() -> typing.Type['ManagedNFProfile']:
                                            return ManagedNFProfile
                                    
                                        @staticmethod
                                        def commModelList() -> typing.Type['CommModelList']:
                                            return CommModelList
                                        __annotations__ = {
                                            "pLMNInfoList": pLMNInfoList,
                                            "amfIdentifier": amfIdentifier,
                                            "sBIFqdn": sBIFqdn,
                                            "interPlmnFQDN": interPlmnFQDN,
                                            "taiList": taiList,
                                            "taiRangeList": taiRangeList,
                                            "weightFactor": weightFactor,
                                            "cNSIIdList": cNSIIdList,
                                            "gUAMIdList": gUAMIdList,
                                            "backupInfoAmfFailure": backupInfoAmfFailure,
                                            "backupInfoAmfRemoval": backupInfoAmfRemoval,
                                            "amfSetRef": amfSetRef,
                                            "managedNFProfile": managedNFProfile,
                                            "commModelList": commModelList,
                                        }
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["pLMNInfoList"]) -> 'PlmnInfoList': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["amfIdentifier"]) -> 'AmfIdentifier': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["sBIFqdn"]) -> MetaOapg.properties.sBIFqdn: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["interPlmnFQDN"]) -> MetaOapg.properties.interPlmnFQDN: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["taiList"]) -> 'TaiList': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["taiRangeList"]) -> MetaOapg.properties.taiRangeList: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["weightFactor"]) -> MetaOapg.properties.weightFactor: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["cNSIIdList"]) -> 'CNSIIdList': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["gUAMIdList"]) -> MetaOapg.properties.gUAMIdList: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["backupInfoAmfFailure"]) -> MetaOapg.properties.backupInfoAmfFailure: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["backupInfoAmfRemoval"]) -> MetaOapg.properties.backupInfoAmfRemoval: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["amfSetRef"]) -> MetaOapg.properties.amfSetRef: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["managedNFProfile"]) -> 'ManagedNFProfile': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["commModelList"]) -> 'CommModelList': ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["pLMNInfoList", "amfIdentifier", "sBIFqdn", "interPlmnFQDN", "taiList", "taiRangeList", "weightFactor", "cNSIIdList", "gUAMIdList", "backupInfoAmfFailure", "backupInfoAmfRemoval", "amfSetRef", "managedNFProfile", "commModelList", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["pLMNInfoList"]) -> typing.Union['PlmnInfoList', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["amfIdentifier"]) -> typing.Union['AmfIdentifier', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["sBIFqdn"]) -> typing.Union[MetaOapg.properties.sBIFqdn, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["interPlmnFQDN"]) -> typing.Union[MetaOapg.properties.interPlmnFQDN, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["taiList"]) -> typing.Union['TaiList', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["taiRangeList"]) -> typing.Union[MetaOapg.properties.taiRangeList, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["weightFactor"]) -> typing.Union[MetaOapg.properties.weightFactor, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["cNSIIdList"]) -> typing.Union['CNSIIdList', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["gUAMIdList"]) -> typing.Union[MetaOapg.properties.gUAMIdList, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["backupInfoAmfFailure"]) -> typing.Union[MetaOapg.properties.backupInfoAmfFailure, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["backupInfoAmfRemoval"]) -> typing.Union[MetaOapg.properties.backupInfoAmfRemoval, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["amfSetRef"]) -> typing.Union[MetaOapg.properties.amfSetRef, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["managedNFProfile"]) -> typing.Union['ManagedNFProfile', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["commModelList"]) -> typing.Union['CommModelList', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["pLMNInfoList", "amfIdentifier", "sBIFqdn", "interPlmnFQDN", "taiList", "taiRangeList", "weightFactor", "cNSIIdList", "gUAMIdList", "backupInfoAmfFailure", "backupInfoAmfRemoval", "amfSetRef", "managedNFProfile", "commModelList", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *_args: typing.Union[dict, frozendict.frozendict, ],
                                    pLMNInfoList: typing.Union['PlmnInfoList', schemas.Unset] = schemas.unset,
                                    amfIdentifier: typing.Union['AmfIdentifier', schemas.Unset] = schemas.unset,
                                    sBIFqdn: typing.Union[MetaOapg.properties.sBIFqdn, str, schemas.Unset] = schemas.unset,
                                    interPlmnFQDN: typing.Union[MetaOapg.properties.interPlmnFQDN, str, schemas.Unset] = schemas.unset,
                                    taiList: typing.Union['TaiList', schemas.Unset] = schemas.unset,
                                    taiRangeList: typing.Union[MetaOapg.properties.taiRangeList, list, tuple, schemas.Unset] = schemas.unset,
                                    weightFactor: typing.Union[MetaOapg.properties.weightFactor, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                    cNSIIdList: typing.Union['CNSIIdList', schemas.Unset] = schemas.unset,
                                    gUAMIdList: typing.Union[MetaOapg.properties.gUAMIdList, list, tuple, schemas.Unset] = schemas.unset,
                                    backupInfoAmfFailure: typing.Union[MetaOapg.properties.backupInfoAmfFailure, list, tuple, schemas.Unset] = schemas.unset,
                                    backupInfoAmfRemoval: typing.Union[MetaOapg.properties.backupInfoAmfRemoval, list, tuple, schemas.Unset] = schemas.unset,
                                    amfSetRef: typing.Union[MetaOapg.properties.amfSetRef, str, schemas.Unset] = schemas.unset,
                                    managedNFProfile: typing.Union['ManagedNFProfile', schemas.Unset] = schemas.unset,
                                    commModelList: typing.Union['CommModelList', schemas.Unset] = schemas.unset,
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'all_of_1':
                                    return super().__new__(
                                        cls,
                                        *_args,
                                        pLMNInfoList=pLMNInfoList,
                                        amfIdentifier=amfIdentifier,
                                        sBIFqdn=sBIFqdn,
                                        interPlmnFQDN=interPlmnFQDN,
                                        taiList=taiList,
                                        taiRangeList=taiRangeList,
                                        weightFactor=weightFactor,
                                        cNSIIdList=cNSIIdList,
                                        gUAMIdList=gUAMIdList,
                                        backupInfoAmfFailure=backupInfoAmfFailure,
                                        backupInfoAmfRemoval=backupInfoAmfRemoval,
                                        amfSetRef=amfSetRef,
                                        managedNFProfile=managedNFProfile,
                                        commModelList=commModelList,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    ManagedFunctionAttr,
                                    cls.all_of_1,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'attributes':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    __annotations__ = {
                        "attributes": attributes,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> MetaOapg.properties.attributes: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["attributes", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> typing.Union[MetaOapg.properties.attributes, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["attributes", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                attributes: typing.Union[MetaOapg.properties.attributes, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *_args,
                    attributes=attributes,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        
        class all_of_3(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                
                    @staticmethod
                    def EP_N2() -> typing.Type['EPN2Multiple']:
                        return EPN2Multiple
                
                    @staticmethod
                    def EP_N8() -> typing.Type['EPN8Multiple']:
                        return EPN8Multiple
                
                    @staticmethod
                    def EP_N11() -> typing.Type['EPN11Multiple']:
                        return EPN11Multiple
                
                    @staticmethod
                    def EP_N12() -> typing.Type['EPN12Multiple']:
                        return EPN12Multiple
                
                    @staticmethod
                    def EP_N14() -> typing.Type['EPN14Multiple']:
                        return EPN14Multiple
                
                    @staticmethod
                    def EP_N15() -> typing.Type['EPN15Multiple']:
                        return EPN15Multiple
                
                    @staticmethod
                    def EP_N17() -> typing.Type['EPN17Multiple']:
                        return EPN17Multiple
                
                    @staticmethod
                    def EP_N20() -> typing.Type['EPN20Multiple']:
                        return EPN20Multiple
                
                    @staticmethod
                    def EP_N22() -> typing.Type['EPN22Multiple']:
                        return EPN22Multiple
                
                    @staticmethod
                    def EP_N26() -> typing.Type['EPN26Multiple']:
                        return EPN26Multiple
                
                    @staticmethod
                    def EP_NLS() -> typing.Type['EPNLSMultiple']:
                        return EPNLSMultiple
                
                    @staticmethod
                    def EP_NLG() -> typing.Type['EPNLGMultiple']:
                        return EPNLGMultiple
                    __annotations__ = {
                        "EP_N2": EP_N2,
                        "EP_N8": EP_N8,
                        "EP_N11": EP_N11,
                        "EP_N12": EP_N12,
                        "EP_N14": EP_N14,
                        "EP_N15": EP_N15,
                        "EP_N17": EP_N17,
                        "EP_N20": EP_N20,
                        "EP_N22": EP_N22,
                        "EP_N26": EP_N26,
                        "EP_NLS": EP_NLS,
                        "EP_NLG": EP_NLG,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["EP_N2"]) -> 'EPN2Multiple': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["EP_N8"]) -> 'EPN8Multiple': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["EP_N11"]) -> 'EPN11Multiple': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["EP_N12"]) -> 'EPN12Multiple': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["EP_N14"]) -> 'EPN14Multiple': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["EP_N15"]) -> 'EPN15Multiple': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["EP_N17"]) -> 'EPN17Multiple': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["EP_N20"]) -> 'EPN20Multiple': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["EP_N22"]) -> 'EPN22Multiple': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["EP_N26"]) -> 'EPN26Multiple': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["EP_NLS"]) -> 'EPNLSMultiple': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["EP_NLG"]) -> 'EPNLGMultiple': ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["EP_N2", "EP_N8", "EP_N11", "EP_N12", "EP_N14", "EP_N15", "EP_N17", "EP_N20", "EP_N22", "EP_N26", "EP_NLS", "EP_NLG", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["EP_N2"]) -> typing.Union['EPN2Multiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["EP_N8"]) -> typing.Union['EPN8Multiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["EP_N11"]) -> typing.Union['EPN11Multiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["EP_N12"]) -> typing.Union['EPN12Multiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["EP_N14"]) -> typing.Union['EPN14Multiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["EP_N15"]) -> typing.Union['EPN15Multiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["EP_N17"]) -> typing.Union['EPN17Multiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["EP_N20"]) -> typing.Union['EPN20Multiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["EP_N22"]) -> typing.Union['EPN22Multiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["EP_N26"]) -> typing.Union['EPN26Multiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["EP_NLS"]) -> typing.Union['EPNLSMultiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["EP_NLG"]) -> typing.Union['EPNLGMultiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["EP_N2", "EP_N8", "EP_N11", "EP_N12", "EP_N14", "EP_N15", "EP_N17", "EP_N20", "EP_N22", "EP_N26", "EP_NLS", "EP_NLG", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                EP_N2: typing.Union['EPN2Multiple', schemas.Unset] = schemas.unset,
                EP_N8: typing.Union['EPN8Multiple', schemas.Unset] = schemas.unset,
                EP_N11: typing.Union['EPN11Multiple', schemas.Unset] = schemas.unset,
                EP_N12: typing.Union['EPN12Multiple', schemas.Unset] = schemas.unset,
                EP_N14: typing.Union['EPN14Multiple', schemas.Unset] = schemas.unset,
                EP_N15: typing.Union['EPN15Multiple', schemas.Unset] = schemas.unset,
                EP_N17: typing.Union['EPN17Multiple', schemas.Unset] = schemas.unset,
                EP_N20: typing.Union['EPN20Multiple', schemas.Unset] = schemas.unset,
                EP_N22: typing.Union['EPN22Multiple', schemas.Unset] = schemas.unset,
                EP_N26: typing.Union['EPN26Multiple', schemas.Unset] = schemas.unset,
                EP_NLS: typing.Union['EPNLSMultiple', schemas.Unset] = schemas.unset,
                EP_NLG: typing.Union['EPNLGMultiple', schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_3':
                return super().__new__(
                    cls,
                    *_args,
                    EP_N2=EP_N2,
                    EP_N8=EP_N8,
                    EP_N11=EP_N11,
                    EP_N12=EP_N12,
                    EP_N14=EP_N14,
                    EP_N15=EP_N15,
                    EP_N17=EP_N17,
                    EP_N20=EP_N20,
                    EP_N22=EP_N22,
                    EP_N26=EP_N26,
                    EP_NLS=EP_NLS,
                    EP_NLG=EP_NLG,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                Top,
                cls.all_of_1,
                ManagedFunctionNcO,
                cls.all_of_3,
            ]


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AmfFunctionSingle':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.amf_identifier import AmfIdentifier
from openapi_client.model.cnsiid_list import CNSIIdList
from openapi_client.model.comm_model_list import CommModelList
from openapi_client.model.epn11_multiple import EPN11Multiple
from openapi_client.model.epn12_multiple import EPN12Multiple
from openapi_client.model.epn14_multiple import EPN14Multiple
from openapi_client.model.epn15_multiple import EPN15Multiple
from openapi_client.model.epn17_multiple import EPN17Multiple
from openapi_client.model.epn20_multiple import EPN20Multiple
from openapi_client.model.epn22_multiple import EPN22Multiple
from openapi_client.model.epn26_multiple import EPN26Multiple
from openapi_client.model.epn2_multiple import EPN2Multiple
from openapi_client.model.epn8_multiple import EPN8Multiple
from openapi_client.model.epnlg_multiple import EPNLGMultiple
from openapi_client.model.epnls_multiple import EPNLSMultiple
from openapi_client.model.guam_info import GUAMInfo
from openapi_client.model.managed_function_attr import ManagedFunctionAttr
from openapi_client.model.managed_function_nc_o import ManagedFunctionNcO
from openapi_client.model.managed_nf_profile import ManagedNFProfile
from openapi_client.model.plmn_info_list import PlmnInfoList
from openapi_client.model.tai_list import TaiList
from openapi_client.model.tai_range import TaiRange
from openapi_client.model.top import Top
