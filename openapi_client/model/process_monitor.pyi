# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ProcessMonitor(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    This data type is the "ProcessMonitor" data type without specialisations.
    """


    class MetaOapg:
        
        class properties:
            jobId = schemas.StrSchema
            
            
            class status(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def NOT_STARTED(cls):
                    return cls("NOT_STARTED")
                
                @schemas.classproperty
                def RUNNING(cls):
                    return cls("RUNNING")
                
                @schemas.classproperty
                def FINSHED(cls):
                    return cls("FINSHED")
                
                @schemas.classproperty
                def FAILED(cls):
                    return cls("FAILED")
                
                @schemas.classproperty
                def PARTIALLY_FAILED(cls):
                    return cls("PARTIALLY_FAILED")
                
                @schemas.classproperty
                def CANCELLING(cls):
                    return cls("CANCELLING")
                
                @schemas.classproperty
                def CANCELLED(cls):
                    return cls("CANCELLED")
            
            
            class progressPercentage(
                schemas.IntSchema
            ):
                pass
            progressStateInfo = schemas.StrSchema
            resultStateInfo = schemas.StrSchema
            startTime = schemas.DateTimeSchema
            endTime = schemas.DateTimeSchema
            timer = schemas.IntSchema
            __annotations__ = {
                "jobId": jobId,
                "status": status,
                "progressPercentage": progressPercentage,
                "progressStateInfo": progressStateInfo,
                "resultStateInfo": resultStateInfo,
                "startTime": startTime,
                "endTime": endTime,
                "timer": timer,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobId"]) -> MetaOapg.properties.jobId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["progressPercentage"]) -> MetaOapg.properties.progressPercentage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["progressStateInfo"]) -> MetaOapg.properties.progressStateInfo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["resultStateInfo"]) -> MetaOapg.properties.resultStateInfo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["startTime"]) -> MetaOapg.properties.startTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["endTime"]) -> MetaOapg.properties.endTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timer"]) -> MetaOapg.properties.timer: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["jobId", "status", "progressPercentage", "progressStateInfo", "resultStateInfo", "startTime", "endTime", "timer", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobId"]) -> typing.Union[MetaOapg.properties.jobId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["progressPercentage"]) -> typing.Union[MetaOapg.properties.progressPercentage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["progressStateInfo"]) -> typing.Union[MetaOapg.properties.progressStateInfo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["resultStateInfo"]) -> typing.Union[MetaOapg.properties.resultStateInfo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["startTime"]) -> typing.Union[MetaOapg.properties.startTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["endTime"]) -> typing.Union[MetaOapg.properties.endTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timer"]) -> typing.Union[MetaOapg.properties.timer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["jobId", "status", "progressPercentage", "progressStateInfo", "resultStateInfo", "startTime", "endTime", "timer", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        jobId: typing.Union[MetaOapg.properties.jobId, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        progressPercentage: typing.Union[MetaOapg.properties.progressPercentage, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        progressStateInfo: typing.Union[MetaOapg.properties.progressStateInfo, str, schemas.Unset] = schemas.unset,
        resultStateInfo: typing.Union[MetaOapg.properties.resultStateInfo, str, schemas.Unset] = schemas.unset,
        startTime: typing.Union[MetaOapg.properties.startTime, str, datetime, schemas.Unset] = schemas.unset,
        endTime: typing.Union[MetaOapg.properties.endTime, str, datetime, schemas.Unset] = schemas.unset,
        timer: typing.Union[MetaOapg.properties.timer, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProcessMonitor':
        return super().__new__(
            cls,
            *_args,
            jobId=jobId,
            status=status,
            progressPercentage=progressPercentage,
            progressStateInfo=progressStateInfo,
            resultStateInfo=resultStateInfo,
            startTime=startTime,
            endTime=endTime,
            timer=timer,
            _configuration=_configuration,
            **kwargs,
        )
