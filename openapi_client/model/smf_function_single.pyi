# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class SmfFunctionSingle(
    schemas.ComposedSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    
                    
                    class attributes(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class all_of_1(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    class properties:
                                    
                                        @staticmethod
                                        def pLMNInfoList() -> typing.Type['PlmnInfoList']:
                                            return PlmnInfoList
                                    
                                        @staticmethod
                                        def nRTACList() -> typing.Type['TACList']:
                                            return TACList
                                        sBIFqdn = schemas.StrSchema
                                        
                                        
                                        class sNssaiSmfInfoList(
                                            schemas.ListSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                @staticmethod
                                                def items() -> typing.Type['SNssaiSmfInfoItem']:
                                                    return SNssaiSmfInfoItem
                                        
                                            def __new__(
                                                cls,
                                                _arg: typing.Union[typing.Tuple['SNssaiSmfInfoItem'], typing.List['SNssaiSmfInfoItem']],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                            ) -> 'sNssaiSmfInfoList':
                                                return super().__new__(
                                                    cls,
                                                    _arg,
                                                    _configuration=_configuration,
                                                )
                                        
                                            def __getitem__(self, i: int) -> 'SNssaiSmfInfoItem':
                                                return super().__getitem__(i)
                                    
                                        @staticmethod
                                        def taiList() -> typing.Type['TaiList']:
                                            return TaiList
                                        
                                        
                                        class taiRangeList(
                                            schemas.ListSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                @staticmethod
                                                def items() -> typing.Type['TaiRange']:
                                                    return TaiRange
                                        
                                            def __new__(
                                                cls,
                                                _arg: typing.Union[typing.Tuple['TaiRange'], typing.List['TaiRange']],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                            ) -> 'taiRangeList':
                                                return super().__new__(
                                                    cls,
                                                    _arg,
                                                    _configuration=_configuration,
                                                )
                                        
                                            def __getitem__(self, i: int) -> 'TaiRange':
                                                return super().__getitem__(i)
                                        pwgFqdn = schemas.StrSchema
                                        
                                        
                                        class pgwAddrList(
                                            schemas.ListSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                
                                                @staticmethod
                                                def items() -> typing.Type['IpAddr1']:
                                                    return IpAddr1
                                        
                                            def __new__(
                                                cls,
                                                _arg: typing.Union[typing.Tuple['IpAddr1'], typing.List['IpAddr1']],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                            ) -> 'pgwAddrList':
                                                return super().__new__(
                                                    cls,
                                                    _arg,
                                                    _configuration=_configuration,
                                                )
                                        
                                            def __getitem__(self, i: int) -> 'IpAddr1':
                                                return super().__getitem__(i)
                                    
                                        @staticmethod
                                        def accessType() -> typing.Type['AccessType']:
                                            return AccessType
                                        priority = schemas.IntSchema
                                    
                                        @staticmethod
                                        def cNSIIdList() -> typing.Type['CNSIIdList']:
                                            return CNSIIdList
                                        vsmfSupportInd = schemas.BoolSchema
                                        
                                        
                                        class pwgFqdnList(
                                            schemas.ListSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                items = schemas.StrSchema
                                        
                                            def __new__(
                                                cls,
                                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                            ) -> 'pwgFqdnList':
                                                return super().__new__(
                                                    cls,
                                                    _arg,
                                                    _configuration=_configuration,
                                                )
                                        
                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                return super().__getitem__(i)
                                    
                                        @staticmethod
                                        def managedNFProfile() -> typing.Type['ManagedNFProfile']:
                                            return ManagedNFProfile
                                    
                                        @staticmethod
                                        def commModelList() -> typing.Type['CommModelList']:
                                            return CommModelList
                                        configurable5QISetRef = schemas.StrSchema
                                        dynamic5QISetRef = schemas.StrSchema
                                        __annotations__ = {
                                            "pLMNInfoList": pLMNInfoList,
                                            "nRTACList": nRTACList,
                                            "sBIFqdn": sBIFqdn,
                                            "sNssaiSmfInfoList": sNssaiSmfInfoList,
                                            "taiList": taiList,
                                            "taiRangeList": taiRangeList,
                                            "pwgFqdn": pwgFqdn,
                                            "pgwAddrList": pgwAddrList,
                                            "accessType": accessType,
                                            "priority": priority,
                                            "cNSIIdList": cNSIIdList,
                                            "vsmfSupportInd": vsmfSupportInd,
                                            "pwgFqdnList": pwgFqdnList,
                                            "managedNFProfile": managedNFProfile,
                                            "commModelList": commModelList,
                                            "configurable5QISetRef": configurable5QISetRef,
                                            "dynamic5QISetRef": dynamic5QISetRef,
                                        }
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["pLMNInfoList"]) -> 'PlmnInfoList': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["nRTACList"]) -> 'TACList': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["sBIFqdn"]) -> MetaOapg.properties.sBIFqdn: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["sNssaiSmfInfoList"]) -> MetaOapg.properties.sNssaiSmfInfoList: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["taiList"]) -> 'TaiList': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["taiRangeList"]) -> MetaOapg.properties.taiRangeList: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["pwgFqdn"]) -> MetaOapg.properties.pwgFqdn: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["pgwAddrList"]) -> MetaOapg.properties.pgwAddrList: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["accessType"]) -> 'AccessType': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["priority"]) -> MetaOapg.properties.priority: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["cNSIIdList"]) -> 'CNSIIdList': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["vsmfSupportInd"]) -> MetaOapg.properties.vsmfSupportInd: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["pwgFqdnList"]) -> MetaOapg.properties.pwgFqdnList: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["managedNFProfile"]) -> 'ManagedNFProfile': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["commModelList"]) -> 'CommModelList': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["configurable5QISetRef"]) -> MetaOapg.properties.configurable5QISetRef: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["dynamic5QISetRef"]) -> MetaOapg.properties.dynamic5QISetRef: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["pLMNInfoList", "nRTACList", "sBIFqdn", "sNssaiSmfInfoList", "taiList", "taiRangeList", "pwgFqdn", "pgwAddrList", "accessType", "priority", "cNSIIdList", "vsmfSupportInd", "pwgFqdnList", "managedNFProfile", "commModelList", "configurable5QISetRef", "dynamic5QISetRef", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["pLMNInfoList"]) -> typing.Union['PlmnInfoList', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["nRTACList"]) -> typing.Union['TACList', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["sBIFqdn"]) -> typing.Union[MetaOapg.properties.sBIFqdn, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["sNssaiSmfInfoList"]) -> typing.Union[MetaOapg.properties.sNssaiSmfInfoList, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["taiList"]) -> typing.Union['TaiList', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["taiRangeList"]) -> typing.Union[MetaOapg.properties.taiRangeList, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["pwgFqdn"]) -> typing.Union[MetaOapg.properties.pwgFqdn, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["pgwAddrList"]) -> typing.Union[MetaOapg.properties.pgwAddrList, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["accessType"]) -> typing.Union['AccessType', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["priority"]) -> typing.Union[MetaOapg.properties.priority, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["cNSIIdList"]) -> typing.Union['CNSIIdList', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["vsmfSupportInd"]) -> typing.Union[MetaOapg.properties.vsmfSupportInd, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["pwgFqdnList"]) -> typing.Union[MetaOapg.properties.pwgFqdnList, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["managedNFProfile"]) -> typing.Union['ManagedNFProfile', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["commModelList"]) -> typing.Union['CommModelList', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["configurable5QISetRef"]) -> typing.Union[MetaOapg.properties.configurable5QISetRef, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["dynamic5QISetRef"]) -> typing.Union[MetaOapg.properties.dynamic5QISetRef, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["pLMNInfoList", "nRTACList", "sBIFqdn", "sNssaiSmfInfoList", "taiList", "taiRangeList", "pwgFqdn", "pgwAddrList", "accessType", "priority", "cNSIIdList", "vsmfSupportInd", "pwgFqdnList", "managedNFProfile", "commModelList", "configurable5QISetRef", "dynamic5QISetRef", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *_args: typing.Union[dict, frozendict.frozendict, ],
                                    pLMNInfoList: typing.Union['PlmnInfoList', schemas.Unset] = schemas.unset,
                                    nRTACList: typing.Union['TACList', schemas.Unset] = schemas.unset,
                                    sBIFqdn: typing.Union[MetaOapg.properties.sBIFqdn, str, schemas.Unset] = schemas.unset,
                                    sNssaiSmfInfoList: typing.Union[MetaOapg.properties.sNssaiSmfInfoList, list, tuple, schemas.Unset] = schemas.unset,
                                    taiList: typing.Union['TaiList', schemas.Unset] = schemas.unset,
                                    taiRangeList: typing.Union[MetaOapg.properties.taiRangeList, list, tuple, schemas.Unset] = schemas.unset,
                                    pwgFqdn: typing.Union[MetaOapg.properties.pwgFqdn, str, schemas.Unset] = schemas.unset,
                                    pgwAddrList: typing.Union[MetaOapg.properties.pgwAddrList, list, tuple, schemas.Unset] = schemas.unset,
                                    accessType: typing.Union['AccessType', schemas.Unset] = schemas.unset,
                                    priority: typing.Union[MetaOapg.properties.priority, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                    cNSIIdList: typing.Union['CNSIIdList', schemas.Unset] = schemas.unset,
                                    vsmfSupportInd: typing.Union[MetaOapg.properties.vsmfSupportInd, bool, schemas.Unset] = schemas.unset,
                                    pwgFqdnList: typing.Union[MetaOapg.properties.pwgFqdnList, list, tuple, schemas.Unset] = schemas.unset,
                                    managedNFProfile: typing.Union['ManagedNFProfile', schemas.Unset] = schemas.unset,
                                    commModelList: typing.Union['CommModelList', schemas.Unset] = schemas.unset,
                                    configurable5QISetRef: typing.Union[MetaOapg.properties.configurable5QISetRef, str, schemas.Unset] = schemas.unset,
                                    dynamic5QISetRef: typing.Union[MetaOapg.properties.dynamic5QISetRef, str, schemas.Unset] = schemas.unset,
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'all_of_1':
                                    return super().__new__(
                                        cls,
                                        *_args,
                                        pLMNInfoList=pLMNInfoList,
                                        nRTACList=nRTACList,
                                        sBIFqdn=sBIFqdn,
                                        sNssaiSmfInfoList=sNssaiSmfInfoList,
                                        taiList=taiList,
                                        taiRangeList=taiRangeList,
                                        pwgFqdn=pwgFqdn,
                                        pgwAddrList=pgwAddrList,
                                        accessType=accessType,
                                        priority=priority,
                                        cNSIIdList=cNSIIdList,
                                        vsmfSupportInd=vsmfSupportInd,
                                        pwgFqdnList=pwgFqdnList,
                                        managedNFProfile=managedNFProfile,
                                        commModelList=commModelList,
                                        configurable5QISetRef=configurable5QISetRef,
                                        dynamic5QISetRef=dynamic5QISetRef,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    ManagedFunctionAttr,
                                    cls.all_of_1,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'attributes':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    __annotations__ = {
                        "attributes": attributes,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> MetaOapg.properties.attributes: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["attributes", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> typing.Union[MetaOapg.properties.attributes, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["attributes", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                attributes: typing.Union[MetaOapg.properties.attributes, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *_args,
                    attributes=attributes,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        
        class all_of_3(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                
                    @staticmethod
                    def EP_N4() -> typing.Type['EPN4Multiple']:
                        return EPN4Multiple
                
                    @staticmethod
                    def EP_N7() -> typing.Type['EPN7Multiple']:
                        return EPN7Multiple
                
                    @staticmethod
                    def EP_N10() -> typing.Type['EPN10Multiple']:
                        return EPN10Multiple
                
                    @staticmethod
                    def EP_N11() -> typing.Type['EPN11Multiple']:
                        return EPN11Multiple
                
                    @staticmethod
                    def EP_N16() -> typing.Type['EPN16Multiple']:
                        return EPN16Multiple
                
                    @staticmethod
                    def EP_S5C() -> typing.Type['EPS5CMultiple']:
                        return EPS5CMultiple
                
                    @staticmethod
                    def FiveQiDscpMappingSet() -> typing.Type['FiveQiDscpMappingSetSingle']:
                        return FiveQiDscpMappingSetSingle
                
                    @staticmethod
                    def GtpUPathQoSMonitoringControl() -> typing.Type['GtpUPathQoSMonitoringControlSingle']:
                        return GtpUPathQoSMonitoringControlSingle
                
                    @staticmethod
                    def QFQoSMonitoringControl() -> typing.Type['QFQoSMonitoringControlSingle']:
                        return QFQoSMonitoringControlSingle
                
                    @staticmethod
                    def PredefinedPccRuleSet() -> typing.Type['PredefinedPccRuleSetSingle']:
                        return PredefinedPccRuleSetSingle
                    __annotations__ = {
                        "EP_N4": EP_N4,
                        "EP_N7": EP_N7,
                        "EP_N10": EP_N10,
                        "EP_N11": EP_N11,
                        "EP_N16": EP_N16,
                        "EP_S5C": EP_S5C,
                        "FiveQiDscpMappingSet": FiveQiDscpMappingSet,
                        "GtpUPathQoSMonitoringControl": GtpUPathQoSMonitoringControl,
                        "QFQoSMonitoringControl": QFQoSMonitoringControl,
                        "PredefinedPccRuleSet": PredefinedPccRuleSet,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["EP_N4"]) -> 'EPN4Multiple': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["EP_N7"]) -> 'EPN7Multiple': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["EP_N10"]) -> 'EPN10Multiple': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["EP_N11"]) -> 'EPN11Multiple': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["EP_N16"]) -> 'EPN16Multiple': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["EP_S5C"]) -> 'EPS5CMultiple': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["FiveQiDscpMappingSet"]) -> 'FiveQiDscpMappingSetSingle': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["GtpUPathQoSMonitoringControl"]) -> 'GtpUPathQoSMonitoringControlSingle': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["QFQoSMonitoringControl"]) -> 'QFQoSMonitoringControlSingle': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["PredefinedPccRuleSet"]) -> 'PredefinedPccRuleSetSingle': ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["EP_N4", "EP_N7", "EP_N10", "EP_N11", "EP_N16", "EP_S5C", "FiveQiDscpMappingSet", "GtpUPathQoSMonitoringControl", "QFQoSMonitoringControl", "PredefinedPccRuleSet", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["EP_N4"]) -> typing.Union['EPN4Multiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["EP_N7"]) -> typing.Union['EPN7Multiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["EP_N10"]) -> typing.Union['EPN10Multiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["EP_N11"]) -> typing.Union['EPN11Multiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["EP_N16"]) -> typing.Union['EPN16Multiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["EP_S5C"]) -> typing.Union['EPS5CMultiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["FiveQiDscpMappingSet"]) -> typing.Union['FiveQiDscpMappingSetSingle', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["GtpUPathQoSMonitoringControl"]) -> typing.Union['GtpUPathQoSMonitoringControlSingle', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["QFQoSMonitoringControl"]) -> typing.Union['QFQoSMonitoringControlSingle', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["PredefinedPccRuleSet"]) -> typing.Union['PredefinedPccRuleSetSingle', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["EP_N4", "EP_N7", "EP_N10", "EP_N11", "EP_N16", "EP_S5C", "FiveQiDscpMappingSet", "GtpUPathQoSMonitoringControl", "QFQoSMonitoringControl", "PredefinedPccRuleSet", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                EP_N4: typing.Union['EPN4Multiple', schemas.Unset] = schemas.unset,
                EP_N7: typing.Union['EPN7Multiple', schemas.Unset] = schemas.unset,
                EP_N10: typing.Union['EPN10Multiple', schemas.Unset] = schemas.unset,
                EP_N11: typing.Union['EPN11Multiple', schemas.Unset] = schemas.unset,
                EP_N16: typing.Union['EPN16Multiple', schemas.Unset] = schemas.unset,
                EP_S5C: typing.Union['EPS5CMultiple', schemas.Unset] = schemas.unset,
                FiveQiDscpMappingSet: typing.Union['FiveQiDscpMappingSetSingle', schemas.Unset] = schemas.unset,
                GtpUPathQoSMonitoringControl: typing.Union['GtpUPathQoSMonitoringControlSingle', schemas.Unset] = schemas.unset,
                QFQoSMonitoringControl: typing.Union['QFQoSMonitoringControlSingle', schemas.Unset] = schemas.unset,
                PredefinedPccRuleSet: typing.Union['PredefinedPccRuleSetSingle', schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_3':
                return super().__new__(
                    cls,
                    *_args,
                    EP_N4=EP_N4,
                    EP_N7=EP_N7,
                    EP_N10=EP_N10,
                    EP_N11=EP_N11,
                    EP_N16=EP_N16,
                    EP_S5C=EP_S5C,
                    FiveQiDscpMappingSet=FiveQiDscpMappingSet,
                    GtpUPathQoSMonitoringControl=GtpUPathQoSMonitoringControl,
                    QFQoSMonitoringControl=QFQoSMonitoringControl,
                    PredefinedPccRuleSet=PredefinedPccRuleSet,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                Top,
                cls.all_of_1,
                ManagedFunctionNcO,
                cls.all_of_3,
            ]


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SmfFunctionSingle':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.access_type import AccessType
from openapi_client.model.cnsiid_list import CNSIIdList
from openapi_client.model.comm_model_list import CommModelList
from openapi_client.model.epn10_multiple import EPN10Multiple
from openapi_client.model.epn11_multiple import EPN11Multiple
from openapi_client.model.epn16_multiple import EPN16Multiple
from openapi_client.model.epn4_multiple import EPN4Multiple
from openapi_client.model.epn7_multiple import EPN7Multiple
from openapi_client.model.eps5_c_multiple import EPS5CMultiple
from openapi_client.model.five_qi_dscp_mapping_set_single import FiveQiDscpMappingSetSingle
from openapi_client.model.gtp_u_path_qo_s_monitoring_control_single import GtpUPathQoSMonitoringControlSingle
from openapi_client.model.ip_addr1 import IpAddr1
from openapi_client.model.managed_function_attr import ManagedFunctionAttr
from openapi_client.model.managed_function_nc_o import ManagedFunctionNcO
from openapi_client.model.managed_nf_profile import ManagedNFProfile
from openapi_client.model.plmn_info_list import PlmnInfoList
from openapi_client.model.predefined_pcc_rule_set_single import PredefinedPccRuleSetSingle
from openapi_client.model.qfqo_s_monitoring_control_single import QFQoSMonitoringControlSingle
from openapi_client.model.s_nssai_smf_info_item import SNssaiSmfInfoItem
from openapi_client.model.tac_list import TACList
from openapi_client.model.tai_list import TaiList
from openapi_client.model.tai_range import TaiRange
from openapi_client.model.top import Top
