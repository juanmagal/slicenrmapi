# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class SteeringMode(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def steerModeValue() -> typing.Type['SteerModeValue']:
                return SteerModeValue
        
            @staticmethod
            def active() -> typing.Type['AccessType']:
                return AccessType
        
            @staticmethod
            def standby() -> typing.Type['AccessTypeRm']:
                return AccessTypeRm
        
            @staticmethod
            def threeGLoad() -> typing.Type['Uinteger']:
                return Uinteger
        
            @staticmethod
            def prioAcc() -> typing.Type['AccessType']:
                return AccessType
            __annotations__ = {
                "steerModeValue": steerModeValue,
                "active": active,
                "standby": standby,
                "threeGLoad": threeGLoad,
                "prioAcc": prioAcc,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["steerModeValue"]) -> 'SteerModeValue': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["active"]) -> 'AccessType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["standby"]) -> 'AccessTypeRm': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["threeGLoad"]) -> 'Uinteger': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["prioAcc"]) -> 'AccessType': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["steerModeValue", "active", "standby", "threeGLoad", "prioAcc", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["steerModeValue"]) -> typing.Union['SteerModeValue', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["active"]) -> typing.Union['AccessType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["standby"]) -> typing.Union['AccessTypeRm', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["threeGLoad"]) -> typing.Union['Uinteger', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["prioAcc"]) -> typing.Union['AccessType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["steerModeValue", "active", "standby", "threeGLoad", "prioAcc", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        steerModeValue: typing.Union['SteerModeValue', schemas.Unset] = schemas.unset,
        active: typing.Union['AccessType', schemas.Unset] = schemas.unset,
        standby: typing.Union['AccessTypeRm', schemas.Unset] = schemas.unset,
        threeGLoad: typing.Union['Uinteger', schemas.Unset] = schemas.unset,
        prioAcc: typing.Union['AccessType', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SteeringMode':
        return super().__new__(
            cls,
            *_args,
            steerModeValue=steerModeValue,
            active=active,
            standby=standby,
            threeGLoad=threeGLoad,
            prioAcc=prioAcc,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.access_type import AccessType
from openapi_client.model.access_type_rm import AccessTypeRm
from openapi_client.model.steer_mode_value import SteerModeValue
from openapi_client.model.uinteger import Uinteger
