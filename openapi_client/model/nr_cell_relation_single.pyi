# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class NRCellRelationSingle(
    schemas.ComposedSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    
                    
                    class attributes(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                                nRTCI = schemas.IntSchema
                            
                                @staticmethod
                                def cellIndividualOffset() -> typing.Type['CellIndividualOffset']:
                                    return CellIndividualOffset
                                adjacentNRCellRef = schemas.StrSchema
                                nRFreqRelationRef = schemas.StrSchema
                                isRemoveAllowed = schemas.BoolSchema
                                isHOAllowed = schemas.BoolSchema
                            
                                @staticmethod
                                def isESCoveredBy() -> typing.Type['IsESCoveredBy']:
                                    return IsESCoveredBy
                                isENDCAllowed = schemas.BoolSchema
                                isMLBAllowed = schemas.BoolSchema
                                __annotations__ = {
                                    "nRTCI": nRTCI,
                                    "cellIndividualOffset": cellIndividualOffset,
                                    "adjacentNRCellRef": adjacentNRCellRef,
                                    "nRFreqRelationRef": nRFreqRelationRef,
                                    "isRemoveAllowed": isRemoveAllowed,
                                    "isHOAllowed": isHOAllowed,
                                    "isESCoveredBy": isESCoveredBy,
                                    "isENDCAllowed": isENDCAllowed,
                                    "isMLBAllowed": isMLBAllowed,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["nRTCI"]) -> MetaOapg.properties.nRTCI: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["cellIndividualOffset"]) -> 'CellIndividualOffset': ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["adjacentNRCellRef"]) -> MetaOapg.properties.adjacentNRCellRef: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["nRFreqRelationRef"]) -> MetaOapg.properties.nRFreqRelationRef: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["isRemoveAllowed"]) -> MetaOapg.properties.isRemoveAllowed: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["isHOAllowed"]) -> MetaOapg.properties.isHOAllowed: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["isESCoveredBy"]) -> 'IsESCoveredBy': ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["isENDCAllowed"]) -> MetaOapg.properties.isENDCAllowed: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["isMLBAllowed"]) -> MetaOapg.properties.isMLBAllowed: ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["nRTCI", "cellIndividualOffset", "adjacentNRCellRef", "nRFreqRelationRef", "isRemoveAllowed", "isHOAllowed", "isESCoveredBy", "isENDCAllowed", "isMLBAllowed", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["nRTCI"]) -> typing.Union[MetaOapg.properties.nRTCI, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["cellIndividualOffset"]) -> typing.Union['CellIndividualOffset', schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["adjacentNRCellRef"]) -> typing.Union[MetaOapg.properties.adjacentNRCellRef, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["nRFreqRelationRef"]) -> typing.Union[MetaOapg.properties.nRFreqRelationRef, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["isRemoveAllowed"]) -> typing.Union[MetaOapg.properties.isRemoveAllowed, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["isHOAllowed"]) -> typing.Union[MetaOapg.properties.isHOAllowed, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["isESCoveredBy"]) -> typing.Union['IsESCoveredBy', schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["isENDCAllowed"]) -> typing.Union[MetaOapg.properties.isENDCAllowed, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["isMLBAllowed"]) -> typing.Union[MetaOapg.properties.isMLBAllowed, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["nRTCI", "cellIndividualOffset", "adjacentNRCellRef", "nRFreqRelationRef", "isRemoveAllowed", "isHOAllowed", "isESCoveredBy", "isENDCAllowed", "isMLBAllowed", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            nRTCI: typing.Union[MetaOapg.properties.nRTCI, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            cellIndividualOffset: typing.Union['CellIndividualOffset', schemas.Unset] = schemas.unset,
                            adjacentNRCellRef: typing.Union[MetaOapg.properties.adjacentNRCellRef, str, schemas.Unset] = schemas.unset,
                            nRFreqRelationRef: typing.Union[MetaOapg.properties.nRFreqRelationRef, str, schemas.Unset] = schemas.unset,
                            isRemoveAllowed: typing.Union[MetaOapg.properties.isRemoveAllowed, bool, schemas.Unset] = schemas.unset,
                            isHOAllowed: typing.Union[MetaOapg.properties.isHOAllowed, bool, schemas.Unset] = schemas.unset,
                            isESCoveredBy: typing.Union['IsESCoveredBy', schemas.Unset] = schemas.unset,
                            isENDCAllowed: typing.Union[MetaOapg.properties.isENDCAllowed, bool, schemas.Unset] = schemas.unset,
                            isMLBAllowed: typing.Union[MetaOapg.properties.isMLBAllowed, bool, schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'attributes':
                            return super().__new__(
                                cls,
                                *_args,
                                nRTCI=nRTCI,
                                cellIndividualOffset=cellIndividualOffset,
                                adjacentNRCellRef=adjacentNRCellRef,
                                nRFreqRelationRef=nRFreqRelationRef,
                                isRemoveAllowed=isRemoveAllowed,
                                isHOAllowed=isHOAllowed,
                                isESCoveredBy=isESCoveredBy,
                                isENDCAllowed=isENDCAllowed,
                                isMLBAllowed=isMLBAllowed,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    __annotations__ = {
                        "attributes": attributes,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> MetaOapg.properties.attributes: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["attributes", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> typing.Union[MetaOapg.properties.attributes, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["attributes", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                attributes: typing.Union[MetaOapg.properties.attributes, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *_args,
                    attributes=attributes,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                Top,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NRCellRelationSingle':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.cell_individual_offset import CellIndividualOffset
from openapi_client.model.is_es_covered_by import IsESCoveredBy
from openapi_client.model.top import Top
