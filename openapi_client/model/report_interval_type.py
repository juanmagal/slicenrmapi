# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ReportIntervalType(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    See details in 3GPP TS 32.422 clause 5.10.5.
    """


    class MetaOapg:
        
        class properties:
            
            
            class UMTS(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "250ms": "DIGIT_TWO_50MS",
                                "500ms": "DIGIT_FIVE_00MS",
                                "1000ms": "DIGIT_ONE_000MS",
                                "2000ms": "DIGIT_TWO_000MS",
                                "3000ms": "DIGIT_THREE_000MS",
                                "4000ms": "DIGIT_FOUR_000MS",
                                "6000ms": "DIGIT_SIX_000MS",
                                "8000ms": "DIGIT_EIGHT_000MS",
                                "12000ms": "DIGIT_ONE_2000MS",
                                "16000ms": "DIGIT_ONE_6000MS",
                                "20000ms": "DIGIT_TWO_0000MS",
                                "24000ms": "DIGIT_TWO_4000MS",
                                "28000ms": "DIGIT_TWO_8000MS",
                                "32000ms": "DIGIT_THREE_2000MS",
                                "64000ms": "DIGIT_SIX_4000MS",
                            }
                        
                        @schemas.classproperty
                        def DIGIT_TWO_50MS(cls):
                            return cls("250ms")
                        
                        @schemas.classproperty
                        def DIGIT_FIVE_00MS(cls):
                            return cls("500ms")
                        
                        @schemas.classproperty
                        def DIGIT_ONE_000MS(cls):
                            return cls("1000ms")
                        
                        @schemas.classproperty
                        def DIGIT_TWO_000MS(cls):
                            return cls("2000ms")
                        
                        @schemas.classproperty
                        def DIGIT_THREE_000MS(cls):
                            return cls("3000ms")
                        
                        @schemas.classproperty
                        def DIGIT_FOUR_000MS(cls):
                            return cls("4000ms")
                        
                        @schemas.classproperty
                        def DIGIT_SIX_000MS(cls):
                            return cls("6000ms")
                        
                        @schemas.classproperty
                        def DIGIT_EIGHT_000MS(cls):
                            return cls("8000ms")
                        
                        @schemas.classproperty
                        def DIGIT_ONE_2000MS(cls):
                            return cls("12000ms")
                        
                        @schemas.classproperty
                        def DIGIT_ONE_6000MS(cls):
                            return cls("16000ms")
                        
                        @schemas.classproperty
                        def DIGIT_TWO_0000MS(cls):
                            return cls("20000ms")
                        
                        @schemas.classproperty
                        def DIGIT_TWO_4000MS(cls):
                            return cls("24000ms")
                        
                        @schemas.classproperty
                        def DIGIT_TWO_8000MS(cls):
                            return cls("28000ms")
                        
                        @schemas.classproperty
                        def DIGIT_THREE_2000MS(cls):
                            return cls("32000ms")
                        
                        @schemas.classproperty
                        def DIGIT_SIX_4000MS(cls):
                            return cls("64000ms")
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'UMTS':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class LTE(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "120ms": "DIGIT_ONE_20MS",
                                "240ms": "DIGIT_TWO_40MS",
                                "480ms": "DIGIT_FOUR_80MS",
                                "640ms": "DIGIT_SIX_40MS",
                                "1024ms": "DIGIT_ONE_024MS",
                                "2048ms": "DIGIT_TWO_048MS",
                                "5120ms": "DIGIT_FIVE_120MS",
                                "10240ms": "DIGIT_ONE_0240MS",
                                "60000ms": "DIGIT_SIX_0000MS",
                                "360000ms": "DIGIT_THREE_60000MS",
                                "720000ms": "DIGIT_SEVEN_20000MS",
                                "1800000ms": "DIGIT_ONE_800000MS",
                                "3600000ms": "DIGIT_THREE_600000MS",
                            }
                        
                        @schemas.classproperty
                        def DIGIT_ONE_20MS(cls):
                            return cls("120ms")
                        
                        @schemas.classproperty
                        def DIGIT_TWO_40MS(cls):
                            return cls("240ms")
                        
                        @schemas.classproperty
                        def DIGIT_FOUR_80MS(cls):
                            return cls("480ms")
                        
                        @schemas.classproperty
                        def DIGIT_SIX_40MS(cls):
                            return cls("640ms")
                        
                        @schemas.classproperty
                        def DIGIT_ONE_024MS(cls):
                            return cls("1024ms")
                        
                        @schemas.classproperty
                        def DIGIT_TWO_048MS(cls):
                            return cls("2048ms")
                        
                        @schemas.classproperty
                        def DIGIT_FIVE_120MS(cls):
                            return cls("5120ms")
                        
                        @schemas.classproperty
                        def DIGIT_ONE_0240MS(cls):
                            return cls("10240ms")
                        
                        @schemas.classproperty
                        def DIGIT_SIX_0000MS(cls):
                            return cls("60000ms")
                        
                        @schemas.classproperty
                        def DIGIT_THREE_60000MS(cls):
                            return cls("360000ms")
                        
                        @schemas.classproperty
                        def DIGIT_SEVEN_20000MS(cls):
                            return cls("720000ms")
                        
                        @schemas.classproperty
                        def DIGIT_ONE_800000MS(cls):
                            return cls("1800000ms")
                        
                        @schemas.classproperty
                        def DIGIT_THREE_600000MS(cls):
                            return cls("3600000ms")
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'LTE':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class NR(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "120ms": "DIGIT_ONE_20MS",
                                "240ms": "DIGIT_TWO_40MS",
                                "480ms": "DIGIT_FOUR_80MS",
                                "640ms": "DIGIT_SIX_40MS",
                                "1024ms": "DIGIT_ONE_024MS",
                                "2048ms": "DIGIT_TWO_048MS",
                                "5120ms": "DIGIT_FIVE_120MS",
                                "10240ms": "DIGIT_ONE_0240MS",
                                "20480ms": "DIGIT_TWO_0480MS",
                                "40960ms": "DIGIT_FOUR_0960MS",
                                "60000ms": "DIGIT_SIX_0000MS",
                                "360000ms": "DIGIT_THREE_60000MS",
                                "720000ms": "DIGIT_SEVEN_20000MS",
                                "1800000ms": "DIGIT_ONE_800000MS",
                            }
                        
                        @schemas.classproperty
                        def DIGIT_ONE_20MS(cls):
                            return cls("120ms")
                        
                        @schemas.classproperty
                        def DIGIT_TWO_40MS(cls):
                            return cls("240ms")
                        
                        @schemas.classproperty
                        def DIGIT_FOUR_80MS(cls):
                            return cls("480ms")
                        
                        @schemas.classproperty
                        def DIGIT_SIX_40MS(cls):
                            return cls("640ms")
                        
                        @schemas.classproperty
                        def DIGIT_ONE_024MS(cls):
                            return cls("1024ms")
                        
                        @schemas.classproperty
                        def DIGIT_TWO_048MS(cls):
                            return cls("2048ms")
                        
                        @schemas.classproperty
                        def DIGIT_FIVE_120MS(cls):
                            return cls("5120ms")
                        
                        @schemas.classproperty
                        def DIGIT_ONE_0240MS(cls):
                            return cls("10240ms")
                        
                        @schemas.classproperty
                        def DIGIT_TWO_0480MS(cls):
                            return cls("20480ms")
                        
                        @schemas.classproperty
                        def DIGIT_FOUR_0960MS(cls):
                            return cls("40960ms")
                        
                        @schemas.classproperty
                        def DIGIT_SIX_0000MS(cls):
                            return cls("60000ms")
                        
                        @schemas.classproperty
                        def DIGIT_THREE_60000MS(cls):
                            return cls("360000ms")
                        
                        @schemas.classproperty
                        def DIGIT_SEVEN_20000MS(cls):
                            return cls("720000ms")
                        
                        @schemas.classproperty
                        def DIGIT_ONE_800000MS(cls):
                            return cls("1800000ms")
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'NR':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "UMTS": UMTS,
                "LTE": LTE,
                "NR": NR,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["UMTS"]) -> MetaOapg.properties.UMTS: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["LTE"]) -> MetaOapg.properties.LTE: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["NR"]) -> MetaOapg.properties.NR: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["UMTS", "LTE", "NR", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["UMTS"]) -> typing.Union[MetaOapg.properties.UMTS, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["LTE"]) -> typing.Union[MetaOapg.properties.LTE, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["NR"]) -> typing.Union[MetaOapg.properties.NR, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["UMTS", "LTE", "NR", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        UMTS: typing.Union[MetaOapg.properties.UMTS, list, tuple, schemas.Unset] = schemas.unset,
        LTE: typing.Union[MetaOapg.properties.LTE, list, tuple, schemas.Unset] = schemas.unset,
        NR: typing.Union[MetaOapg.properties.NR, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ReportIntervalType':
        return super().__new__(
            cls,
            *_args,
            UMTS=UMTS,
            LTE=LTE,
            NR=NR,
            _configuration=_configuration,
            **kwargs,
        )
