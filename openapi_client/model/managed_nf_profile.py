# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ManagedNFProfile(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            nfInstanceID = schemas.StrSchema
        
            @staticmethod
            def nfType() -> typing.Type['NFType']:
                return NFType
            heartbeatTimer = schemas.IntSchema
            authzInfo = schemas.StrSchema
        
            @staticmethod
            def hostAddr() -> typing.Type['HostAddr']:
                return HostAddr
            
            
            class allowedPLMNs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['PlmnId']:
                        return PlmnId
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['PlmnId'], typing.List['PlmnId']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'allowedPLMNs':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'PlmnId':
                    return super().__getitem__(i)
            
            
            class allowedSNPNs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SnpnInfo']:
                        return SnpnInfo
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['SnpnInfo'], typing.List['SnpnInfo']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'allowedSNPNs':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SnpnInfo':
                    return super().__getitem__(i)
            
            
            class allowedNfTypes(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['NFType']:
                        return NFType
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['NFType'], typing.List['NFType']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'allowedNfTypes':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'NFType':
                    return super().__getitem__(i)
            
            
            class allowedNfDomains(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'allowedNfDomains':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class allowedNSSAIs(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Snssai']:
                        return Snssai
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Snssai'], typing.List['Snssai']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'allowedNSSAIs':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Snssai':
                    return super().__getitem__(i)
            locality = schemas.StrSchema
        
            @staticmethod
            def nFInfo() -> typing.Type['NFInfo']:
                return NFInfo
            capacity = schemas.IntSchema
            
            
            class nfSetIdList(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'nfSetIdList':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class servingScope(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'servingScope':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class nfSetRecoveryTimeList(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.DateTimeSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, datetime, ]], typing.List[typing.Union[MetaOapg.items, str, datetime, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'nfSetRecoveryTimeList':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class scpDomains(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'scpDomains':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            vendorId = schemas.StrSchema
            __annotations__ = {
                "nfInstanceID": nfInstanceID,
                "nfType": nfType,
                "heartbeatTimer": heartbeatTimer,
                "authzInfo": authzInfo,
                "hostAddr": hostAddr,
                "allowedPLMNs": allowedPLMNs,
                "allowedSNPNs": allowedSNPNs,
                "allowedNfTypes": allowedNfTypes,
                "allowedNfDomains": allowedNfDomains,
                "allowedNSSAIs": allowedNSSAIs,
                "locality": locality,
                "nFInfo": nFInfo,
                "capacity": capacity,
                "nfSetIdList": nfSetIdList,
                "servingScope": servingScope,
                "nfSetRecoveryTimeList": nfSetRecoveryTimeList,
                "scpDomains": scpDomains,
                "vendorId": vendorId,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nfInstanceID"]) -> MetaOapg.properties.nfInstanceID: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nfType"]) -> 'NFType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["heartbeatTimer"]) -> MetaOapg.properties.heartbeatTimer: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["authzInfo"]) -> MetaOapg.properties.authzInfo: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hostAddr"]) -> 'HostAddr': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowedPLMNs"]) -> MetaOapg.properties.allowedPLMNs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowedSNPNs"]) -> MetaOapg.properties.allowedSNPNs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowedNfTypes"]) -> MetaOapg.properties.allowedNfTypes: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowedNfDomains"]) -> MetaOapg.properties.allowedNfDomains: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowedNSSAIs"]) -> MetaOapg.properties.allowedNSSAIs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["locality"]) -> MetaOapg.properties.locality: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nFInfo"]) -> 'NFInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["capacity"]) -> MetaOapg.properties.capacity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nfSetIdList"]) -> MetaOapg.properties.nfSetIdList: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["servingScope"]) -> MetaOapg.properties.servingScope: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nfSetRecoveryTimeList"]) -> MetaOapg.properties.nfSetRecoveryTimeList: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["scpDomains"]) -> MetaOapg.properties.scpDomains: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vendorId"]) -> MetaOapg.properties.vendorId: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["nfInstanceID", "nfType", "heartbeatTimer", "authzInfo", "hostAddr", "allowedPLMNs", "allowedSNPNs", "allowedNfTypes", "allowedNfDomains", "allowedNSSAIs", "locality", "nFInfo", "capacity", "nfSetIdList", "servingScope", "nfSetRecoveryTimeList", "scpDomains", "vendorId", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nfInstanceID"]) -> typing.Union[MetaOapg.properties.nfInstanceID, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nfType"]) -> typing.Union['NFType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["heartbeatTimer"]) -> typing.Union[MetaOapg.properties.heartbeatTimer, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["authzInfo"]) -> typing.Union[MetaOapg.properties.authzInfo, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hostAddr"]) -> typing.Union['HostAddr', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowedPLMNs"]) -> typing.Union[MetaOapg.properties.allowedPLMNs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowedSNPNs"]) -> typing.Union[MetaOapg.properties.allowedSNPNs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowedNfTypes"]) -> typing.Union[MetaOapg.properties.allowedNfTypes, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowedNfDomains"]) -> typing.Union[MetaOapg.properties.allowedNfDomains, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowedNSSAIs"]) -> typing.Union[MetaOapg.properties.allowedNSSAIs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["locality"]) -> typing.Union[MetaOapg.properties.locality, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nFInfo"]) -> typing.Union['NFInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["capacity"]) -> typing.Union[MetaOapg.properties.capacity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nfSetIdList"]) -> typing.Union[MetaOapg.properties.nfSetIdList, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["servingScope"]) -> typing.Union[MetaOapg.properties.servingScope, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nfSetRecoveryTimeList"]) -> typing.Union[MetaOapg.properties.nfSetRecoveryTimeList, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["scpDomains"]) -> typing.Union[MetaOapg.properties.scpDomains, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vendorId"]) -> typing.Union[MetaOapg.properties.vendorId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["nfInstanceID", "nfType", "heartbeatTimer", "authzInfo", "hostAddr", "allowedPLMNs", "allowedSNPNs", "allowedNfTypes", "allowedNfDomains", "allowedNSSAIs", "locality", "nFInfo", "capacity", "nfSetIdList", "servingScope", "nfSetRecoveryTimeList", "scpDomains", "vendorId", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        nfInstanceID: typing.Union[MetaOapg.properties.nfInstanceID, str, schemas.Unset] = schemas.unset,
        nfType: typing.Union['NFType', schemas.Unset] = schemas.unset,
        heartbeatTimer: typing.Union[MetaOapg.properties.heartbeatTimer, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        authzInfo: typing.Union[MetaOapg.properties.authzInfo, str, schemas.Unset] = schemas.unset,
        hostAddr: typing.Union['HostAddr', schemas.Unset] = schemas.unset,
        allowedPLMNs: typing.Union[MetaOapg.properties.allowedPLMNs, list, tuple, schemas.Unset] = schemas.unset,
        allowedSNPNs: typing.Union[MetaOapg.properties.allowedSNPNs, list, tuple, schemas.Unset] = schemas.unset,
        allowedNfTypes: typing.Union[MetaOapg.properties.allowedNfTypes, list, tuple, schemas.Unset] = schemas.unset,
        allowedNfDomains: typing.Union[MetaOapg.properties.allowedNfDomains, list, tuple, schemas.Unset] = schemas.unset,
        allowedNSSAIs: typing.Union[MetaOapg.properties.allowedNSSAIs, list, tuple, schemas.Unset] = schemas.unset,
        locality: typing.Union[MetaOapg.properties.locality, str, schemas.Unset] = schemas.unset,
        nFInfo: typing.Union['NFInfo', schemas.Unset] = schemas.unset,
        capacity: typing.Union[MetaOapg.properties.capacity, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        nfSetIdList: typing.Union[MetaOapg.properties.nfSetIdList, list, tuple, schemas.Unset] = schemas.unset,
        servingScope: typing.Union[MetaOapg.properties.servingScope, list, tuple, schemas.Unset] = schemas.unset,
        nfSetRecoveryTimeList: typing.Union[MetaOapg.properties.nfSetRecoveryTimeList, list, tuple, schemas.Unset] = schemas.unset,
        scpDomains: typing.Union[MetaOapg.properties.scpDomains, list, tuple, schemas.Unset] = schemas.unset,
        vendorId: typing.Union[MetaOapg.properties.vendorId, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ManagedNFProfile':
        return super().__new__(
            cls,
            *_args,
            nfInstanceID=nfInstanceID,
            nfType=nfType,
            heartbeatTimer=heartbeatTimer,
            authzInfo=authzInfo,
            hostAddr=hostAddr,
            allowedPLMNs=allowedPLMNs,
            allowedSNPNs=allowedSNPNs,
            allowedNfTypes=allowedNfTypes,
            allowedNfDomains=allowedNfDomains,
            allowedNSSAIs=allowedNSSAIs,
            locality=locality,
            nFInfo=nFInfo,
            capacity=capacity,
            nfSetIdList=nfSetIdList,
            servingScope=servingScope,
            nfSetRecoveryTimeList=nfSetRecoveryTimeList,
            scpDomains=scpDomains,
            vendorId=vendorId,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.host_addr import HostAddr
from openapi_client.model.nf_info import NFInfo
from openapi_client.model.nf_type import NFType
from openapi_client.model.plmn_id import PlmnId
from openapi_client.model.snpn_info import SnpnInfo
from openapi_client.model.snssai import Snssai
