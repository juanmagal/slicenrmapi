# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class NrCellDuSingle(
    schemas.ComposedSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    
                    
                    class attributes(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class all_of_1(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    class properties:
                                    
                                        @staticmethod
                                        def administrativeState() -> typing.Type['AdministrativeState']:
                                            return AdministrativeState
                                    
                                        @staticmethod
                                        def operationalState() -> typing.Type['OperationalState']:
                                            return OperationalState
                                        cellLocalId = schemas.IntSchema
                                    
                                        @staticmethod
                                        def cellState() -> typing.Type['CellState']:
                                            return CellState
                                    
                                        @staticmethod
                                        def plmnInfoList() -> typing.Type['PlmnInfoList']:
                                            return PlmnInfoList
                                    
                                        @staticmethod
                                        def npnIdentityList() -> typing.Type['NpnIdentityList']:
                                            return NpnIdentityList
                                    
                                        @staticmethod
                                        def nrPci() -> typing.Type['NrPci']:
                                            return NrPci
                                    
                                        @staticmethod
                                        def nrTac() -> typing.Type['NrTac']:
                                            return NrTac
                                        arfcnDL = schemas.IntSchema
                                        arfcnUL = schemas.IntSchema
                                        arfcnSUL = schemas.IntSchema
                                        bSChannelBwDL = schemas.IntSchema
                                        bSChannelBwUL = schemas.IntSchema
                                        bSChannelBwSUL = schemas.IntSchema
                                        
                                        
                                        class ssbFrequency(
                                            schemas.IntSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                inclusive_maximum = 3279165
                                                inclusive_minimum = 0
                                    
                                        @staticmethod
                                        def ssbPeriodicity() -> typing.Type['SsbPeriodicity']:
                                            return SsbPeriodicity
                                    
                                        @staticmethod
                                        def ssbSubCarrierSpacing() -> typing.Type['SsbSubCarrierSpacing']:
                                            return SsbSubCarrierSpacing
                                        
                                        
                                        class ssbOffset(
                                            schemas.IntSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                inclusive_maximum = 159
                                                inclusive_minimum = 0
                                    
                                        @staticmethod
                                        def ssbDuration() -> typing.Type['SsbDuration']:
                                            return SsbDuration
                                        
                                        
                                        class nrSectorCarrierRef(
                                            schemas.ListSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                items = schemas.StrSchema
                                        
                                            def __new__(
                                                cls,
                                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                            ) -> 'nrSectorCarrierRef':
                                                return super().__new__(
                                                    cls,
                                                    _arg,
                                                    _configuration=_configuration,
                                                )
                                        
                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                return super().__getitem__(i)
                                        
                                        
                                        class bwpRef(
                                            schemas.ListSchema
                                        ):
                                        
                                        
                                            class MetaOapg:
                                                items = schemas.StrSchema
                                        
                                            def __new__(
                                                cls,
                                                _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                                _configuration: typing.Optional[schemas.Configuration] = None,
                                            ) -> 'bwpRef':
                                                return super().__new__(
                                                    cls,
                                                    _arg,
                                                    _configuration=_configuration,
                                                )
                                        
                                            def __getitem__(self, i: int) -> MetaOapg.items:
                                                return super().__getitem__(i)
                                        rimRSMonitoringStartTime = schemas.StrSchema
                                        rimRSMonitoringStopTime = schemas.StrSchema
                                        rimRSMonitoringWindowDuration = schemas.IntSchema
                                        rimRSMonitoringWindowStartingOffset = schemas.IntSchema
                                        rimRSMonitoringWindowPeriodicity = schemas.IntSchema
                                        rimRSMonitoringOccasionInterval = schemas.IntSchema
                                        rimRSMonitoringOccasionStartingOffset = schemas.IntSchema
                                        nRFrequencyRef = schemas.StrSchema
                                        victimSetRef = schemas.StrSchema
                                        aggressorSetRef = schemas.StrSchema
                                        __annotations__ = {
                                            "administrativeState": administrativeState,
                                            "operationalState": operationalState,
                                            "cellLocalId": cellLocalId,
                                            "cellState": cellState,
                                            "plmnInfoList": plmnInfoList,
                                            "npnIdentityList": npnIdentityList,
                                            "nrPci": nrPci,
                                            "nrTac": nrTac,
                                            "arfcnDL": arfcnDL,
                                            "arfcnUL": arfcnUL,
                                            "arfcnSUL": arfcnSUL,
                                            "bSChannelBwDL": bSChannelBwDL,
                                            "bSChannelBwUL": bSChannelBwUL,
                                            "bSChannelBwSUL": bSChannelBwSUL,
                                            "ssbFrequency": ssbFrequency,
                                            "ssbPeriodicity": ssbPeriodicity,
                                            "ssbSubCarrierSpacing": ssbSubCarrierSpacing,
                                            "ssbOffset": ssbOffset,
                                            "ssbDuration": ssbDuration,
                                            "nrSectorCarrierRef": nrSectorCarrierRef,
                                            "bwpRef": bwpRef,
                                            "rimRSMonitoringStartTime": rimRSMonitoringStartTime,
                                            "rimRSMonitoringStopTime": rimRSMonitoringStopTime,
                                            "rimRSMonitoringWindowDuration": rimRSMonitoringWindowDuration,
                                            "rimRSMonitoringWindowStartingOffset": rimRSMonitoringWindowStartingOffset,
                                            "rimRSMonitoringWindowPeriodicity": rimRSMonitoringWindowPeriodicity,
                                            "rimRSMonitoringOccasionInterval": rimRSMonitoringOccasionInterval,
                                            "rimRSMonitoringOccasionStartingOffset": rimRSMonitoringOccasionStartingOffset,
                                            "nRFrequencyRef": nRFrequencyRef,
                                            "victimSetRef": victimSetRef,
                                            "aggressorSetRef": aggressorSetRef,
                                        }
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["administrativeState"]) -> 'AdministrativeState': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["operationalState"]) -> 'OperationalState': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["cellLocalId"]) -> MetaOapg.properties.cellLocalId: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["cellState"]) -> 'CellState': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["plmnInfoList"]) -> 'PlmnInfoList': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["npnIdentityList"]) -> 'NpnIdentityList': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["nrPci"]) -> 'NrPci': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["nrTac"]) -> 'NrTac': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["arfcnDL"]) -> MetaOapg.properties.arfcnDL: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["arfcnUL"]) -> MetaOapg.properties.arfcnUL: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["arfcnSUL"]) -> MetaOapg.properties.arfcnSUL: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["bSChannelBwDL"]) -> MetaOapg.properties.bSChannelBwDL: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["bSChannelBwUL"]) -> MetaOapg.properties.bSChannelBwUL: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["bSChannelBwSUL"]) -> MetaOapg.properties.bSChannelBwSUL: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["ssbFrequency"]) -> MetaOapg.properties.ssbFrequency: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["ssbPeriodicity"]) -> 'SsbPeriodicity': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["ssbSubCarrierSpacing"]) -> 'SsbSubCarrierSpacing': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["ssbOffset"]) -> MetaOapg.properties.ssbOffset: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["ssbDuration"]) -> 'SsbDuration': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["nrSectorCarrierRef"]) -> MetaOapg.properties.nrSectorCarrierRef: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["bwpRef"]) -> MetaOapg.properties.bwpRef: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["rimRSMonitoringStartTime"]) -> MetaOapg.properties.rimRSMonitoringStartTime: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["rimRSMonitoringStopTime"]) -> MetaOapg.properties.rimRSMonitoringStopTime: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["rimRSMonitoringWindowDuration"]) -> MetaOapg.properties.rimRSMonitoringWindowDuration: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["rimRSMonitoringWindowStartingOffset"]) -> MetaOapg.properties.rimRSMonitoringWindowStartingOffset: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["rimRSMonitoringWindowPeriodicity"]) -> MetaOapg.properties.rimRSMonitoringWindowPeriodicity: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["rimRSMonitoringOccasionInterval"]) -> MetaOapg.properties.rimRSMonitoringOccasionInterval: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["rimRSMonitoringOccasionStartingOffset"]) -> MetaOapg.properties.rimRSMonitoringOccasionStartingOffset: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["nRFrequencyRef"]) -> MetaOapg.properties.nRFrequencyRef: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["victimSetRef"]) -> MetaOapg.properties.victimSetRef: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["aggressorSetRef"]) -> MetaOapg.properties.aggressorSetRef: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["administrativeState", "operationalState", "cellLocalId", "cellState", "plmnInfoList", "npnIdentityList", "nrPci", "nrTac", "arfcnDL", "arfcnUL", "arfcnSUL", "bSChannelBwDL", "bSChannelBwUL", "bSChannelBwSUL", "ssbFrequency", "ssbPeriodicity", "ssbSubCarrierSpacing", "ssbOffset", "ssbDuration", "nrSectorCarrierRef", "bwpRef", "rimRSMonitoringStartTime", "rimRSMonitoringStopTime", "rimRSMonitoringWindowDuration", "rimRSMonitoringWindowStartingOffset", "rimRSMonitoringWindowPeriodicity", "rimRSMonitoringOccasionInterval", "rimRSMonitoringOccasionStartingOffset", "nRFrequencyRef", "victimSetRef", "aggressorSetRef", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["administrativeState"]) -> typing.Union['AdministrativeState', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["operationalState"]) -> typing.Union['OperationalState', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["cellLocalId"]) -> typing.Union[MetaOapg.properties.cellLocalId, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["cellState"]) -> typing.Union['CellState', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["plmnInfoList"]) -> typing.Union['PlmnInfoList', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["npnIdentityList"]) -> typing.Union['NpnIdentityList', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["nrPci"]) -> typing.Union['NrPci', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["nrTac"]) -> typing.Union['NrTac', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["arfcnDL"]) -> typing.Union[MetaOapg.properties.arfcnDL, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["arfcnUL"]) -> typing.Union[MetaOapg.properties.arfcnUL, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["arfcnSUL"]) -> typing.Union[MetaOapg.properties.arfcnSUL, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["bSChannelBwDL"]) -> typing.Union[MetaOapg.properties.bSChannelBwDL, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["bSChannelBwUL"]) -> typing.Union[MetaOapg.properties.bSChannelBwUL, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["bSChannelBwSUL"]) -> typing.Union[MetaOapg.properties.bSChannelBwSUL, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["ssbFrequency"]) -> typing.Union[MetaOapg.properties.ssbFrequency, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["ssbPeriodicity"]) -> typing.Union['SsbPeriodicity', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["ssbSubCarrierSpacing"]) -> typing.Union['SsbSubCarrierSpacing', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["ssbOffset"]) -> typing.Union[MetaOapg.properties.ssbOffset, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["ssbDuration"]) -> typing.Union['SsbDuration', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["nrSectorCarrierRef"]) -> typing.Union[MetaOapg.properties.nrSectorCarrierRef, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["bwpRef"]) -> typing.Union[MetaOapg.properties.bwpRef, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["rimRSMonitoringStartTime"]) -> typing.Union[MetaOapg.properties.rimRSMonitoringStartTime, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["rimRSMonitoringStopTime"]) -> typing.Union[MetaOapg.properties.rimRSMonitoringStopTime, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["rimRSMonitoringWindowDuration"]) -> typing.Union[MetaOapg.properties.rimRSMonitoringWindowDuration, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["rimRSMonitoringWindowStartingOffset"]) -> typing.Union[MetaOapg.properties.rimRSMonitoringWindowStartingOffset, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["rimRSMonitoringWindowPeriodicity"]) -> typing.Union[MetaOapg.properties.rimRSMonitoringWindowPeriodicity, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["rimRSMonitoringOccasionInterval"]) -> typing.Union[MetaOapg.properties.rimRSMonitoringOccasionInterval, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["rimRSMonitoringOccasionStartingOffset"]) -> typing.Union[MetaOapg.properties.rimRSMonitoringOccasionStartingOffset, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["nRFrequencyRef"]) -> typing.Union[MetaOapg.properties.nRFrequencyRef, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["victimSetRef"]) -> typing.Union[MetaOapg.properties.victimSetRef, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["aggressorSetRef"]) -> typing.Union[MetaOapg.properties.aggressorSetRef, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["administrativeState", "operationalState", "cellLocalId", "cellState", "plmnInfoList", "npnIdentityList", "nrPci", "nrTac", "arfcnDL", "arfcnUL", "arfcnSUL", "bSChannelBwDL", "bSChannelBwUL", "bSChannelBwSUL", "ssbFrequency", "ssbPeriodicity", "ssbSubCarrierSpacing", "ssbOffset", "ssbDuration", "nrSectorCarrierRef", "bwpRef", "rimRSMonitoringStartTime", "rimRSMonitoringStopTime", "rimRSMonitoringWindowDuration", "rimRSMonitoringWindowStartingOffset", "rimRSMonitoringWindowPeriodicity", "rimRSMonitoringOccasionInterval", "rimRSMonitoringOccasionStartingOffset", "nRFrequencyRef", "victimSetRef", "aggressorSetRef", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *_args: typing.Union[dict, frozendict.frozendict, ],
                                    administrativeState: typing.Union['AdministrativeState', schemas.Unset] = schemas.unset,
                                    operationalState: typing.Union['OperationalState', schemas.Unset] = schemas.unset,
                                    cellLocalId: typing.Union[MetaOapg.properties.cellLocalId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                    cellState: typing.Union['CellState', schemas.Unset] = schemas.unset,
                                    plmnInfoList: typing.Union['PlmnInfoList', schemas.Unset] = schemas.unset,
                                    npnIdentityList: typing.Union['NpnIdentityList', schemas.Unset] = schemas.unset,
                                    nrPci: typing.Union['NrPci', schemas.Unset] = schemas.unset,
                                    nrTac: typing.Union['NrTac', schemas.Unset] = schemas.unset,
                                    arfcnDL: typing.Union[MetaOapg.properties.arfcnDL, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                    arfcnUL: typing.Union[MetaOapg.properties.arfcnUL, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                    arfcnSUL: typing.Union[MetaOapg.properties.arfcnSUL, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                    bSChannelBwDL: typing.Union[MetaOapg.properties.bSChannelBwDL, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                    bSChannelBwUL: typing.Union[MetaOapg.properties.bSChannelBwUL, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                    bSChannelBwSUL: typing.Union[MetaOapg.properties.bSChannelBwSUL, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                    ssbFrequency: typing.Union[MetaOapg.properties.ssbFrequency, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                    ssbPeriodicity: typing.Union['SsbPeriodicity', schemas.Unset] = schemas.unset,
                                    ssbSubCarrierSpacing: typing.Union['SsbSubCarrierSpacing', schemas.Unset] = schemas.unset,
                                    ssbOffset: typing.Union[MetaOapg.properties.ssbOffset, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                    ssbDuration: typing.Union['SsbDuration', schemas.Unset] = schemas.unset,
                                    nrSectorCarrierRef: typing.Union[MetaOapg.properties.nrSectorCarrierRef, list, tuple, schemas.Unset] = schemas.unset,
                                    bwpRef: typing.Union[MetaOapg.properties.bwpRef, list, tuple, schemas.Unset] = schemas.unset,
                                    rimRSMonitoringStartTime: typing.Union[MetaOapg.properties.rimRSMonitoringStartTime, str, schemas.Unset] = schemas.unset,
                                    rimRSMonitoringStopTime: typing.Union[MetaOapg.properties.rimRSMonitoringStopTime, str, schemas.Unset] = schemas.unset,
                                    rimRSMonitoringWindowDuration: typing.Union[MetaOapg.properties.rimRSMonitoringWindowDuration, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                    rimRSMonitoringWindowStartingOffset: typing.Union[MetaOapg.properties.rimRSMonitoringWindowStartingOffset, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                    rimRSMonitoringWindowPeriodicity: typing.Union[MetaOapg.properties.rimRSMonitoringWindowPeriodicity, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                    rimRSMonitoringOccasionInterval: typing.Union[MetaOapg.properties.rimRSMonitoringOccasionInterval, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                    rimRSMonitoringOccasionStartingOffset: typing.Union[MetaOapg.properties.rimRSMonitoringOccasionStartingOffset, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                                    nRFrequencyRef: typing.Union[MetaOapg.properties.nRFrequencyRef, str, schemas.Unset] = schemas.unset,
                                    victimSetRef: typing.Union[MetaOapg.properties.victimSetRef, str, schemas.Unset] = schemas.unset,
                                    aggressorSetRef: typing.Union[MetaOapg.properties.aggressorSetRef, str, schemas.Unset] = schemas.unset,
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'all_of_1':
                                    return super().__new__(
                                        cls,
                                        *_args,
                                        administrativeState=administrativeState,
                                        operationalState=operationalState,
                                        cellLocalId=cellLocalId,
                                        cellState=cellState,
                                        plmnInfoList=plmnInfoList,
                                        npnIdentityList=npnIdentityList,
                                        nrPci=nrPci,
                                        nrTac=nrTac,
                                        arfcnDL=arfcnDL,
                                        arfcnUL=arfcnUL,
                                        arfcnSUL=arfcnSUL,
                                        bSChannelBwDL=bSChannelBwDL,
                                        bSChannelBwUL=bSChannelBwUL,
                                        bSChannelBwSUL=bSChannelBwSUL,
                                        ssbFrequency=ssbFrequency,
                                        ssbPeriodicity=ssbPeriodicity,
                                        ssbSubCarrierSpacing=ssbSubCarrierSpacing,
                                        ssbOffset=ssbOffset,
                                        ssbDuration=ssbDuration,
                                        nrSectorCarrierRef=nrSectorCarrierRef,
                                        bwpRef=bwpRef,
                                        rimRSMonitoringStartTime=rimRSMonitoringStartTime,
                                        rimRSMonitoringStopTime=rimRSMonitoringStopTime,
                                        rimRSMonitoringWindowDuration=rimRSMonitoringWindowDuration,
                                        rimRSMonitoringWindowStartingOffset=rimRSMonitoringWindowStartingOffset,
                                        rimRSMonitoringWindowPeriodicity=rimRSMonitoringWindowPeriodicity,
                                        rimRSMonitoringOccasionInterval=rimRSMonitoringOccasionInterval,
                                        rimRSMonitoringOccasionStartingOffset=rimRSMonitoringOccasionStartingOffset,
                                        nRFrequencyRef=nRFrequencyRef,
                                        victimSetRef=victimSetRef,
                                        aggressorSetRef=aggressorSetRef,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    ManagedFunctionAttr,
                                    cls.all_of_1,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'attributes':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    __annotations__ = {
                        "attributes": attributes,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> MetaOapg.properties.attributes: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["attributes", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> typing.Union[MetaOapg.properties.attributes, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["attributes", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                attributes: typing.Union[MetaOapg.properties.attributes, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *_args,
                    attributes=attributes,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        
        class all_of_3(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                
                    @staticmethod
                    def RRMPolicyRatio() -> typing.Type['RRMPolicyRatioMultiple']:
                        return RRMPolicyRatioMultiple
                
                    @staticmethod
                    def CPCIConfigurationFunction() -> typing.Type['CPCIConfigurationFunctionSingle']:
                        return CPCIConfigurationFunctionSingle
                
                    @staticmethod
                    def DRACHOptimizationFunction() -> typing.Type['DRACHOptimizationFunctionSingle']:
                        return DRACHOptimizationFunctionSingle
                
                    @staticmethod
                    def NrOperatorCellDu() -> typing.Type['NrOperatorCellDuMultiple']:
                        return NrOperatorCellDuMultiple
                    __annotations__ = {
                        "RRMPolicyRatio": RRMPolicyRatio,
                        "CPCIConfigurationFunction": CPCIConfigurationFunction,
                        "DRACHOptimizationFunction": DRACHOptimizationFunction,
                        "NrOperatorCellDu": NrOperatorCellDu,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["RRMPolicyRatio"]) -> 'RRMPolicyRatioMultiple': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["CPCIConfigurationFunction"]) -> 'CPCIConfigurationFunctionSingle': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["DRACHOptimizationFunction"]) -> 'DRACHOptimizationFunctionSingle': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["NrOperatorCellDu"]) -> 'NrOperatorCellDuMultiple': ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["RRMPolicyRatio", "CPCIConfigurationFunction", "DRACHOptimizationFunction", "NrOperatorCellDu", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["RRMPolicyRatio"]) -> typing.Union['RRMPolicyRatioMultiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["CPCIConfigurationFunction"]) -> typing.Union['CPCIConfigurationFunctionSingle', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["DRACHOptimizationFunction"]) -> typing.Union['DRACHOptimizationFunctionSingle', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["NrOperatorCellDu"]) -> typing.Union['NrOperatorCellDuMultiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["RRMPolicyRatio", "CPCIConfigurationFunction", "DRACHOptimizationFunction", "NrOperatorCellDu", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                RRMPolicyRatio: typing.Union['RRMPolicyRatioMultiple', schemas.Unset] = schemas.unset,
                CPCIConfigurationFunction: typing.Union['CPCIConfigurationFunctionSingle', schemas.Unset] = schemas.unset,
                DRACHOptimizationFunction: typing.Union['DRACHOptimizationFunctionSingle', schemas.Unset] = schemas.unset,
                NrOperatorCellDu: typing.Union['NrOperatorCellDuMultiple', schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_3':
                return super().__new__(
                    cls,
                    *_args,
                    RRMPolicyRatio=RRMPolicyRatio,
                    CPCIConfigurationFunction=CPCIConfigurationFunction,
                    DRACHOptimizationFunction=DRACHOptimizationFunction,
                    NrOperatorCellDu=NrOperatorCellDu,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                Top,
                cls.all_of_1,
                ManagedFunctionNcO,
                cls.all_of_3,
            ]


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NrCellDuSingle':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.administrative_state import AdministrativeState
from openapi_client.model.cell_state import CellState
from openapi_client.model.cpci_configuration_function_single import CPCIConfigurationFunctionSingle
from openapi_client.model.drach_optimization_function_single import DRACHOptimizationFunctionSingle
from openapi_client.model.managed_function_attr import ManagedFunctionAttr
from openapi_client.model.managed_function_nc_o import ManagedFunctionNcO
from openapi_client.model.npn_identity_list import NpnIdentityList
from openapi_client.model.nr_operator_cell_du_multiple import NrOperatorCellDuMultiple
from openapi_client.model.nr_pci import NrPci
from openapi_client.model.nr_tac import NrTac
from openapi_client.model.operational_state import OperationalState
from openapi_client.model.plmn_info_list import PlmnInfoList
from openapi_client.model.rrm_policy_ratio_multiple import RRMPolicyRatioMultiple
from openapi_client.model.ssb_duration import SsbDuration
from openapi_client.model.ssb_periodicity import SsbPeriodicity
from openapi_client.model.ssb_sub_carrier_spacing import SsbSubCarrierSpacing
from openapi_client.model.top import Top
