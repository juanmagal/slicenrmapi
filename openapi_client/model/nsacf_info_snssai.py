# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class NsacfInfoSnssai(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def SnssaiInfo() -> typing.Type['SnssaiInfo']:
                return SnssaiInfo
            isSubjectToNsac = schemas.BoolSchema
            maxNumberofUEs = schemas.IntSchema
            
            
            class eACMode(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "INACTIVE": "INACTIVE",
                        "ACTIVE": "ACTIVE",
                    }
                
                @schemas.classproperty
                def INACTIVE(cls):
                    return cls("INACTIVE")
                
                @schemas.classproperty
                def ACTIVE(cls):
                    return cls("ACTIVE")
            activeEacThreshhold = schemas.IntSchema
            deactiveEacThreshhold = schemas.IntSchema
            numberofUEs = schemas.IntSchema
            
            
            class uEIdList(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'uEIdList':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            maxNumberofPDUSessions = schemas.IntSchema
            __annotations__ = {
                "SnssaiInfo": SnssaiInfo,
                "isSubjectToNsac": isSubjectToNsac,
                "maxNumberofUEs": maxNumberofUEs,
                "eACMode": eACMode,
                "activeEacThreshhold": activeEacThreshhold,
                "deactiveEacThreshhold": deactiveEacThreshhold,
                "numberofUEs": numberofUEs,
                "uEIdList": uEIdList,
                "maxNumberofPDUSessions": maxNumberofPDUSessions,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["SnssaiInfo"]) -> 'SnssaiInfo': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isSubjectToNsac"]) -> MetaOapg.properties.isSubjectToNsac: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxNumberofUEs"]) -> MetaOapg.properties.maxNumberofUEs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eACMode"]) -> MetaOapg.properties.eACMode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["activeEacThreshhold"]) -> MetaOapg.properties.activeEacThreshhold: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deactiveEacThreshhold"]) -> MetaOapg.properties.deactiveEacThreshhold: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numberofUEs"]) -> MetaOapg.properties.numberofUEs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["uEIdList"]) -> MetaOapg.properties.uEIdList: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["maxNumberofPDUSessions"]) -> MetaOapg.properties.maxNumberofPDUSessions: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["SnssaiInfo", "isSubjectToNsac", "maxNumberofUEs", "eACMode", "activeEacThreshhold", "deactiveEacThreshhold", "numberofUEs", "uEIdList", "maxNumberofPDUSessions", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["SnssaiInfo"]) -> typing.Union['SnssaiInfo', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isSubjectToNsac"]) -> typing.Union[MetaOapg.properties.isSubjectToNsac, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxNumberofUEs"]) -> typing.Union[MetaOapg.properties.maxNumberofUEs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eACMode"]) -> typing.Union[MetaOapg.properties.eACMode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["activeEacThreshhold"]) -> typing.Union[MetaOapg.properties.activeEacThreshhold, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deactiveEacThreshhold"]) -> typing.Union[MetaOapg.properties.deactiveEacThreshhold, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numberofUEs"]) -> typing.Union[MetaOapg.properties.numberofUEs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["uEIdList"]) -> typing.Union[MetaOapg.properties.uEIdList, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["maxNumberofPDUSessions"]) -> typing.Union[MetaOapg.properties.maxNumberofPDUSessions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["SnssaiInfo", "isSubjectToNsac", "maxNumberofUEs", "eACMode", "activeEacThreshhold", "deactiveEacThreshhold", "numberofUEs", "uEIdList", "maxNumberofPDUSessions", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        SnssaiInfo: typing.Union['SnssaiInfo', schemas.Unset] = schemas.unset,
        isSubjectToNsac: typing.Union[MetaOapg.properties.isSubjectToNsac, bool, schemas.Unset] = schemas.unset,
        maxNumberofUEs: typing.Union[MetaOapg.properties.maxNumberofUEs, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        eACMode: typing.Union[MetaOapg.properties.eACMode, str, schemas.Unset] = schemas.unset,
        activeEacThreshhold: typing.Union[MetaOapg.properties.activeEacThreshhold, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        deactiveEacThreshhold: typing.Union[MetaOapg.properties.deactiveEacThreshhold, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        numberofUEs: typing.Union[MetaOapg.properties.numberofUEs, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        uEIdList: typing.Union[MetaOapg.properties.uEIdList, list, tuple, schemas.Unset] = schemas.unset,
        maxNumberofPDUSessions: typing.Union[MetaOapg.properties.maxNumberofPDUSessions, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NsacfInfoSnssai':
        return super().__new__(
            cls,
            *_args,
            SnssaiInfo=SnssaiInfo,
            isSubjectToNsac=isSubjectToNsac,
            maxNumberofUEs=maxNumberofUEs,
            eACMode=eACMode,
            activeEacThreshhold=activeEacThreshhold,
            deactiveEacThreshhold=deactiveEacThreshhold,
            numberofUEs=numberofUEs,
            uEIdList=uEIdList,
            maxNumberofPDUSessions=maxNumberofPDUSessions,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.snssai_info import SnssaiInfo
