# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class SupportedPerfMetricGroup(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            
            
            class performanceMetrics(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    items = schemas.StrSchema
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'performanceMetrics':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class granularityPeriods(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.IntSchema
                    ):
                    
                    
                        class MetaOapg:
                            inclusive_minimum = 1
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'granularityPeriods':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class reportingMethods(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "FILE_BASED_LOC_SET_BY_PRODUCER": "FILE_BASED_LOC_SET_BY_PRODUCER",
                                "FILE_BASED_LOC_SET_BY_CONSUMER": "FILE_BASED_LOC_SET_BY_CONSUMER",
                                "STREAM_BASED": "STREAM_BASED",
                            }
                        
                        @schemas.classproperty
                        def FILE_BASED_LOC_SET_BY_PRODUCER(cls):
                            return cls("FILE_BASED_LOC_SET_BY_PRODUCER")
                        
                        @schemas.classproperty
                        def FILE_BASED_LOC_SET_BY_CONSUMER(cls):
                            return cls("FILE_BASED_LOC_SET_BY_CONSUMER")
                        
                        @schemas.classproperty
                        def STREAM_BASED(cls):
                            return cls("STREAM_BASED")
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reportingMethods':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            
            
            class reportingPeriods(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    
                    class items(
                        schemas.IntSchema
                    ):
                    
                    
                        class MetaOapg:
                            inclusive_minimum = 1
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, decimal.Decimal, int, ]], typing.List[typing.Union[MetaOapg.items, decimal.Decimal, int, ]]],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'reportingPeriods':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> MetaOapg.items:
                    return super().__getitem__(i)
            __annotations__ = {
                "performanceMetrics": performanceMetrics,
                "granularityPeriods": granularityPeriods,
                "reportingMethods": reportingMethods,
                "reportingPeriods": reportingPeriods,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["performanceMetrics"]) -> MetaOapg.properties.performanceMetrics: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["granularityPeriods"]) -> MetaOapg.properties.granularityPeriods: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reportingMethods"]) -> MetaOapg.properties.reportingMethods: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reportingPeriods"]) -> MetaOapg.properties.reportingPeriods: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["performanceMetrics", "granularityPeriods", "reportingMethods", "reportingPeriods", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["performanceMetrics"]) -> typing.Union[MetaOapg.properties.performanceMetrics, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["granularityPeriods"]) -> typing.Union[MetaOapg.properties.granularityPeriods, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reportingMethods"]) -> typing.Union[MetaOapg.properties.reportingMethods, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reportingPeriods"]) -> typing.Union[MetaOapg.properties.reportingPeriods, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["performanceMetrics", "granularityPeriods", "reportingMethods", "reportingPeriods", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        performanceMetrics: typing.Union[MetaOapg.properties.performanceMetrics, list, tuple, schemas.Unset] = schemas.unset,
        granularityPeriods: typing.Union[MetaOapg.properties.granularityPeriods, list, tuple, schemas.Unset] = schemas.unset,
        reportingMethods: typing.Union[MetaOapg.properties.reportingMethods, list, tuple, schemas.Unset] = schemas.unset,
        reportingPeriods: typing.Union[MetaOapg.properties.reportingPeriods, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SupportedPerfMetricGroup':
        return super().__new__(
            cls,
            *_args,
            performanceMetrics=performanceMetrics,
            granularityPeriods=granularityPeriods,
            reportingMethods=reportingMethods,
            reportingPeriods=reportingPeriods,
            _configuration=_configuration,
            **kwargs,
        )
