# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ThresholdInfo1(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "observedMeasurement",
            "observedValue",
        }
        
        class properties:
            observedMeasurement = schemas.StrSchema
            observedValue = schemas.NumberSchema
        
            @staticmethod
            def thresholdLevel() -> typing.Type['ThresholdLevelInd']:
                return ThresholdLevelInd
            armTime = schemas.DateTimeSchema
            __annotations__ = {
                "observedMeasurement": observedMeasurement,
                "observedValue": observedValue,
                "thresholdLevel": thresholdLevel,
                "armTime": armTime,
            }
    
    observedMeasurement: MetaOapg.properties.observedMeasurement
    observedValue: MetaOapg.properties.observedValue
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["observedMeasurement"]) -> MetaOapg.properties.observedMeasurement: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["observedValue"]) -> MetaOapg.properties.observedValue: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["thresholdLevel"]) -> 'ThresholdLevelInd': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["armTime"]) -> MetaOapg.properties.armTime: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["observedMeasurement", "observedValue", "thresholdLevel", "armTime", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["observedMeasurement"]) -> MetaOapg.properties.observedMeasurement: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["observedValue"]) -> MetaOapg.properties.observedValue: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["thresholdLevel"]) -> typing.Union['ThresholdLevelInd', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["armTime"]) -> typing.Union[MetaOapg.properties.armTime, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["observedMeasurement", "observedValue", "thresholdLevel", "armTime", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        observedMeasurement: typing.Union[MetaOapg.properties.observedMeasurement, str, ],
        observedValue: typing.Union[MetaOapg.properties.observedValue, decimal.Decimal, int, float, ],
        thresholdLevel: typing.Union['ThresholdLevelInd', schemas.Unset] = schemas.unset,
        armTime: typing.Union[MetaOapg.properties.armTime, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ThresholdInfo1':
        return super().__new__(
            cls,
            *_args,
            observedMeasurement=observedMeasurement,
            observedValue=observedValue,
            thresholdLevel=thresholdLevel,
            armTime=armTime,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.threshold_level_ind import ThresholdLevelInd
