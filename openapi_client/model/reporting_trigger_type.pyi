# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Ã‚Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ReportingTriggerType(
    schemas.ListSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    See details in 3GPP TS 32.422 clause 5.10.4.
    """


    class MetaOapg:
        
        
        class items(
            schemas.EnumBase,
            schemas.StrSchema
        ):
            
            @schemas.classproperty
            def PERIODICAL(cls):
                return cls("PERIODICAL")
            
            @schemas.classproperty
            def A2_FOR_LTE_NR(cls):
                return cls("A2_FOR_LTE_NR")
            
            @schemas.classproperty
            def F_FOR_UMTS(cls):
                return cls("1F_FOR_UMTS")
            
            @schemas.classproperty
            def I_FOR_UMTS_MCPS_TDD(cls):
                return cls("1I_FOR_UMTS_MCPS_TDD")
            
            @schemas.classproperty
            def A2_TRIGGERED_PERIODIC_FOR_LTE_NR(cls):
                return cls("A2_TRIGGERED_PERIODIC_FOR_LTE_NR")
            
            @schemas.classproperty
            def ALL_CONFIGURED_RRM_FOR_LTE_NR(cls):
                return cls("ALL_CONFIGURED_RRM_FOR_LTE_NR")
            
            @schemas.classproperty
            def ALL_CONFIGURED_RRM_FOR_UMTS(cls):
                return cls("ALL_CONFIGURED_RRM_FOR_UMTS")

    def __new__(
        cls,
        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
        _configuration: typing.Optional[schemas.Configuration] = None,
    ) -> 'ReportingTriggerType':
        return super().__new__(
            cls,
            _arg,
            _configuration=_configuration,
        )

    def __getitem__(self, i: int) -> MetaOapg.items:
        return super().__getitem__(i)
