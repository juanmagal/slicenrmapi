# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class GnbCuUpFunctionSingle(
    schemas.ComposedSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    
                    
                    class attributes(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class all_of_1(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    class properties:
                                        gnbId = schemas.StrSchema
                                    
                                        @staticmethod
                                        def gnbIdLength() -> typing.Type['GnbIdLength']:
                                            return GnbIdLength
                                    
                                        @staticmethod
                                        def gnbCuUpId() -> typing.Type['GnbCuUpId']:
                                            return GnbCuUpId
                                    
                                        @staticmethod
                                        def plmnInfoList() -> typing.Type['PlmnInfoList']:
                                            return PlmnInfoList
                                        configurable5QISetRef = schemas.StrSchema
                                        dynamic5QISetRef = schemas.StrSchema
                                        __annotations__ = {
                                            "gnbId": gnbId,
                                            "gnbIdLength": gnbIdLength,
                                            "gnbCuUpId": gnbCuUpId,
                                            "plmnInfoList": plmnInfoList,
                                            "configurable5QISetRef": configurable5QISetRef,
                                            "dynamic5QISetRef": dynamic5QISetRef,
                                        }
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["gnbId"]) -> MetaOapg.properties.gnbId: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["gnbIdLength"]) -> 'GnbIdLength': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["gnbCuUpId"]) -> 'GnbCuUpId': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["plmnInfoList"]) -> 'PlmnInfoList': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["configurable5QISetRef"]) -> MetaOapg.properties.configurable5QISetRef: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["dynamic5QISetRef"]) -> MetaOapg.properties.dynamic5QISetRef: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["gnbId", "gnbIdLength", "gnbCuUpId", "plmnInfoList", "configurable5QISetRef", "dynamic5QISetRef", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["gnbId"]) -> typing.Union[MetaOapg.properties.gnbId, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["gnbIdLength"]) -> typing.Union['GnbIdLength', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["gnbCuUpId"]) -> typing.Union['GnbCuUpId', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["plmnInfoList"]) -> typing.Union['PlmnInfoList', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["configurable5QISetRef"]) -> typing.Union[MetaOapg.properties.configurable5QISetRef, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["dynamic5QISetRef"]) -> typing.Union[MetaOapg.properties.dynamic5QISetRef, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["gnbId", "gnbIdLength", "gnbCuUpId", "plmnInfoList", "configurable5QISetRef", "dynamic5QISetRef", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *_args: typing.Union[dict, frozendict.frozendict, ],
                                    gnbId: typing.Union[MetaOapg.properties.gnbId, str, schemas.Unset] = schemas.unset,
                                    gnbIdLength: typing.Union['GnbIdLength', schemas.Unset] = schemas.unset,
                                    gnbCuUpId: typing.Union['GnbCuUpId', schemas.Unset] = schemas.unset,
                                    plmnInfoList: typing.Union['PlmnInfoList', schemas.Unset] = schemas.unset,
                                    configurable5QISetRef: typing.Union[MetaOapg.properties.configurable5QISetRef, str, schemas.Unset] = schemas.unset,
                                    dynamic5QISetRef: typing.Union[MetaOapg.properties.dynamic5QISetRef, str, schemas.Unset] = schemas.unset,
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'all_of_1':
                                    return super().__new__(
                                        cls,
                                        *_args,
                                        gnbId=gnbId,
                                        gnbIdLength=gnbIdLength,
                                        gnbCuUpId=gnbCuUpId,
                                        plmnInfoList=plmnInfoList,
                                        configurable5QISetRef=configurable5QISetRef,
                                        dynamic5QISetRef=dynamic5QISetRef,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    ManagedFunctionAttr,
                                    cls.all_of_1,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'attributes':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    __annotations__ = {
                        "attributes": attributes,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> MetaOapg.properties.attributes: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["attributes", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> typing.Union[MetaOapg.properties.attributes, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["attributes", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                attributes: typing.Union[MetaOapg.properties.attributes, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *_args,
                    attributes=attributes,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        
        class all_of_3(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                
                    @staticmethod
                    def RRMPolicyRatio() -> typing.Type['RRMPolicyRatioMultiple']:
                        return RRMPolicyRatioMultiple
                
                    @staticmethod
                    def EP_E1() -> typing.Type['EPE1Single']:
                        return EPE1Single
                
                    @staticmethod
                    def EP_XnU() -> typing.Type['EPXnUMultiple']:
                        return EPXnUMultiple
                
                    @staticmethod
                    def EP_F1U() -> typing.Type['EPF1UMultiple']:
                        return EPF1UMultiple
                
                    @staticmethod
                    def EP_NgU() -> typing.Type['EPNgUMultiple']:
                        return EPNgUMultiple
                
                    @staticmethod
                    def EP_X2U() -> typing.Type['EPX2UMultiple']:
                        return EPX2UMultiple
                
                    @staticmethod
                    def EP_S1U() -> typing.Type['EPS1UMultiple']:
                        return EPS1UMultiple
                    __annotations__ = {
                        "RRMPolicyRatio": RRMPolicyRatio,
                        "EP_E1": EP_E1,
                        "EP_XnU": EP_XnU,
                        "EP_F1U": EP_F1U,
                        "EP_NgU": EP_NgU,
                        "EP_X2U": EP_X2U,
                        "EP_S1U": EP_S1U,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["RRMPolicyRatio"]) -> 'RRMPolicyRatioMultiple': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["EP_E1"]) -> 'EPE1Single': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["EP_XnU"]) -> 'EPXnUMultiple': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["EP_F1U"]) -> 'EPF1UMultiple': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["EP_NgU"]) -> 'EPNgUMultiple': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["EP_X2U"]) -> 'EPX2UMultiple': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["EP_S1U"]) -> 'EPS1UMultiple': ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["RRMPolicyRatio", "EP_E1", "EP_XnU", "EP_F1U", "EP_NgU", "EP_X2U", "EP_S1U", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["RRMPolicyRatio"]) -> typing.Union['RRMPolicyRatioMultiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["EP_E1"]) -> typing.Union['EPE1Single', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["EP_XnU"]) -> typing.Union['EPXnUMultiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["EP_F1U"]) -> typing.Union['EPF1UMultiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["EP_NgU"]) -> typing.Union['EPNgUMultiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["EP_X2U"]) -> typing.Union['EPX2UMultiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["EP_S1U"]) -> typing.Union['EPS1UMultiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["RRMPolicyRatio", "EP_E1", "EP_XnU", "EP_F1U", "EP_NgU", "EP_X2U", "EP_S1U", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                RRMPolicyRatio: typing.Union['RRMPolicyRatioMultiple', schemas.Unset] = schemas.unset,
                EP_E1: typing.Union['EPE1Single', schemas.Unset] = schemas.unset,
                EP_XnU: typing.Union['EPXnUMultiple', schemas.Unset] = schemas.unset,
                EP_F1U: typing.Union['EPF1UMultiple', schemas.Unset] = schemas.unset,
                EP_NgU: typing.Union['EPNgUMultiple', schemas.Unset] = schemas.unset,
                EP_X2U: typing.Union['EPX2UMultiple', schemas.Unset] = schemas.unset,
                EP_S1U: typing.Union['EPS1UMultiple', schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_3':
                return super().__new__(
                    cls,
                    *_args,
                    RRMPolicyRatio=RRMPolicyRatio,
                    EP_E1=EP_E1,
                    EP_XnU=EP_XnU,
                    EP_F1U=EP_F1U,
                    EP_NgU=EP_NgU,
                    EP_X2U=EP_X2U,
                    EP_S1U=EP_S1U,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                Top,
                cls.all_of_1,
                ManagedFunctionNcO,
                cls.all_of_3,
            ]


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GnbCuUpFunctionSingle':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.epe1_single import EPE1Single
from openapi_client.model.epf1_u_multiple import EPF1UMultiple
from openapi_client.model.epng_u_multiple import EPNgUMultiple
from openapi_client.model.eps1_u_multiple import EPS1UMultiple
from openapi_client.model.epx2_u_multiple import EPX2UMultiple
from openapi_client.model.epxn_u_multiple import EPXnUMultiple
from openapi_client.model.gnb_cu_up_id import GnbCuUpId
from openapi_client.model.gnb_id_length import GnbIdLength
from openapi_client.model.managed_function_attr import ManagedFunctionAttr
from openapi_client.model.managed_function_nc_o import ManagedFunctionNcO
from openapi_client.model.plmn_info_list import PlmnInfoList
from openapi_client.model.rrm_policy_ratio_multiple import RRMPolicyRatioMultiple
from openapi_client.model.top import Top
