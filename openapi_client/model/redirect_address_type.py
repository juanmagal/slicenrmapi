# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class RedirectAddressType(
    schemas.ComposedSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Possible values are
- IPV4_ADDR: Indicates that the address type is in the form of "dotted-decimal" IPv4 address.
- IPV6_ADDR: Indicates that the address type is in the form of IPv6 address.
- URL: Indicates that the address type is in the form of Uniform Resource Locator.
- SIP_URI: Indicates that the address type is in the form of SIP Uniform Resource Identifier.

    """


    class MetaOapg:
        
        
        class any_of_0(
            schemas.EnumBase,
            schemas.StrSchema
        ):
        
        
            class MetaOapg:
                enum_value_to_name = {
                    "IPV4_ADDR": "IPV4_ADDR",
                    "IPV6_ADDR": "IPV6_ADDR",
                    "URL": "URL",
                    "SIP_URI": "SIP_URI",
                }
            
            @schemas.classproperty
            def IPV4_ADDR(cls):
                return cls("IPV4_ADDR")
            
            @schemas.classproperty
            def IPV6_ADDR(cls):
                return cls("IPV6_ADDR")
            
            @schemas.classproperty
            def URL(cls):
                return cls("URL")
            
            @schemas.classproperty
            def SIP_URI(cls):
                return cls("SIP_URI")
        any_of_1 = schemas.StrSchema
        
        @classmethod
        @functools.lru_cache()
        def any_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.any_of_0,
                cls.any_of_1,
            ]


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RedirectAddressType':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )
