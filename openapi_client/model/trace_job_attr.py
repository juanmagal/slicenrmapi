# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class TraceJobAttr(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    abstract class used as a container of all TraceJob attributes
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def jobType() -> typing.Type['JobTypeType']:
                return JobTypeType
        
            @staticmethod
            def listOfInterfaces() -> typing.Type['ListOfInterfacesType']:
                return ListOfInterfacesType
        
            @staticmethod
            def listOfNETypes() -> typing.Type['ListOfNETypesType']:
                return ListOfNETypesType
        
            @staticmethod
            def pLMNTarget() -> typing.Type['PLMNTargetType']:
                return PLMNTargetType
            traceReportingConsumerUri = schemas.StrSchema
        
            @staticmethod
            def traceCollectionEntityIPAddress() -> typing.Type['IpAddr']:
                return IpAddr
        
            @staticmethod
            def traceDepth() -> typing.Type['TraceDepthType']:
                return TraceDepthType
        
            @staticmethod
            def traceReference() -> typing.Type['TraceReferenceType']:
                return TraceReferenceType
            traceRecordingSessionReference = schemas.StrSchema
            jobId = schemas.StrSchema
        
            @staticmethod
            def traceReportingFormat() -> typing.Type['TraceReportingFormatType']:
                return TraceReportingFormatType
        
            @staticmethod
            def traceTarget() -> typing.Type['TraceTargetType']:
                return TraceTargetType
        
            @staticmethod
            def triggeringEvents() -> typing.Type['TriggeringEventsType']:
                return TriggeringEventsType
        
            @staticmethod
            def anonymizationOfMDTData() -> typing.Type['AnonymizationOfMDTDataType']:
                return AnonymizationOfMDTDataType
        
            @staticmethod
            def areaConfigurationForNeighCell() -> typing.Type['AreaConfig']:
                return AreaConfig
            
            
            class areaScope(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AreaScope']:
                        return AreaScope
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['AreaScope'], typing.List['AreaScope']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'areaScope':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AreaScope':
                    return super().__getitem__(i)
            beamLevelMeasurement = schemas.BoolSchema
        
            @staticmethod
            def collectionPeriodRRMLTE() -> typing.Type['CollectionPeriodRRMLTEType']:
                return CollectionPeriodRRMLTEType
        
            @staticmethod
            def collectionPeriodM6LTE() -> typing.Type['CollectionPeriodM6LTEType']:
                return CollectionPeriodM6LTEType
        
            @staticmethod
            def collectionPeriodM7LTE() -> typing.Type['CollectionPeriodM7LTEType']:
                return CollectionPeriodM7LTEType
        
            @staticmethod
            def collectionPeriodRRMUMTS() -> typing.Type['CollectionPeriodRRMUMTSType']:
                return CollectionPeriodRRMUMTSType
        
            @staticmethod
            def collectionPeriodRRMNR() -> typing.Type['CollectionPeriodRRMNRType']:
                return CollectionPeriodRRMNRType
        
            @staticmethod
            def collectionPeriodM6NR() -> typing.Type['CollectionPeriodM6NRType']:
                return CollectionPeriodM6NRType
        
            @staticmethod
            def collectionPeriodM7NR() -> typing.Type['CollectionPeriodM7NRType']:
                return CollectionPeriodM7NRType
        
            @staticmethod
            def eventListForEventTriggeredMeasurement() -> typing.Type['EventListForEventTriggeredMeasurementType']:
                return EventListForEventTriggeredMeasurementType
        
            @staticmethod
            def eventThreshold() -> typing.Type['EventThresholdType']:
                return EventThresholdType
        
            @staticmethod
            def listOfMeasurements() -> typing.Type['ListOfMeasurementsType']:
                return ListOfMeasurementsType
        
            @staticmethod
            def loggingDuration() -> typing.Type['LoggingDurationType']:
                return LoggingDurationType
        
            @staticmethod
            def loggingInterval() -> typing.Type['LoggingIntervalType']:
                return LoggingIntervalType
        
            @staticmethod
            def eventThresholdL1() -> typing.Type['EventThresholdL1Type']:
                return EventThresholdL1Type
        
            @staticmethod
            def hysteresisL1() -> typing.Type['HysteresisL1Type']:
                return HysteresisL1Type
        
            @staticmethod
            def timeToTriggerL1() -> typing.Type['TimeToTriggerL1Type']:
                return TimeToTriggerL1Type
            
            
            class mBSFNAreaList(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['MbsfnArea']:
                        return MbsfnArea
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['MbsfnArea'], typing.List['MbsfnArea']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'mBSFNAreaList':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'MbsfnArea':
                    return super().__getitem__(i)
        
            @staticmethod
            def measurementPeriodLTE() -> typing.Type['MeasurementPeriodLTEType']:
                return MeasurementPeriodLTEType
        
            @staticmethod
            def measurementPeriodUMTS() -> typing.Type['MeasurementPeriodUMTSType']:
                return MeasurementPeriodUMTSType
        
            @staticmethod
            def measurementQuantity() -> typing.Type['MeasurementQuantityType']:
                return MeasurementQuantityType
        
            @staticmethod
            def eventThresholdUphUMTS() -> typing.Type['EventThresholdUphUMTSType']:
                return EventThresholdUphUMTSType
        
            @staticmethod
            def pLMNList() -> typing.Type['PLMNListType']:
                return PLMNListType
        
            @staticmethod
            def positioningMethod() -> typing.Type['PositioningMethodType']:
                return PositioningMethodType
        
            @staticmethod
            def reportAmount() -> typing.Type['ReportAmountType']:
                return ReportAmountType
        
            @staticmethod
            def reportingTrigger() -> typing.Type['ReportingTriggerType']:
                return ReportingTriggerType
        
            @staticmethod
            def reportInterval() -> typing.Type['ReportIntervalType']:
                return ReportIntervalType
        
            @staticmethod
            def reportType() -> typing.Type['ReportTypeType']:
                return ReportTypeType
        
            @staticmethod
            def sensorInformation() -> typing.Type['SensorInformationType']:
                return SensorInformationType
            traceCollectionEntityId = schemas.IntSchema
        
            @staticmethod
            def excessPacketDelayThresholds() -> typing.Type['ExcessPacketDelayThresholdsType']:
                return ExcessPacketDelayThresholdsType
            __annotations__ = {
                "jobType": jobType,
                "listOfInterfaces": listOfInterfaces,
                "listOfNETypes": listOfNETypes,
                "pLMNTarget": pLMNTarget,
                "traceReportingConsumerUri": traceReportingConsumerUri,
                "traceCollectionEntityIPAddress": traceCollectionEntityIPAddress,
                "traceDepth": traceDepth,
                "traceReference": traceReference,
                "traceRecordingSessionReference": traceRecordingSessionReference,
                "jobId": jobId,
                "traceReportingFormat": traceReportingFormat,
                "traceTarget": traceTarget,
                "triggeringEvents": triggeringEvents,
                "anonymizationOfMDTData": anonymizationOfMDTData,
                "areaConfigurationForNeighCell": areaConfigurationForNeighCell,
                "areaScope": areaScope,
                "beamLevelMeasurement": beamLevelMeasurement,
                "collectionPeriodRRMLTE": collectionPeriodRRMLTE,
                "collectionPeriodM6LTE": collectionPeriodM6LTE,
                "collectionPeriodM7LTE": collectionPeriodM7LTE,
                "collectionPeriodRRMUMTS": collectionPeriodRRMUMTS,
                "collectionPeriodRRMNR": collectionPeriodRRMNR,
                "collectionPeriodM6NR": collectionPeriodM6NR,
                "collectionPeriodM7NR": collectionPeriodM7NR,
                "eventListForEventTriggeredMeasurement": eventListForEventTriggeredMeasurement,
                "eventThreshold": eventThreshold,
                "listOfMeasurements": listOfMeasurements,
                "loggingDuration": loggingDuration,
                "loggingInterval": loggingInterval,
                "eventThresholdL1": eventThresholdL1,
                "hysteresisL1": hysteresisL1,
                "timeToTriggerL1": timeToTriggerL1,
                "mBSFNAreaList": mBSFNAreaList,
                "measurementPeriodLTE": measurementPeriodLTE,
                "measurementPeriodUMTS": measurementPeriodUMTS,
                "measurementQuantity": measurementQuantity,
                "eventThresholdUphUMTS": eventThresholdUphUMTS,
                "pLMNList": pLMNList,
                "positioningMethod": positioningMethod,
                "reportAmount": reportAmount,
                "reportingTrigger": reportingTrigger,
                "reportInterval": reportInterval,
                "reportType": reportType,
                "sensorInformation": sensorInformation,
                "traceCollectionEntityId": traceCollectionEntityId,
                "excessPacketDelayThresholds": excessPacketDelayThresholds,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobType"]) -> 'JobTypeType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["listOfInterfaces"]) -> 'ListOfInterfacesType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["listOfNETypes"]) -> 'ListOfNETypesType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pLMNTarget"]) -> 'PLMNTargetType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["traceReportingConsumerUri"]) -> MetaOapg.properties.traceReportingConsumerUri: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["traceCollectionEntityIPAddress"]) -> 'IpAddr': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["traceDepth"]) -> 'TraceDepthType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["traceReference"]) -> 'TraceReferenceType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["traceRecordingSessionReference"]) -> MetaOapg.properties.traceRecordingSessionReference: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["jobId"]) -> MetaOapg.properties.jobId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["traceReportingFormat"]) -> 'TraceReportingFormatType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["traceTarget"]) -> 'TraceTargetType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["triggeringEvents"]) -> 'TriggeringEventsType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["anonymizationOfMDTData"]) -> 'AnonymizationOfMDTDataType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["areaConfigurationForNeighCell"]) -> 'AreaConfig': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["areaScope"]) -> MetaOapg.properties.areaScope: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["beamLevelMeasurement"]) -> MetaOapg.properties.beamLevelMeasurement: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collectionPeriodRRMLTE"]) -> 'CollectionPeriodRRMLTEType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collectionPeriodM6LTE"]) -> 'CollectionPeriodM6LTEType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collectionPeriodM7LTE"]) -> 'CollectionPeriodM7LTEType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collectionPeriodRRMUMTS"]) -> 'CollectionPeriodRRMUMTSType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collectionPeriodRRMNR"]) -> 'CollectionPeriodRRMNRType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collectionPeriodM6NR"]) -> 'CollectionPeriodM6NRType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collectionPeriodM7NR"]) -> 'CollectionPeriodM7NRType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eventListForEventTriggeredMeasurement"]) -> 'EventListForEventTriggeredMeasurementType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eventThreshold"]) -> 'EventThresholdType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["listOfMeasurements"]) -> 'ListOfMeasurementsType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loggingDuration"]) -> 'LoggingDurationType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["loggingInterval"]) -> 'LoggingIntervalType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eventThresholdL1"]) -> 'EventThresholdL1Type': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hysteresisL1"]) -> 'HysteresisL1Type': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeToTriggerL1"]) -> 'TimeToTriggerL1Type': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mBSFNAreaList"]) -> MetaOapg.properties.mBSFNAreaList: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["measurementPeriodLTE"]) -> 'MeasurementPeriodLTEType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["measurementPeriodUMTS"]) -> 'MeasurementPeriodUMTSType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["measurementQuantity"]) -> 'MeasurementQuantityType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eventThresholdUphUMTS"]) -> 'EventThresholdUphUMTSType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pLMNList"]) -> 'PLMNListType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["positioningMethod"]) -> 'PositioningMethodType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reportAmount"]) -> 'ReportAmountType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reportingTrigger"]) -> 'ReportingTriggerType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reportInterval"]) -> 'ReportIntervalType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reportType"]) -> 'ReportTypeType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sensorInformation"]) -> 'SensorInformationType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["traceCollectionEntityId"]) -> MetaOapg.properties.traceCollectionEntityId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["excessPacketDelayThresholds"]) -> 'ExcessPacketDelayThresholdsType': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["jobType", "listOfInterfaces", "listOfNETypes", "pLMNTarget", "traceReportingConsumerUri", "traceCollectionEntityIPAddress", "traceDepth", "traceReference", "traceRecordingSessionReference", "jobId", "traceReportingFormat", "traceTarget", "triggeringEvents", "anonymizationOfMDTData", "areaConfigurationForNeighCell", "areaScope", "beamLevelMeasurement", "collectionPeriodRRMLTE", "collectionPeriodM6LTE", "collectionPeriodM7LTE", "collectionPeriodRRMUMTS", "collectionPeriodRRMNR", "collectionPeriodM6NR", "collectionPeriodM7NR", "eventListForEventTriggeredMeasurement", "eventThreshold", "listOfMeasurements", "loggingDuration", "loggingInterval", "eventThresholdL1", "hysteresisL1", "timeToTriggerL1", "mBSFNAreaList", "measurementPeriodLTE", "measurementPeriodUMTS", "measurementQuantity", "eventThresholdUphUMTS", "pLMNList", "positioningMethod", "reportAmount", "reportingTrigger", "reportInterval", "reportType", "sensorInformation", "traceCollectionEntityId", "excessPacketDelayThresholds", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobType"]) -> typing.Union['JobTypeType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["listOfInterfaces"]) -> typing.Union['ListOfInterfacesType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["listOfNETypes"]) -> typing.Union['ListOfNETypesType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pLMNTarget"]) -> typing.Union['PLMNTargetType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["traceReportingConsumerUri"]) -> typing.Union[MetaOapg.properties.traceReportingConsumerUri, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["traceCollectionEntityIPAddress"]) -> typing.Union['IpAddr', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["traceDepth"]) -> typing.Union['TraceDepthType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["traceReference"]) -> typing.Union['TraceReferenceType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["traceRecordingSessionReference"]) -> typing.Union[MetaOapg.properties.traceRecordingSessionReference, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["jobId"]) -> typing.Union[MetaOapg.properties.jobId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["traceReportingFormat"]) -> typing.Union['TraceReportingFormatType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["traceTarget"]) -> typing.Union['TraceTargetType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["triggeringEvents"]) -> typing.Union['TriggeringEventsType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["anonymizationOfMDTData"]) -> typing.Union['AnonymizationOfMDTDataType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["areaConfigurationForNeighCell"]) -> typing.Union['AreaConfig', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["areaScope"]) -> typing.Union[MetaOapg.properties.areaScope, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["beamLevelMeasurement"]) -> typing.Union[MetaOapg.properties.beamLevelMeasurement, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collectionPeriodRRMLTE"]) -> typing.Union['CollectionPeriodRRMLTEType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collectionPeriodM6LTE"]) -> typing.Union['CollectionPeriodM6LTEType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collectionPeriodM7LTE"]) -> typing.Union['CollectionPeriodM7LTEType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collectionPeriodRRMUMTS"]) -> typing.Union['CollectionPeriodRRMUMTSType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collectionPeriodRRMNR"]) -> typing.Union['CollectionPeriodRRMNRType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collectionPeriodM6NR"]) -> typing.Union['CollectionPeriodM6NRType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collectionPeriodM7NR"]) -> typing.Union['CollectionPeriodM7NRType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eventListForEventTriggeredMeasurement"]) -> typing.Union['EventListForEventTriggeredMeasurementType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eventThreshold"]) -> typing.Union['EventThresholdType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["listOfMeasurements"]) -> typing.Union['ListOfMeasurementsType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loggingDuration"]) -> typing.Union['LoggingDurationType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["loggingInterval"]) -> typing.Union['LoggingIntervalType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eventThresholdL1"]) -> typing.Union['EventThresholdL1Type', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hysteresisL1"]) -> typing.Union['HysteresisL1Type', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeToTriggerL1"]) -> typing.Union['TimeToTriggerL1Type', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mBSFNAreaList"]) -> typing.Union[MetaOapg.properties.mBSFNAreaList, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["measurementPeriodLTE"]) -> typing.Union['MeasurementPeriodLTEType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["measurementPeriodUMTS"]) -> typing.Union['MeasurementPeriodUMTSType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["measurementQuantity"]) -> typing.Union['MeasurementQuantityType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eventThresholdUphUMTS"]) -> typing.Union['EventThresholdUphUMTSType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pLMNList"]) -> typing.Union['PLMNListType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["positioningMethod"]) -> typing.Union['PositioningMethodType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reportAmount"]) -> typing.Union['ReportAmountType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reportingTrigger"]) -> typing.Union['ReportingTriggerType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reportInterval"]) -> typing.Union['ReportIntervalType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reportType"]) -> typing.Union['ReportTypeType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sensorInformation"]) -> typing.Union['SensorInformationType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["traceCollectionEntityId"]) -> typing.Union[MetaOapg.properties.traceCollectionEntityId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["excessPacketDelayThresholds"]) -> typing.Union['ExcessPacketDelayThresholdsType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["jobType", "listOfInterfaces", "listOfNETypes", "pLMNTarget", "traceReportingConsumerUri", "traceCollectionEntityIPAddress", "traceDepth", "traceReference", "traceRecordingSessionReference", "jobId", "traceReportingFormat", "traceTarget", "triggeringEvents", "anonymizationOfMDTData", "areaConfigurationForNeighCell", "areaScope", "beamLevelMeasurement", "collectionPeriodRRMLTE", "collectionPeriodM6LTE", "collectionPeriodM7LTE", "collectionPeriodRRMUMTS", "collectionPeriodRRMNR", "collectionPeriodM6NR", "collectionPeriodM7NR", "eventListForEventTriggeredMeasurement", "eventThreshold", "listOfMeasurements", "loggingDuration", "loggingInterval", "eventThresholdL1", "hysteresisL1", "timeToTriggerL1", "mBSFNAreaList", "measurementPeriodLTE", "measurementPeriodUMTS", "measurementQuantity", "eventThresholdUphUMTS", "pLMNList", "positioningMethod", "reportAmount", "reportingTrigger", "reportInterval", "reportType", "sensorInformation", "traceCollectionEntityId", "excessPacketDelayThresholds", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        jobType: typing.Union['JobTypeType', schemas.Unset] = schemas.unset,
        listOfInterfaces: typing.Union['ListOfInterfacesType', schemas.Unset] = schemas.unset,
        listOfNETypes: typing.Union['ListOfNETypesType', schemas.Unset] = schemas.unset,
        pLMNTarget: typing.Union['PLMNTargetType', schemas.Unset] = schemas.unset,
        traceReportingConsumerUri: typing.Union[MetaOapg.properties.traceReportingConsumerUri, str, schemas.Unset] = schemas.unset,
        traceCollectionEntityIPAddress: typing.Union['IpAddr', schemas.Unset] = schemas.unset,
        traceDepth: typing.Union['TraceDepthType', schemas.Unset] = schemas.unset,
        traceReference: typing.Union['TraceReferenceType', schemas.Unset] = schemas.unset,
        traceRecordingSessionReference: typing.Union[MetaOapg.properties.traceRecordingSessionReference, str, schemas.Unset] = schemas.unset,
        jobId: typing.Union[MetaOapg.properties.jobId, str, schemas.Unset] = schemas.unset,
        traceReportingFormat: typing.Union['TraceReportingFormatType', schemas.Unset] = schemas.unset,
        traceTarget: typing.Union['TraceTargetType', schemas.Unset] = schemas.unset,
        triggeringEvents: typing.Union['TriggeringEventsType', schemas.Unset] = schemas.unset,
        anonymizationOfMDTData: typing.Union['AnonymizationOfMDTDataType', schemas.Unset] = schemas.unset,
        areaConfigurationForNeighCell: typing.Union['AreaConfig', schemas.Unset] = schemas.unset,
        areaScope: typing.Union[MetaOapg.properties.areaScope, list, tuple, schemas.Unset] = schemas.unset,
        beamLevelMeasurement: typing.Union[MetaOapg.properties.beamLevelMeasurement, bool, schemas.Unset] = schemas.unset,
        collectionPeriodRRMLTE: typing.Union['CollectionPeriodRRMLTEType', schemas.Unset] = schemas.unset,
        collectionPeriodM6LTE: typing.Union['CollectionPeriodM6LTEType', schemas.Unset] = schemas.unset,
        collectionPeriodM7LTE: typing.Union['CollectionPeriodM7LTEType', schemas.Unset] = schemas.unset,
        collectionPeriodRRMUMTS: typing.Union['CollectionPeriodRRMUMTSType', schemas.Unset] = schemas.unset,
        collectionPeriodRRMNR: typing.Union['CollectionPeriodRRMNRType', schemas.Unset] = schemas.unset,
        collectionPeriodM6NR: typing.Union['CollectionPeriodM6NRType', schemas.Unset] = schemas.unset,
        collectionPeriodM7NR: typing.Union['CollectionPeriodM7NRType', schemas.Unset] = schemas.unset,
        eventListForEventTriggeredMeasurement: typing.Union['EventListForEventTriggeredMeasurementType', schemas.Unset] = schemas.unset,
        eventThreshold: typing.Union['EventThresholdType', schemas.Unset] = schemas.unset,
        listOfMeasurements: typing.Union['ListOfMeasurementsType', schemas.Unset] = schemas.unset,
        loggingDuration: typing.Union['LoggingDurationType', schemas.Unset] = schemas.unset,
        loggingInterval: typing.Union['LoggingIntervalType', schemas.Unset] = schemas.unset,
        eventThresholdL1: typing.Union['EventThresholdL1Type', schemas.Unset] = schemas.unset,
        hysteresisL1: typing.Union['HysteresisL1Type', schemas.Unset] = schemas.unset,
        timeToTriggerL1: typing.Union['TimeToTriggerL1Type', schemas.Unset] = schemas.unset,
        mBSFNAreaList: typing.Union[MetaOapg.properties.mBSFNAreaList, list, tuple, schemas.Unset] = schemas.unset,
        measurementPeriodLTE: typing.Union['MeasurementPeriodLTEType', schemas.Unset] = schemas.unset,
        measurementPeriodUMTS: typing.Union['MeasurementPeriodUMTSType', schemas.Unset] = schemas.unset,
        measurementQuantity: typing.Union['MeasurementQuantityType', schemas.Unset] = schemas.unset,
        eventThresholdUphUMTS: typing.Union['EventThresholdUphUMTSType', schemas.Unset] = schemas.unset,
        pLMNList: typing.Union['PLMNListType', schemas.Unset] = schemas.unset,
        positioningMethod: typing.Union['PositioningMethodType', schemas.Unset] = schemas.unset,
        reportAmount: typing.Union['ReportAmountType', schemas.Unset] = schemas.unset,
        reportingTrigger: typing.Union['ReportingTriggerType', schemas.Unset] = schemas.unset,
        reportInterval: typing.Union['ReportIntervalType', schemas.Unset] = schemas.unset,
        reportType: typing.Union['ReportTypeType', schemas.Unset] = schemas.unset,
        sensorInformation: typing.Union['SensorInformationType', schemas.Unset] = schemas.unset,
        traceCollectionEntityId: typing.Union[MetaOapg.properties.traceCollectionEntityId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        excessPacketDelayThresholds: typing.Union['ExcessPacketDelayThresholdsType', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TraceJobAttr':
        return super().__new__(
            cls,
            *_args,
            jobType=jobType,
            listOfInterfaces=listOfInterfaces,
            listOfNETypes=listOfNETypes,
            pLMNTarget=pLMNTarget,
            traceReportingConsumerUri=traceReportingConsumerUri,
            traceCollectionEntityIPAddress=traceCollectionEntityIPAddress,
            traceDepth=traceDepth,
            traceReference=traceReference,
            traceRecordingSessionReference=traceRecordingSessionReference,
            jobId=jobId,
            traceReportingFormat=traceReportingFormat,
            traceTarget=traceTarget,
            triggeringEvents=triggeringEvents,
            anonymizationOfMDTData=anonymizationOfMDTData,
            areaConfigurationForNeighCell=areaConfigurationForNeighCell,
            areaScope=areaScope,
            beamLevelMeasurement=beamLevelMeasurement,
            collectionPeriodRRMLTE=collectionPeriodRRMLTE,
            collectionPeriodM6LTE=collectionPeriodM6LTE,
            collectionPeriodM7LTE=collectionPeriodM7LTE,
            collectionPeriodRRMUMTS=collectionPeriodRRMUMTS,
            collectionPeriodRRMNR=collectionPeriodRRMNR,
            collectionPeriodM6NR=collectionPeriodM6NR,
            collectionPeriodM7NR=collectionPeriodM7NR,
            eventListForEventTriggeredMeasurement=eventListForEventTriggeredMeasurement,
            eventThreshold=eventThreshold,
            listOfMeasurements=listOfMeasurements,
            loggingDuration=loggingDuration,
            loggingInterval=loggingInterval,
            eventThresholdL1=eventThresholdL1,
            hysteresisL1=hysteresisL1,
            timeToTriggerL1=timeToTriggerL1,
            mBSFNAreaList=mBSFNAreaList,
            measurementPeriodLTE=measurementPeriodLTE,
            measurementPeriodUMTS=measurementPeriodUMTS,
            measurementQuantity=measurementQuantity,
            eventThresholdUphUMTS=eventThresholdUphUMTS,
            pLMNList=pLMNList,
            positioningMethod=positioningMethod,
            reportAmount=reportAmount,
            reportingTrigger=reportingTrigger,
            reportInterval=reportInterval,
            reportType=reportType,
            sensorInformation=sensorInformation,
            traceCollectionEntityId=traceCollectionEntityId,
            excessPacketDelayThresholds=excessPacketDelayThresholds,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.anonymization_of_mdt_data_type import AnonymizationOfMDTDataType
from openapi_client.model.area_config import AreaConfig
from openapi_client.model.area_scope import AreaScope
from openapi_client.model.collection_period_m6_lte_type import CollectionPeriodM6LTEType
from openapi_client.model.collection_period_m6_nr_type import CollectionPeriodM6NRType
from openapi_client.model.collection_period_m7_lte_type import CollectionPeriodM7LTEType
from openapi_client.model.collection_period_m7_nr_type import CollectionPeriodM7NRType
from openapi_client.model.collection_period_rrmlte_type import CollectionPeriodRRMLTEType
from openapi_client.model.collection_period_rrmnr_type import CollectionPeriodRRMNRType
from openapi_client.model.collection_period_rrmumts_type import CollectionPeriodRRMUMTSType
from openapi_client.model.event_list_for_event_triggered_measurement_type import EventListForEventTriggeredMeasurementType
from openapi_client.model.event_threshold_l1_type import EventThresholdL1Type
from openapi_client.model.event_threshold_type import EventThresholdType
from openapi_client.model.event_threshold_uph_umts_type import EventThresholdUphUMTSType
from openapi_client.model.excess_packet_delay_thresholds_type import ExcessPacketDelayThresholdsType
from openapi_client.model.hysteresis_l1_type import HysteresisL1Type
from openapi_client.model.ip_addr import IpAddr
from openapi_client.model.job_type_type import JobTypeType
from openapi_client.model.list_of_interfaces_type import ListOfInterfacesType
from openapi_client.model.list_of_measurements_type import ListOfMeasurementsType
from openapi_client.model.list_of_ne_types_type import ListOfNETypesType
from openapi_client.model.logging_duration_type import LoggingDurationType
from openapi_client.model.logging_interval_type import LoggingIntervalType
from openapi_client.model.mbsfn_area import MbsfnArea
from openapi_client.model.measurement_period_lte_type import MeasurementPeriodLTEType
from openapi_client.model.measurement_period_umts_type import MeasurementPeriodUMTSType
from openapi_client.model.measurement_quantity_type import MeasurementQuantityType
from openapi_client.model.plmn_list_type import PLMNListType
from openapi_client.model.plmn_target_type import PLMNTargetType
from openapi_client.model.positioning_method_type import PositioningMethodType
from openapi_client.model.report_amount_type import ReportAmountType
from openapi_client.model.report_interval_type import ReportIntervalType
from openapi_client.model.report_type_type import ReportTypeType
from openapi_client.model.reporting_trigger_type import ReportingTriggerType
from openapi_client.model.sensor_information_type import SensorInformationType
from openapi_client.model.time_to_trigger_l1_type import TimeToTriggerL1Type
from openapi_client.model.trace_depth_type import TraceDepthType
from openapi_client.model.trace_reference_type import TraceReferenceType
from openapi_client.model.trace_reporting_format_type import TraceReportingFormatType
from openapi_client.model.trace_target_type import TraceTargetType
from openapi_client.model.triggering_events_type import TriggeringEventsType
