# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class NotificationHeader(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "systemDN",
            "eventTime",
            "notificationId",
            "href",
            "notificationType",
        }
        
        class properties:
            href = schemas.StrSchema
            notificationId = schemas.IntSchema
        
            @staticmethod
            def notificationType() -> typing.Type['NotificationType']:
                return NotificationType
            eventTime = schemas.DateTimeSchema
            systemDN = schemas.StrSchema
            __annotations__ = {
                "href": href,
                "notificationId": notificationId,
                "notificationType": notificationType,
                "eventTime": eventTime,
                "systemDN": systemDN,
            }
    
    systemDN: MetaOapg.properties.systemDN
    eventTime: MetaOapg.properties.eventTime
    notificationId: MetaOapg.properties.notificationId
    href: MetaOapg.properties.href
    notificationType: 'NotificationType'
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["href"]) -> MetaOapg.properties.href: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notificationId"]) -> MetaOapg.properties.notificationId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notificationType"]) -> 'NotificationType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["eventTime"]) -> MetaOapg.properties.eventTime: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["systemDN"]) -> MetaOapg.properties.systemDN: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["href", "notificationId", "notificationType", "eventTime", "systemDN", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["href"]) -> MetaOapg.properties.href: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notificationId"]) -> MetaOapg.properties.notificationId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notificationType"]) -> 'NotificationType': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["eventTime"]) -> MetaOapg.properties.eventTime: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["systemDN"]) -> MetaOapg.properties.systemDN: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["href", "notificationId", "notificationType", "eventTime", "systemDN", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        systemDN: typing.Union[MetaOapg.properties.systemDN, str, ],
        eventTime: typing.Union[MetaOapg.properties.eventTime, str, datetime, ],
        notificationId: typing.Union[MetaOapg.properties.notificationId, decimal.Decimal, int, ],
        href: typing.Union[MetaOapg.properties.href, str, ],
        notificationType: 'NotificationType',
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'NotificationHeader':
        return super().__new__(
            cls,
            *_args,
            systemDN=systemDN,
            eventTime=eventTime,
            notificationId=notificationId,
            href=href,
            notificationType=notificationType,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.notification_type import NotificationType
