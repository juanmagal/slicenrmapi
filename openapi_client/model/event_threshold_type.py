# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class EventThresholdType(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    See details in 3GPP TS 32.422 clause 5.10.7, 5.10.7a, 5.10.13 and 5.10.14.
    """


    class MetaOapg:
        
        class properties:
            
            
            class EventThresholdRSRP(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    
                    class one_of_0(
                        schemas.IntSchema
                    ):
                    
                    
                        class MetaOapg:
                            inclusive_maximum = 97
                            inclusive_minimum = 0
                    
                    
                    class one_of_1(
                        schemas.IntSchema
                    ):
                    
                    
                        class MetaOapg:
                            inclusive_maximum = 127
                            inclusive_minimum = 0
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'EventThresholdRSRP':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class EventThresholdRSRQ(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    
                    class one_of_0(
                        schemas.IntSchema
                    ):
                    
                    
                        class MetaOapg:
                            inclusive_maximum = 34
                            inclusive_minimum = 0
                    
                    
                    class one_of_1(
                        schemas.IntSchema
                    ):
                    
                    
                        class MetaOapg:
                            inclusive_maximum = 127
                            inclusive_minimum = 0
                    
                    @classmethod
                    @functools.lru_cache()
                    def one_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            cls.one_of_0,
                            cls.one_of_1,
                        ]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'EventThresholdRSRQ':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class EventThreshold1F(
                schemas.DictSchema
            ):
            
            
                class MetaOapg:
                    
                    class properties:
                        
                        
                        class CPICH_RSCP(
                            schemas.IntSchema
                        ):
                        
                        
                            class MetaOapg:
                                inclusive_maximum = 25
                                inclusive_minimum = -120
                        
                        
                        class CPICH_EcNo(
                            schemas.IntSchema
                        ):
                        
                        
                            class MetaOapg:
                                inclusive_maximum = 0
                                inclusive_minimum = -24
                        
                        
                        class PathLoss(
                            schemas.IntSchema
                        ):
                        
                        
                            class MetaOapg:
                                inclusive_maximum = 165
                                inclusive_minimum = 30
                        __annotations__ = {
                            "CPICH_RSCP": CPICH_RSCP,
                            "CPICH_EcNo": CPICH_EcNo,
                            "PathLoss": PathLoss,
                        }
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["CPICH_RSCP"]) -> MetaOapg.properties.CPICH_RSCP: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["CPICH_EcNo"]) -> MetaOapg.properties.CPICH_EcNo: ...
                
                @typing.overload
                def __getitem__(self, name: typing_extensions.Literal["PathLoss"]) -> MetaOapg.properties.PathLoss: ...
                
                @typing.overload
                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                
                def __getitem__(self, name: typing.Union[typing_extensions.Literal["CPICH_RSCP", "CPICH_EcNo", "PathLoss", ], str]):
                    # dict_instance[name] accessor
                    return super().__getitem__(name)
                
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["CPICH_RSCP"]) -> typing.Union[MetaOapg.properties.CPICH_RSCP, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["CPICH_EcNo"]) -> typing.Union[MetaOapg.properties.CPICH_EcNo, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: typing_extensions.Literal["PathLoss"]) -> typing.Union[MetaOapg.properties.PathLoss, schemas.Unset]: ...
                
                @typing.overload
                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                
                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["CPICH_RSCP", "CPICH_EcNo", "PathLoss", ], str]):
                    return super().get_item_oapg(name)
                
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, ],
                    CPICH_RSCP: typing.Union[MetaOapg.properties.CPICH_RSCP, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    CPICH_EcNo: typing.Union[MetaOapg.properties.CPICH_EcNo, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    PathLoss: typing.Union[MetaOapg.properties.PathLoss, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'EventThreshold1F':
                    return super().__new__(
                        cls,
                        *_args,
                        CPICH_RSCP=CPICH_RSCP,
                        CPICH_EcNo=CPICH_EcNo,
                        PathLoss=PathLoss,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class EventThreshold1I(
                schemas.IntSchema
            ):
            
            
                class MetaOapg:
                    inclusive_maximum = 25
                    inclusive_minimum = -120
            __annotations__ = {
                "EventThresholdRSRP": EventThresholdRSRP,
                "EventThresholdRSRQ": EventThresholdRSRQ,
                "EventThreshold1F": EventThreshold1F,
                "EventThreshold1I": EventThreshold1I,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["EventThresholdRSRP"]) -> MetaOapg.properties.EventThresholdRSRP: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["EventThresholdRSRQ"]) -> MetaOapg.properties.EventThresholdRSRQ: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["EventThreshold1F"]) -> MetaOapg.properties.EventThreshold1F: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["EventThreshold1I"]) -> MetaOapg.properties.EventThreshold1I: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["EventThresholdRSRP", "EventThresholdRSRQ", "EventThreshold1F", "EventThreshold1I", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["EventThresholdRSRP"]) -> typing.Union[MetaOapg.properties.EventThresholdRSRP, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["EventThresholdRSRQ"]) -> typing.Union[MetaOapg.properties.EventThresholdRSRQ, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["EventThreshold1F"]) -> typing.Union[MetaOapg.properties.EventThreshold1F, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["EventThreshold1I"]) -> typing.Union[MetaOapg.properties.EventThreshold1I, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["EventThresholdRSRP", "EventThresholdRSRQ", "EventThreshold1F", "EventThreshold1I", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        EventThresholdRSRP: typing.Union[MetaOapg.properties.EventThresholdRSRP, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        EventThresholdRSRQ: typing.Union[MetaOapg.properties.EventThresholdRSRQ, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        EventThreshold1F: typing.Union[MetaOapg.properties.EventThreshold1F, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        EventThreshold1I: typing.Union[MetaOapg.properties.EventThreshold1I, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EventThresholdType':
        return super().__new__(
            cls,
            *_args,
            EventThresholdRSRP=EventThresholdRSRP,
            EventThresholdRSRQ=EventThresholdRSRQ,
            EventThreshold1F=EventThreshold1F,
            EventThreshold1I=EventThreshold1I,
            _configuration=_configuration,
            **kwargs,
        )
