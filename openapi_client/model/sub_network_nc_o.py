# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class SubNetworkNcO(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def ManagementNode() -> typing.Type['ManagementNodeMultiple']:
                return ManagementNodeMultiple
        
            @staticmethod
            def MnsAgent() -> typing.Type['MnsAgentMultiple']:
                return MnsAgentMultiple
        
            @staticmethod
            def MeContext() -> typing.Type['MeContextMultiple']:
                return MeContextMultiple
        
            @staticmethod
            def PerfMetricJob() -> typing.Type['PerfMetricJobMultiple']:
                return PerfMetricJobMultiple
        
            @staticmethod
            def ThresholdMonitor() -> typing.Type['ThresholdMonitorMultiple']:
                return ThresholdMonitorMultiple
        
            @staticmethod
            def TraceJob() -> typing.Type['TraceJobMultiple']:
                return TraceJobMultiple
        
            @staticmethod
            def ManagementDataCollection() -> typing.Type['ManagementDataCollectionMultiple']:
                return ManagementDataCollectionMultiple
        
            @staticmethod
            def NtfSubscriptionControl() -> typing.Type['NtfSubscriptionControlMultiple']:
                return NtfSubscriptionControlMultiple
        
            @staticmethod
            def AlarmList() -> typing.Type['AlarmListSingle']:
                return AlarmListSingle
        
            @staticmethod
            def FileDownloadJob() -> typing.Type['FileDownloadJobMultiple']:
                return FileDownloadJobMultiple
        
            @staticmethod
            def Files() -> typing.Type['FilesMultiple']:
                return FilesMultiple
        
            @staticmethod
            def MnsRegistry() -> typing.Type['MnsRegistrySingle']:
                return MnsRegistrySingle
            __annotations__ = {
                "ManagementNode": ManagementNode,
                "MnsAgent": MnsAgent,
                "MeContext": MeContext,
                "PerfMetricJob": PerfMetricJob,
                "ThresholdMonitor": ThresholdMonitor,
                "TraceJob": TraceJob,
                "ManagementDataCollection": ManagementDataCollection,
                "NtfSubscriptionControl": NtfSubscriptionControl,
                "AlarmList": AlarmList,
                "FileDownloadJob": FileDownloadJob,
                "Files": Files,
                "MnsRegistry": MnsRegistry,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ManagementNode"]) -> 'ManagementNodeMultiple': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MnsAgent"]) -> 'MnsAgentMultiple': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MeContext"]) -> 'MeContextMultiple': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["PerfMetricJob"]) -> 'PerfMetricJobMultiple': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ThresholdMonitor"]) -> 'ThresholdMonitorMultiple': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TraceJob"]) -> 'TraceJobMultiple': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ManagementDataCollection"]) -> 'ManagementDataCollectionMultiple': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["NtfSubscriptionControl"]) -> 'NtfSubscriptionControlMultiple': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AlarmList"]) -> 'AlarmListSingle': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["FileDownloadJob"]) -> 'FileDownloadJobMultiple': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["Files"]) -> 'FilesMultiple': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["MnsRegistry"]) -> 'MnsRegistrySingle': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ManagementNode", "MnsAgent", "MeContext", "PerfMetricJob", "ThresholdMonitor", "TraceJob", "ManagementDataCollection", "NtfSubscriptionControl", "AlarmList", "FileDownloadJob", "Files", "MnsRegistry", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ManagementNode"]) -> typing.Union['ManagementNodeMultiple', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MnsAgent"]) -> typing.Union['MnsAgentMultiple', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MeContext"]) -> typing.Union['MeContextMultiple', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["PerfMetricJob"]) -> typing.Union['PerfMetricJobMultiple', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ThresholdMonitor"]) -> typing.Union['ThresholdMonitorMultiple', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TraceJob"]) -> typing.Union['TraceJobMultiple', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ManagementDataCollection"]) -> typing.Union['ManagementDataCollectionMultiple', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["NtfSubscriptionControl"]) -> typing.Union['NtfSubscriptionControlMultiple', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AlarmList"]) -> typing.Union['AlarmListSingle', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["FileDownloadJob"]) -> typing.Union['FileDownloadJobMultiple', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["Files"]) -> typing.Union['FilesMultiple', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["MnsRegistry"]) -> typing.Union['MnsRegistrySingle', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ManagementNode", "MnsAgent", "MeContext", "PerfMetricJob", "ThresholdMonitor", "TraceJob", "ManagementDataCollection", "NtfSubscriptionControl", "AlarmList", "FileDownloadJob", "Files", "MnsRegistry", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        ManagementNode: typing.Union['ManagementNodeMultiple', schemas.Unset] = schemas.unset,
        MnsAgent: typing.Union['MnsAgentMultiple', schemas.Unset] = schemas.unset,
        MeContext: typing.Union['MeContextMultiple', schemas.Unset] = schemas.unset,
        PerfMetricJob: typing.Union['PerfMetricJobMultiple', schemas.Unset] = schemas.unset,
        ThresholdMonitor: typing.Union['ThresholdMonitorMultiple', schemas.Unset] = schemas.unset,
        TraceJob: typing.Union['TraceJobMultiple', schemas.Unset] = schemas.unset,
        ManagementDataCollection: typing.Union['ManagementDataCollectionMultiple', schemas.Unset] = schemas.unset,
        NtfSubscriptionControl: typing.Union['NtfSubscriptionControlMultiple', schemas.Unset] = schemas.unset,
        AlarmList: typing.Union['AlarmListSingle', schemas.Unset] = schemas.unset,
        FileDownloadJob: typing.Union['FileDownloadJobMultiple', schemas.Unset] = schemas.unset,
        Files: typing.Union['FilesMultiple', schemas.Unset] = schemas.unset,
        MnsRegistry: typing.Union['MnsRegistrySingle', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SubNetworkNcO':
        return super().__new__(
            cls,
            *_args,
            ManagementNode=ManagementNode,
            MnsAgent=MnsAgent,
            MeContext=MeContext,
            PerfMetricJob=PerfMetricJob,
            ThresholdMonitor=ThresholdMonitor,
            TraceJob=TraceJob,
            ManagementDataCollection=ManagementDataCollection,
            NtfSubscriptionControl=NtfSubscriptionControl,
            AlarmList=AlarmList,
            FileDownloadJob=FileDownloadJob,
            Files=Files,
            MnsRegistry=MnsRegistry,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.alarm_list_single import AlarmListSingle
from openapi_client.model.file_download_job_multiple import FileDownloadJobMultiple
from openapi_client.model.files_multiple import FilesMultiple
from openapi_client.model.management_data_collection_multiple import ManagementDataCollectionMultiple
from openapi_client.model.management_node_multiple import ManagementNodeMultiple
from openapi_client.model.me_context_multiple import MeContextMultiple
from openapi_client.model.mns_agent_multiple import MnsAgentMultiple
from openapi_client.model.mns_registry_single import MnsRegistrySingle
from openapi_client.model.ntf_subscription_control_multiple import NtfSubscriptionControlMultiple
from openapi_client.model.perf_metric_job_multiple import PerfMetricJobMultiple
from openapi_client.model.threshold_monitor_multiple import ThresholdMonitorMultiple
from openapi_client.model.trace_job_multiple import TraceJobMultiple
