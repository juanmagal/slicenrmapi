# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class EPRPAttr(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            userLabel = schemas.StrSchema
            farEndEntity = schemas.StrSchema
            
            
            class supportedPerfMetricGroups(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SupportedPerfMetricGroup']:
                        return SupportedPerfMetricGroup
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['SupportedPerfMetricGroup'], typing.List['SupportedPerfMetricGroup']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'supportedPerfMetricGroups':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SupportedPerfMetricGroup':
                    return super().__getitem__(i)
            __annotations__ = {
                "userLabel": userLabel,
                "farEndEntity": farEndEntity,
                "supportedPerfMetricGroups": supportedPerfMetricGroups,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["userLabel"]) -> MetaOapg.properties.userLabel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["farEndEntity"]) -> MetaOapg.properties.farEndEntity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supportedPerfMetricGroups"]) -> MetaOapg.properties.supportedPerfMetricGroups: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["userLabel", "farEndEntity", "supportedPerfMetricGroups", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["userLabel"]) -> typing.Union[MetaOapg.properties.userLabel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["farEndEntity"]) -> typing.Union[MetaOapg.properties.farEndEntity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supportedPerfMetricGroups"]) -> typing.Union[MetaOapg.properties.supportedPerfMetricGroups, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["userLabel", "farEndEntity", "supportedPerfMetricGroups", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        userLabel: typing.Union[MetaOapg.properties.userLabel, str, schemas.Unset] = schemas.unset,
        farEndEntity: typing.Union[MetaOapg.properties.farEndEntity, str, schemas.Unset] = schemas.unset,
        supportedPerfMetricGroups: typing.Union[MetaOapg.properties.supportedPerfMetricGroups, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'EPRPAttr':
        return super().__new__(
            cls,
            *_args,
            userLabel=userLabel,
            farEndEntity=farEndEntity,
            supportedPerfMetricGroups=supportedPerfMetricGroups,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.supported_perf_metric_group import SupportedPerfMetricGroup
