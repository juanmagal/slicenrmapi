# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Top(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "id",
        }
        
        class properties:
            
            
            class id(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'id':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            objectClass = schemas.StrSchema
            objectInstance = schemas.StrSchema
        
            @staticmethod
            def VsDataContainer() -> typing.Type['VsDataContainerMultiple']:
                return VsDataContainerMultiple
            __annotations__ = {
                "id": id,
                "objectClass": objectClass,
                "objectInstance": objectInstance,
                "VsDataContainer": VsDataContainer,
            }
    
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["objectClass"]) -> MetaOapg.properties.objectClass: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["objectInstance"]) -> MetaOapg.properties.objectInstance: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["VsDataContainer"]) -> 'VsDataContainerMultiple': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "objectClass", "objectInstance", "VsDataContainer", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["objectClass"]) -> typing.Union[MetaOapg.properties.objectClass, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["objectInstance"]) -> typing.Union[MetaOapg.properties.objectInstance, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["VsDataContainer"]) -> typing.Union['VsDataContainerMultiple', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "objectClass", "objectInstance", "VsDataContainer", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        id: typing.Union[MetaOapg.properties.id, None, str, ],
        objectClass: typing.Union[MetaOapg.properties.objectClass, str, schemas.Unset] = schemas.unset,
        objectInstance: typing.Union[MetaOapg.properties.objectInstance, str, schemas.Unset] = schemas.unset,
        VsDataContainer: typing.Union['VsDataContainerMultiple', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Top':
        return super().__new__(
            cls,
            *_args,
            id=id,
            objectClass=objectClass,
            objectInstance=objectInstance,
            VsDataContainer=VsDataContainer,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.vs_data_container_multiple import VsDataContainerMultiple
