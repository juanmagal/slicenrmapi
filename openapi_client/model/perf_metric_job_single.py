# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class PerfMetricJobSingle(
    schemas.ComposedSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    
                    
                    class attributes(
                        schemas.DictSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            class properties:
                            
                                @staticmethod
                                def administrativeState() -> typing.Type['AdministrativeState']:
                                    return AdministrativeState
                            
                                @staticmethod
                                def operationalState() -> typing.Type['OperationalState']:
                                    return OperationalState
                                jobId = schemas.StrSchema
                                
                                
                                class performanceMetrics(
                                    schemas.ListSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        items = schemas.StrSchema
                                
                                    def __new__(
                                        cls,
                                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, str, ]], typing.List[typing.Union[MetaOapg.items, str, ]]],
                                        _configuration: typing.Optional[schemas.Configuration] = None,
                                    ) -> 'performanceMetrics':
                                        return super().__new__(
                                            cls,
                                            _arg,
                                            _configuration=_configuration,
                                        )
                                
                                    def __getitem__(self, i: int) -> MetaOapg.items:
                                        return super().__getitem__(i)
                                
                                
                                class granularityPeriod(
                                    schemas.IntSchema
                                ):
                                
                                
                                    class MetaOapg:
                                        inclusive_minimum = 1
                            
                                @staticmethod
                                def objectInstances() -> typing.Type['DnList']:
                                    return DnList
                            
                                @staticmethod
                                def rootObjectInstances() -> typing.Type['DnList']:
                                    return DnList
                            
                                @staticmethod
                                def reportingCtrl() -> typing.Type['ReportingCtrl']:
                                    return ReportingCtrl
                                __annotations__ = {
                                    "administrativeState": administrativeState,
                                    "operationalState": operationalState,
                                    "jobId": jobId,
                                    "performanceMetrics": performanceMetrics,
                                    "granularityPeriod": granularityPeriod,
                                    "objectInstances": objectInstances,
                                    "rootObjectInstances": rootObjectInstances,
                                    "reportingCtrl": reportingCtrl,
                                }
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["administrativeState"]) -> 'AdministrativeState': ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["operationalState"]) -> 'OperationalState': ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["jobId"]) -> MetaOapg.properties.jobId: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["performanceMetrics"]) -> MetaOapg.properties.performanceMetrics: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["granularityPeriod"]) -> MetaOapg.properties.granularityPeriod: ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["objectInstances"]) -> 'DnList': ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["rootObjectInstances"]) -> 'DnList': ...
                        
                        @typing.overload
                        def __getitem__(self, name: typing_extensions.Literal["reportingCtrl"]) -> 'ReportingCtrl': ...
                        
                        @typing.overload
                        def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                        
                        def __getitem__(self, name: typing.Union[typing_extensions.Literal["administrativeState", "operationalState", "jobId", "performanceMetrics", "granularityPeriod", "objectInstances", "rootObjectInstances", "reportingCtrl", ], str]):
                            # dict_instance[name] accessor
                            return super().__getitem__(name)
                        
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["administrativeState"]) -> typing.Union['AdministrativeState', schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["operationalState"]) -> typing.Union['OperationalState', schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["jobId"]) -> typing.Union[MetaOapg.properties.jobId, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["performanceMetrics"]) -> typing.Union[MetaOapg.properties.performanceMetrics, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["granularityPeriod"]) -> typing.Union[MetaOapg.properties.granularityPeriod, schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["objectInstances"]) -> typing.Union['DnList', schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["rootObjectInstances"]) -> typing.Union['DnList', schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: typing_extensions.Literal["reportingCtrl"]) -> typing.Union['ReportingCtrl', schemas.Unset]: ...
                        
                        @typing.overload
                        def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                        
                        def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["administrativeState", "operationalState", "jobId", "performanceMetrics", "granularityPeriod", "objectInstances", "rootObjectInstances", "reportingCtrl", ], str]):
                            return super().get_item_oapg(name)
                        
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, ],
                            administrativeState: typing.Union['AdministrativeState', schemas.Unset] = schemas.unset,
                            operationalState: typing.Union['OperationalState', schemas.Unset] = schemas.unset,
                            jobId: typing.Union[MetaOapg.properties.jobId, str, schemas.Unset] = schemas.unset,
                            performanceMetrics: typing.Union[MetaOapg.properties.performanceMetrics, list, tuple, schemas.Unset] = schemas.unset,
                            granularityPeriod: typing.Union[MetaOapg.properties.granularityPeriod, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                            objectInstances: typing.Union['DnList', schemas.Unset] = schemas.unset,
                            rootObjectInstances: typing.Union['DnList', schemas.Unset] = schemas.unset,
                            reportingCtrl: typing.Union['ReportingCtrl', schemas.Unset] = schemas.unset,
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'attributes':
                            return super().__new__(
                                cls,
                                *_args,
                                administrativeState=administrativeState,
                                operationalState=operationalState,
                                jobId=jobId,
                                performanceMetrics=performanceMetrics,
                                granularityPeriod=granularityPeriod,
                                objectInstances=objectInstances,
                                rootObjectInstances=rootObjectInstances,
                                reportingCtrl=reportingCtrl,
                                _configuration=_configuration,
                                **kwargs,
                            )
                
                    @staticmethod
                    def Files() -> typing.Type['FilesMultiple']:
                        return FilesMultiple
                    __annotations__ = {
                        "attributes": attributes,
                        "Files": Files,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> MetaOapg.properties.attributes: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["Files"]) -> 'FilesMultiple': ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["attributes", "Files", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> typing.Union[MetaOapg.properties.attributes, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["Files"]) -> typing.Union['FilesMultiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["attributes", "Files", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                attributes: typing.Union[MetaOapg.properties.attributes, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                Files: typing.Union['FilesMultiple', schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *_args,
                    attributes=attributes,
                    Files=Files,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                Top,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PerfMetricJobSingle':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.administrative_state import AdministrativeState
from openapi_client.model.dn_list import DnList
from openapi_client.model.files_multiple import FilesMultiple
from openapi_client.model.operational_state import OperationalState
from openapi_client.model.reporting_ctrl import ReportingCtrl
from openapi_client.model.top import Top
