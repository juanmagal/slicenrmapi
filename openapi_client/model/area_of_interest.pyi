# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class AreaOfInterest(
    schemas.ComposedSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        
        class one_of_1(
            schemas.ListSchema
        ):
        
        
            class MetaOapg:
                
                @staticmethod
                def items() -> typing.Type['Tai1']:
                    return Tai1
        
            def __new__(
                cls,
                _arg: typing.Union[typing.Tuple['Tai1'], typing.List['Tai1']],
                _configuration: typing.Optional[schemas.Configuration] = None,
            ) -> 'one_of_1':
                return super().__new__(
                    cls,
                    _arg,
                    _configuration=_configuration,
                )
        
            def __getitem__(self, i: int) -> 'Tai1':
                return super().__getitem__(i)
        
        
        class one_of_2(
            schemas.ListSchema
        ):
        
        
            class MetaOapg:
                
                @staticmethod
                def items() -> typing.Type['NrCellId']:
                    return NrCellId
        
            def __new__(
                cls,
                _arg: typing.Union[typing.Tuple['NrCellId'], typing.List['NrCellId']],
                _configuration: typing.Optional[schemas.Configuration] = None,
            ) -> 'one_of_2':
                return super().__new__(
                    cls,
                    _arg,
                    _configuration=_configuration,
                )
        
            def __getitem__(self, i: int) -> 'NrCellId':
                return super().__getitem__(i)
        
        
        class one_of_3(
            schemas.ListSchema
        ):
        
        
            class MetaOapg:
                
                @staticmethod
                def items() -> typing.Type['EutraCellId']:
                    return EutraCellId
        
            def __new__(
                cls,
                _arg: typing.Union[typing.Tuple['EutraCellId'], typing.List['EutraCellId']],
                _configuration: typing.Optional[schemas.Configuration] = None,
            ) -> 'one_of_3':
                return super().__new__(
                    cls,
                    _arg,
                    _configuration=_configuration,
                )
        
            def __getitem__(self, i: int) -> 'EutraCellId':
                return super().__getitem__(i)
        
        
        class one_of_4(
            schemas.ListSchema
        ):
        
        
            class MetaOapg:
                
                @staticmethod
                def items() -> typing.Type['UtraCellId']:
                    return UtraCellId
        
            def __new__(
                cls,
                _arg: typing.Union[typing.Tuple['UtraCellId'], typing.List['UtraCellId']],
                _configuration: typing.Optional[schemas.Configuration] = None,
            ) -> 'one_of_4':
                return super().__new__(
                    cls,
                    _arg,
                    _configuration=_configuration,
                )
        
            def __getitem__(self, i: int) -> 'UtraCellId':
                return super().__getitem__(i)
        
        @classmethod
        @functools.lru_cache()
        def one_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                GeoAreaToCellMapping,
                cls.one_of_1,
                cls.one_of_2,
                cls.one_of_3,
                cls.one_of_4,
            ]


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AreaOfInterest':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.eutra_cell_id import EutraCellId
from openapi_client.model.geo_area_to_cell_mapping import GeoAreaToCellMapping
from openapi_client.model.nr_cell_id import NrCellId
from openapi_client.model.tai1 import Tai1
from openapi_client.model.utra_cell_id import UtraCellId
