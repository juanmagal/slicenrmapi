# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class GnbCuCpFunctionSingle(
    schemas.ComposedSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    
                    
                    class attributes(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class all_of_1(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    class properties:
                                        gnbId = schemas.StrSchema
                                    
                                        @staticmethod
                                        def gnbIdLength() -> typing.Type['GnbIdLength']:
                                            return GnbIdLength
                                    
                                        @staticmethod
                                        def gnbCuName() -> typing.Type['GnbName']:
                                            return GnbName
                                    
                                        @staticmethod
                                        def plmnId() -> typing.Type['PlmnId']:
                                            return PlmnId
                                    
                                        @staticmethod
                                        def x2BlockList() -> typing.Type['GGnbIdList']:
                                            return GGnbIdList
                                    
                                        @staticmethod
                                        def xnBlockList() -> typing.Type['GGnbIdList']:
                                            return GGnbIdList
                                    
                                        @staticmethod
                                        def x2AllowList() -> typing.Type['GGnbIdList']:
                                            return GGnbIdList
                                    
                                        @staticmethod
                                        def xnAllowList() -> typing.Type['GGnbIdList']:
                                            return GGnbIdList
                                    
                                        @staticmethod
                                        def x2HOBlackList() -> typing.Type['GEnbIdList']:
                                            return GEnbIdList
                                    
                                        @staticmethod
                                        def xnHOBlackList() -> typing.Type['GGnbIdList']:
                                            return GGnbIdList
                                    
                                        @staticmethod
                                        def mappingSetIDBackhaulAddress() -> typing.Type['MappingSetIDBackhaulAddress']:
                                            return MappingSetIDBackhaulAddress
                                    
                                        @staticmethod
                                        def tceMappingInfoList() -> typing.Type['TceMappingInfoList']:
                                            return TceMappingInfoList
                                        configurable5QISetRef = schemas.StrSchema
                                        dynamic5QISetRef = schemas.StrSchema
                                        dCHOControl = schemas.BoolSchema
                                        dDAPSHOControl = schemas.BoolSchema
                                        __annotations__ = {
                                            "gnbId": gnbId,
                                            "gnbIdLength": gnbIdLength,
                                            "gnbCuName": gnbCuName,
                                            "plmnId": plmnId,
                                            "x2BlockList": x2BlockList,
                                            "xnBlockList": xnBlockList,
                                            "x2AllowList": x2AllowList,
                                            "xnAllowList": xnAllowList,
                                            "x2HOBlackList": x2HOBlackList,
                                            "xnHOBlackList": xnHOBlackList,
                                            "mappingSetIDBackhaulAddress": mappingSetIDBackhaulAddress,
                                            "tceMappingInfoList": tceMappingInfoList,
                                            "configurable5QISetRef": configurable5QISetRef,
                                            "dynamic5QISetRef": dynamic5QISetRef,
                                            "dCHOControl": dCHOControl,
                                            "dDAPSHOControl": dDAPSHOControl,
                                        }
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["gnbId"]) -> MetaOapg.properties.gnbId: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["gnbIdLength"]) -> 'GnbIdLength': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["gnbCuName"]) -> 'GnbName': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["plmnId"]) -> 'PlmnId': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["x2BlockList"]) -> 'GGnbIdList': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["xnBlockList"]) -> 'GGnbIdList': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["x2AllowList"]) -> 'GGnbIdList': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["xnAllowList"]) -> 'GGnbIdList': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["x2HOBlackList"]) -> 'GEnbIdList': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["xnHOBlackList"]) -> 'GGnbIdList': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["mappingSetIDBackhaulAddress"]) -> 'MappingSetIDBackhaulAddress': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["tceMappingInfoList"]) -> 'TceMappingInfoList': ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["configurable5QISetRef"]) -> MetaOapg.properties.configurable5QISetRef: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["dynamic5QISetRef"]) -> MetaOapg.properties.dynamic5QISetRef: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["dCHOControl"]) -> MetaOapg.properties.dCHOControl: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["dDAPSHOControl"]) -> MetaOapg.properties.dDAPSHOControl: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["gnbId", "gnbIdLength", "gnbCuName", "plmnId", "x2BlockList", "xnBlockList", "x2AllowList", "xnAllowList", "x2HOBlackList", "xnHOBlackList", "mappingSetIDBackhaulAddress", "tceMappingInfoList", "configurable5QISetRef", "dynamic5QISetRef", "dCHOControl", "dDAPSHOControl", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["gnbId"]) -> typing.Union[MetaOapg.properties.gnbId, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["gnbIdLength"]) -> typing.Union['GnbIdLength', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["gnbCuName"]) -> typing.Union['GnbName', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["plmnId"]) -> typing.Union['PlmnId', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["x2BlockList"]) -> typing.Union['GGnbIdList', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["xnBlockList"]) -> typing.Union['GGnbIdList', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["x2AllowList"]) -> typing.Union['GGnbIdList', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["xnAllowList"]) -> typing.Union['GGnbIdList', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["x2HOBlackList"]) -> typing.Union['GEnbIdList', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["xnHOBlackList"]) -> typing.Union['GGnbIdList', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["mappingSetIDBackhaulAddress"]) -> typing.Union['MappingSetIDBackhaulAddress', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["tceMappingInfoList"]) -> typing.Union['TceMappingInfoList', schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["configurable5QISetRef"]) -> typing.Union[MetaOapg.properties.configurable5QISetRef, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["dynamic5QISetRef"]) -> typing.Union[MetaOapg.properties.dynamic5QISetRef, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["dCHOControl"]) -> typing.Union[MetaOapg.properties.dCHOControl, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["dDAPSHOControl"]) -> typing.Union[MetaOapg.properties.dDAPSHOControl, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["gnbId", "gnbIdLength", "gnbCuName", "plmnId", "x2BlockList", "xnBlockList", "x2AllowList", "xnAllowList", "x2HOBlackList", "xnHOBlackList", "mappingSetIDBackhaulAddress", "tceMappingInfoList", "configurable5QISetRef", "dynamic5QISetRef", "dCHOControl", "dDAPSHOControl", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *_args: typing.Union[dict, frozendict.frozendict, ],
                                    gnbId: typing.Union[MetaOapg.properties.gnbId, str, schemas.Unset] = schemas.unset,
                                    gnbIdLength: typing.Union['GnbIdLength', schemas.Unset] = schemas.unset,
                                    gnbCuName: typing.Union['GnbName', schemas.Unset] = schemas.unset,
                                    plmnId: typing.Union['PlmnId', schemas.Unset] = schemas.unset,
                                    x2BlockList: typing.Union['GGnbIdList', schemas.Unset] = schemas.unset,
                                    xnBlockList: typing.Union['GGnbIdList', schemas.Unset] = schemas.unset,
                                    x2AllowList: typing.Union['GGnbIdList', schemas.Unset] = schemas.unset,
                                    xnAllowList: typing.Union['GGnbIdList', schemas.Unset] = schemas.unset,
                                    x2HOBlackList: typing.Union['GEnbIdList', schemas.Unset] = schemas.unset,
                                    xnHOBlackList: typing.Union['GGnbIdList', schemas.Unset] = schemas.unset,
                                    mappingSetIDBackhaulAddress: typing.Union['MappingSetIDBackhaulAddress', schemas.Unset] = schemas.unset,
                                    tceMappingInfoList: typing.Union['TceMappingInfoList', schemas.Unset] = schemas.unset,
                                    configurable5QISetRef: typing.Union[MetaOapg.properties.configurable5QISetRef, str, schemas.Unset] = schemas.unset,
                                    dynamic5QISetRef: typing.Union[MetaOapg.properties.dynamic5QISetRef, str, schemas.Unset] = schemas.unset,
                                    dCHOControl: typing.Union[MetaOapg.properties.dCHOControl, bool, schemas.Unset] = schemas.unset,
                                    dDAPSHOControl: typing.Union[MetaOapg.properties.dDAPSHOControl, bool, schemas.Unset] = schemas.unset,
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'all_of_1':
                                    return super().__new__(
                                        cls,
                                        *_args,
                                        gnbId=gnbId,
                                        gnbIdLength=gnbIdLength,
                                        gnbCuName=gnbCuName,
                                        plmnId=plmnId,
                                        x2BlockList=x2BlockList,
                                        xnBlockList=xnBlockList,
                                        x2AllowList=x2AllowList,
                                        xnAllowList=xnAllowList,
                                        x2HOBlackList=x2HOBlackList,
                                        xnHOBlackList=xnHOBlackList,
                                        mappingSetIDBackhaulAddress=mappingSetIDBackhaulAddress,
                                        tceMappingInfoList=tceMappingInfoList,
                                        configurable5QISetRef=configurable5QISetRef,
                                        dynamic5QISetRef=dynamic5QISetRef,
                                        dCHOControl=dCHOControl,
                                        dDAPSHOControl=dDAPSHOControl,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    ManagedFunctionAttr,
                                    cls.all_of_1,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'attributes':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    __annotations__ = {
                        "attributes": attributes,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> MetaOapg.properties.attributes: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["attributes", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> typing.Union[MetaOapg.properties.attributes, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["attributes", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                attributes: typing.Union[MetaOapg.properties.attributes, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *_args,
                    attributes=attributes,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        
        class all_of_3(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                
                    @staticmethod
                    def RRMPolicyRatio() -> typing.Type['RRMPolicyRatioMultiple']:
                        return RRMPolicyRatioMultiple
                
                    @staticmethod
                    def NrCellCu() -> typing.Type['NrCellCuMultiple']:
                        return NrCellCuMultiple
                
                    @staticmethod
                    def EP_XnC() -> typing.Type['EPXnCMultiple']:
                        return EPXnCMultiple
                
                    @staticmethod
                    def EP_E1() -> typing.Type['EPE1Multiple']:
                        return EPE1Multiple
                
                    @staticmethod
                    def EP_F1C() -> typing.Type['EPF1CMultiple']:
                        return EPF1CMultiple
                
                    @staticmethod
                    def EP_NgC() -> typing.Type['EPNgCMultiple']:
                        return EPNgCMultiple
                
                    @staticmethod
                    def EP_X2C() -> typing.Type['EPX2CMultiple']:
                        return EPX2CMultiple
                
                    @staticmethod
                    def DANRManagementFunction() -> typing.Type['DANRManagementFunctionSingle']:
                        return DANRManagementFunctionSingle
                
                    @staticmethod
                    def DESManagementFunction() -> typing.Type['DESManagementFunctionSingle']:
                        return DESManagementFunctionSingle
                
                    @staticmethod
                    def DMROFunction() -> typing.Type['DMROFunctionSingle']:
                        return DMROFunctionSingle
                
                    @staticmethod
                    def DLBOFunction() -> typing.Type['DLBOFunctionSingle']:
                        return DLBOFunctionSingle
                    __annotations__ = {
                        "RRMPolicyRatio": RRMPolicyRatio,
                        "NrCellCu": NrCellCu,
                        "EP_XnC": EP_XnC,
                        "EP_E1": EP_E1,
                        "EP_F1C": EP_F1C,
                        "EP_NgC": EP_NgC,
                        "EP_X2C": EP_X2C,
                        "DANRManagementFunction": DANRManagementFunction,
                        "DESManagementFunction": DESManagementFunction,
                        "DMROFunction": DMROFunction,
                        "DLBOFunction": DLBOFunction,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["RRMPolicyRatio"]) -> 'RRMPolicyRatioMultiple': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["NrCellCu"]) -> 'NrCellCuMultiple': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["EP_XnC"]) -> 'EPXnCMultiple': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["EP_E1"]) -> 'EPE1Multiple': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["EP_F1C"]) -> 'EPF1CMultiple': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["EP_NgC"]) -> 'EPNgCMultiple': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["EP_X2C"]) -> 'EPX2CMultiple': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["DANRManagementFunction"]) -> 'DANRManagementFunctionSingle': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["DESManagementFunction"]) -> 'DESManagementFunctionSingle': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["DMROFunction"]) -> 'DMROFunctionSingle': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["DLBOFunction"]) -> 'DLBOFunctionSingle': ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["RRMPolicyRatio", "NrCellCu", "EP_XnC", "EP_E1", "EP_F1C", "EP_NgC", "EP_X2C", "DANRManagementFunction", "DESManagementFunction", "DMROFunction", "DLBOFunction", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["RRMPolicyRatio"]) -> typing.Union['RRMPolicyRatioMultiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["NrCellCu"]) -> typing.Union['NrCellCuMultiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["EP_XnC"]) -> typing.Union['EPXnCMultiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["EP_E1"]) -> typing.Union['EPE1Multiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["EP_F1C"]) -> typing.Union['EPF1CMultiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["EP_NgC"]) -> typing.Union['EPNgCMultiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["EP_X2C"]) -> typing.Union['EPX2CMultiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["DANRManagementFunction"]) -> typing.Union['DANRManagementFunctionSingle', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["DESManagementFunction"]) -> typing.Union['DESManagementFunctionSingle', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["DMROFunction"]) -> typing.Union['DMROFunctionSingle', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["DLBOFunction"]) -> typing.Union['DLBOFunctionSingle', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["RRMPolicyRatio", "NrCellCu", "EP_XnC", "EP_E1", "EP_F1C", "EP_NgC", "EP_X2C", "DANRManagementFunction", "DESManagementFunction", "DMROFunction", "DLBOFunction", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                RRMPolicyRatio: typing.Union['RRMPolicyRatioMultiple', schemas.Unset] = schemas.unset,
                NrCellCu: typing.Union['NrCellCuMultiple', schemas.Unset] = schemas.unset,
                EP_XnC: typing.Union['EPXnCMultiple', schemas.Unset] = schemas.unset,
                EP_E1: typing.Union['EPE1Multiple', schemas.Unset] = schemas.unset,
                EP_F1C: typing.Union['EPF1CMultiple', schemas.Unset] = schemas.unset,
                EP_NgC: typing.Union['EPNgCMultiple', schemas.Unset] = schemas.unset,
                EP_X2C: typing.Union['EPX2CMultiple', schemas.Unset] = schemas.unset,
                DANRManagementFunction: typing.Union['DANRManagementFunctionSingle', schemas.Unset] = schemas.unset,
                DESManagementFunction: typing.Union['DESManagementFunctionSingle', schemas.Unset] = schemas.unset,
                DMROFunction: typing.Union['DMROFunctionSingle', schemas.Unset] = schemas.unset,
                DLBOFunction: typing.Union['DLBOFunctionSingle', schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_3':
                return super().__new__(
                    cls,
                    *_args,
                    RRMPolicyRatio=RRMPolicyRatio,
                    NrCellCu=NrCellCu,
                    EP_XnC=EP_XnC,
                    EP_E1=EP_E1,
                    EP_F1C=EP_F1C,
                    EP_NgC=EP_NgC,
                    EP_X2C=EP_X2C,
                    DANRManagementFunction=DANRManagementFunction,
                    DESManagementFunction=DESManagementFunction,
                    DMROFunction=DMROFunction,
                    DLBOFunction=DLBOFunction,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                Top,
                cls.all_of_1,
                ManagedFunctionNcO,
                cls.all_of_3,
            ]


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'GnbCuCpFunctionSingle':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.danr_management_function_single import DANRManagementFunctionSingle
from openapi_client.model.des_management_function_single import DESManagementFunctionSingle
from openapi_client.model.dlbo_function_single import DLBOFunctionSingle
from openapi_client.model.dmro_function_single import DMROFunctionSingle
from openapi_client.model.epe1_multiple import EPE1Multiple
from openapi_client.model.epf1_c_multiple import EPF1CMultiple
from openapi_client.model.epng_c_multiple import EPNgCMultiple
from openapi_client.model.epx2_c_multiple import EPX2CMultiple
from openapi_client.model.epxn_c_multiple import EPXnCMultiple
from openapi_client.model.g_enb_id_list import GEnbIdList
from openapi_client.model.g_gnb_id_list import GGnbIdList
from openapi_client.model.gnb_id_length import GnbIdLength
from openapi_client.model.gnb_name import GnbName
from openapi_client.model.managed_function_attr import ManagedFunctionAttr
from openapi_client.model.managed_function_nc_o import ManagedFunctionNcO
from openapi_client.model.mapping_set_id_backhaul_address import MappingSetIDBackhaulAddress
from openapi_client.model.nr_cell_cu_multiple import NrCellCuMultiple
from openapi_client.model.plmn_id import PlmnId
from openapi_client.model.rrm_policy_ratio_multiple import RRMPolicyRatioMultiple
from openapi_client.model.tce_mapping_info_list import TceMappingInfoList
from openapi_client.model.top import Top
