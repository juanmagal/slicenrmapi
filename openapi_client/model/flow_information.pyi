# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class FlowInformation(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Contains the flow information.
    """


    class MetaOapg:
        
        class properties:
            flowDescription = schemas.StrSchema
        
            @staticmethod
            def ethFlowDescription() -> typing.Type['EthFlowDescription']:
                return EthFlowDescription
            packFiltId = schemas.StrSchema
            packetFilterUsage = schemas.BoolSchema
            
            
            class tosTrafficClass(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'tosTrafficClass':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class spi(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'spi':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
            
            
            class flowLabel(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'flowLabel':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                    )
        
            @staticmethod
            def flowDirection() -> typing.Type['FlowDirectionRm']:
                return FlowDirectionRm
            __annotations__ = {
                "flowDescription": flowDescription,
                "ethFlowDescription": ethFlowDescription,
                "packFiltId": packFiltId,
                "packetFilterUsage": packetFilterUsage,
                "tosTrafficClass": tosTrafficClass,
                "spi": spi,
                "flowLabel": flowLabel,
                "flowDirection": flowDirection,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flowDescription"]) -> MetaOapg.properties.flowDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ethFlowDescription"]) -> 'EthFlowDescription': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["packFiltId"]) -> MetaOapg.properties.packFiltId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["packetFilterUsage"]) -> MetaOapg.properties.packetFilterUsage: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tosTrafficClass"]) -> MetaOapg.properties.tosTrafficClass: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["spi"]) -> MetaOapg.properties.spi: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flowLabel"]) -> MetaOapg.properties.flowLabel: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flowDirection"]) -> 'FlowDirectionRm': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["flowDescription", "ethFlowDescription", "packFiltId", "packetFilterUsage", "tosTrafficClass", "spi", "flowLabel", "flowDirection", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flowDescription"]) -> typing.Union[MetaOapg.properties.flowDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ethFlowDescription"]) -> typing.Union['EthFlowDescription', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["packFiltId"]) -> typing.Union[MetaOapg.properties.packFiltId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["packetFilterUsage"]) -> typing.Union[MetaOapg.properties.packetFilterUsage, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tosTrafficClass"]) -> typing.Union[MetaOapg.properties.tosTrafficClass, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["spi"]) -> typing.Union[MetaOapg.properties.spi, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flowLabel"]) -> typing.Union[MetaOapg.properties.flowLabel, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flowDirection"]) -> typing.Union['FlowDirectionRm', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["flowDescription", "ethFlowDescription", "packFiltId", "packetFilterUsage", "tosTrafficClass", "spi", "flowLabel", "flowDirection", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        flowDescription: typing.Union[MetaOapg.properties.flowDescription, str, schemas.Unset] = schemas.unset,
        ethFlowDescription: typing.Union['EthFlowDescription', schemas.Unset] = schemas.unset,
        packFiltId: typing.Union[MetaOapg.properties.packFiltId, str, schemas.Unset] = schemas.unset,
        packetFilterUsage: typing.Union[MetaOapg.properties.packetFilterUsage, bool, schemas.Unset] = schemas.unset,
        tosTrafficClass: typing.Union[MetaOapg.properties.tosTrafficClass, None, str, schemas.Unset] = schemas.unset,
        spi: typing.Union[MetaOapg.properties.spi, None, str, schemas.Unset] = schemas.unset,
        flowLabel: typing.Union[MetaOapg.properties.flowLabel, None, str, schemas.Unset] = schemas.unset,
        flowDirection: typing.Union['FlowDirectionRm', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FlowInformation':
        return super().__new__(
            cls,
            *_args,
            flowDescription=flowDescription,
            ethFlowDescription=ethFlowDescription,
            packFiltId=packFiltId,
            packetFilterUsage=packetFilterUsage,
            tosTrafficClass=tosTrafficClass,
            spi=spi,
            flowLabel=flowLabel,
            flowDirection=flowDirection,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.eth_flow_description import EthFlowDescription
from openapi_client.model.flow_direction_rm import FlowDirectionRm
