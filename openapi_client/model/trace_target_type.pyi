# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class TraceTargetType(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Trace target conveying both the type and value of the target ID. For additional details see 3GPP TS 32.422
    """


    class MetaOapg:
        required = {
            "TargetIdType",
            "TargetIdValue",
        }
        
        class properties:
            
            
            class TargetIdType(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def IMSI(cls):
                    return cls("IMSI")
                
                @schemas.classproperty
                def IMEI(cls):
                    return cls("IMEI")
                
                @schemas.classproperty
                def IMEISV(cls):
                    return cls("IMEISV")
                
                @schemas.classproperty
                def PUBLIC_ID(cls):
                    return cls("PUBLIC_ID")
                
                @schemas.classproperty
                def UTRAN_CELL(cls):
                    return cls("UTRAN_CELL")
                
                @schemas.classproperty
                def EUTRAN_CELL(cls):
                    return cls("E-UTRAN_CELL")
                
                @schemas.classproperty
                def NGRAN_CELL(cls):
                    return cls("NG-RAN_CELL")
                
                @schemas.classproperty
                def E_NB(cls):
                    return cls("eNB")
                
                @schemas.classproperty
                def RNC(cls):
                    return cls("RNC")
                
                @schemas.classproperty
                def G_NB(cls):
                    return cls("gNB")
                
                @schemas.classproperty
                def SUPI(cls):
                    return cls("SUPI")
            TargetIdValue = schemas.StrSchema
            __annotations__ = {
                "TargetIdType": TargetIdType,
                "TargetIdValue": TargetIdValue,
            }
    
    TargetIdType: MetaOapg.properties.TargetIdType
    TargetIdValue: MetaOapg.properties.TargetIdValue
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TargetIdType"]) -> MetaOapg.properties.TargetIdType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["TargetIdValue"]) -> MetaOapg.properties.TargetIdValue: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["TargetIdType", "TargetIdValue", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TargetIdType"]) -> MetaOapg.properties.TargetIdType: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["TargetIdValue"]) -> MetaOapg.properties.TargetIdValue: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["TargetIdType", "TargetIdValue", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        TargetIdType: typing.Union[MetaOapg.properties.TargetIdType, str, ],
        TargetIdValue: typing.Union[MetaOapg.properties.TargetIdValue, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TraceTargetType':
        return super().__new__(
            cls,
            *_args,
            TargetIdType=TargetIdType,
            TargetIdValue=TargetIdValue,
            _configuration=_configuration,
            **kwargs,
        )
