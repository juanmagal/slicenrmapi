# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Resource(
    schemas.ComposedSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        
        class one_of_0(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "id",
                }
                
                class properties:
                    id = schemas.StrSchema
                    objectClass = schemas.StrSchema
                    objectInstance = schemas.StrSchema
                    attributes = schemas.DictSchema
                    __annotations__ = {
                        "id": id,
                        "objectClass": objectClass,
                        "objectInstance": objectInstance,
                        "attributes": attributes,
                    }
                
                
                class additional_properties(
                    schemas.ListSchema
                ):
                
                
                    class MetaOapg:
                        items = schemas.DictSchema
                
                    def __new__(
                        cls,
                        _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                        _configuration: typing.Optional[schemas.Configuration] = None,
                    ) -> 'additional_properties':
                        return super().__new__(
                            cls,
                            _arg,
                            _configuration=_configuration,
                        )
                
                    def __getitem__(self, i: int) -> MetaOapg.items:
                        return super().__getitem__(i)
            
            id: MetaOapg.properties.id
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["objectClass"]) -> MetaOapg.properties.objectClass: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["objectInstance"]) -> MetaOapg.properties.objectInstance: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> MetaOapg.properties.attributes: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["id"], typing_extensions.Literal["objectClass"], typing_extensions.Literal["objectInstance"], typing_extensions.Literal["attributes"], str, ]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["objectClass"]) -> typing.Union[MetaOapg.properties.objectClass, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["objectInstance"]) -> typing.Union[MetaOapg.properties.objectInstance, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> typing.Union[MetaOapg.properties.attributes, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id"], typing_extensions.Literal["objectClass"], typing_extensions.Literal["objectInstance"], typing_extensions.Literal["attributes"], str, ]):
                return super().get_item_oapg(name)
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                id: typing.Union[MetaOapg.properties.id, str, ],
                objectClass: typing.Union[MetaOapg.properties.objectClass, str, schemas.Unset] = schemas.unset,
                objectInstance: typing.Union[MetaOapg.properties.objectInstance, str, schemas.Unset] = schemas.unset,
                attributes: typing.Union[MetaOapg.properties.attributes, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[MetaOapg.additional_properties, list, tuple, ],
            ) -> 'one_of_0':
                return super().__new__(
                    cls,
                    *_args,
                    id=id,
                    objectClass=objectClass,
                    objectInstance=objectInstance,
                    attributes=attributes,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        
        class one_of_1(
            schemas.ComposedSchema,
        ):
        
        
            class MetaOapg:
                
                @classmethod
                @functools.lru_cache()
                def any_of(cls):
                    # we need this here to make our import statements work
                    # we must store _composed_schemas in here so the code is only run
                    # when we invoke this method. If we kept this at the class
                    # level we would get an error because the class level
                    # code would be run when this module is imported, and these composed
                    # classes don't exist yet because their module has not finished
                    # loading
                    return [
                        ResourcesGenericNrm,
                        ResourcesNrNrm,
                        Resources5gcNrm,
                        ResourcesSliceNrm,
                        ResourcesCoslaNrm,
                        ResourcesIntentNrm,
                    ]
        
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'one_of_1':
                return super().__new__(
                    cls,
                    *_args,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def one_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.one_of_0,
                cls.one_of_1,
            ]


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Resource':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.resources5gc_nrm import Resources5gcNrm
from openapi_client.model.resources_cosla_nrm import ResourcesCoslaNrm
from openapi_client.model.resources_generic_nrm import ResourcesGenericNrm
from openapi_client.model.resources_intent_nrm import ResourcesIntentNrm
from openapi_client.model.resources_nr_nrm import ResourcesNrNrm
from openapi_client.model.resources_slice_nrm import ResourcesSliceNrm
