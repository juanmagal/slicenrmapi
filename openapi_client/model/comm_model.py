# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class CommModel(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            groupId = schemas.IntSchema
        
            @staticmethod
            def commModelType() -> typing.Type['CommModelType']:
                return CommModelType
        
            @staticmethod
            def targetNFServiceList() -> typing.Type['DnList']:
                return DnList
            commModelConfiguration = schemas.StrSchema
            __annotations__ = {
                "groupId": groupId,
                "commModelType": commModelType,
                "targetNFServiceList": targetNFServiceList,
                "commModelConfiguration": commModelConfiguration,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["groupId"]) -> MetaOapg.properties.groupId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["commModelType"]) -> 'CommModelType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["targetNFServiceList"]) -> 'DnList': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["commModelConfiguration"]) -> MetaOapg.properties.commModelConfiguration: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["groupId", "commModelType", "targetNFServiceList", "commModelConfiguration", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["groupId"]) -> typing.Union[MetaOapg.properties.groupId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["commModelType"]) -> typing.Union['CommModelType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["targetNFServiceList"]) -> typing.Union['DnList', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["commModelConfiguration"]) -> typing.Union[MetaOapg.properties.commModelConfiguration, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["groupId", "commModelType", "targetNFServiceList", "commModelConfiguration", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        groupId: typing.Union[MetaOapg.properties.groupId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        commModelType: typing.Union['CommModelType', schemas.Unset] = schemas.unset,
        targetNFServiceList: typing.Union['DnList', schemas.Unset] = schemas.unset,
        commModelConfiguration: typing.Union[MetaOapg.properties.commModelConfiguration, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CommModel':
        return super().__new__(
            cls,
            *_args,
            groupId=groupId,
            commModelType=commModelType,
            targetNFServiceList=targetNFServiceList,
            commModelConfiguration=commModelConfiguration,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.comm_model_type import CommModelType
from openapi_client.model.dn_list import DnList
