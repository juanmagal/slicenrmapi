# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class PeeParameter(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            siteIdentification = schemas.StrSchema
            siteDescription = schemas.StrSchema
        
            @staticmethod
            def siteLatitude() -> typing.Type['Latitude']:
                return Latitude
        
            @staticmethod
            def siteLongitude() -> typing.Type['Longitude']:
                return Longitude
            siteAltitude = schemas.Float32Schema
            equipmentType = schemas.StrSchema
            environmentType = schemas.StrSchema
            powerInterface = schemas.StrSchema
            __annotations__ = {
                "siteIdentification": siteIdentification,
                "siteDescription": siteDescription,
                "siteLatitude": siteLatitude,
                "siteLongitude": siteLongitude,
                "siteAltitude": siteAltitude,
                "equipmentType": equipmentType,
                "environmentType": environmentType,
                "powerInterface": powerInterface,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["siteIdentification"]) -> MetaOapg.properties.siteIdentification: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["siteDescription"]) -> MetaOapg.properties.siteDescription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["siteLatitude"]) -> 'Latitude': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["siteLongitude"]) -> 'Longitude': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["siteAltitude"]) -> MetaOapg.properties.siteAltitude: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["equipmentType"]) -> MetaOapg.properties.equipmentType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["environmentType"]) -> MetaOapg.properties.environmentType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["powerInterface"]) -> MetaOapg.properties.powerInterface: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["siteIdentification", "siteDescription", "siteLatitude", "siteLongitude", "siteAltitude", "equipmentType", "environmentType", "powerInterface", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["siteIdentification"]) -> typing.Union[MetaOapg.properties.siteIdentification, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["siteDescription"]) -> typing.Union[MetaOapg.properties.siteDescription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["siteLatitude"]) -> typing.Union['Latitude', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["siteLongitude"]) -> typing.Union['Longitude', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["siteAltitude"]) -> typing.Union[MetaOapg.properties.siteAltitude, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["equipmentType"]) -> typing.Union[MetaOapg.properties.equipmentType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["environmentType"]) -> typing.Union[MetaOapg.properties.environmentType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["powerInterface"]) -> typing.Union[MetaOapg.properties.powerInterface, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["siteIdentification", "siteDescription", "siteLatitude", "siteLongitude", "siteAltitude", "equipmentType", "environmentType", "powerInterface", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        siteIdentification: typing.Union[MetaOapg.properties.siteIdentification, str, schemas.Unset] = schemas.unset,
        siteDescription: typing.Union[MetaOapg.properties.siteDescription, str, schemas.Unset] = schemas.unset,
        siteLatitude: typing.Union['Latitude', schemas.Unset] = schemas.unset,
        siteLongitude: typing.Union['Longitude', schemas.Unset] = schemas.unset,
        siteAltitude: typing.Union[MetaOapg.properties.siteAltitude, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        equipmentType: typing.Union[MetaOapg.properties.equipmentType, str, schemas.Unset] = schemas.unset,
        environmentType: typing.Union[MetaOapg.properties.environmentType, str, schemas.Unset] = schemas.unset,
        powerInterface: typing.Union[MetaOapg.properties.powerInterface, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'PeeParameter':
        return super().__new__(
            cls,
            *_args,
            siteIdentification=siteIdentification,
            siteDescription=siteDescription,
            siteLatitude=siteLatitude,
            siteLongitude=siteLongitude,
            siteAltitude=siteAltitude,
            equipmentType=equipmentType,
            environmentType=environmentType,
            powerInterface=powerInterface,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.latitude import Latitude
from openapi_client.model.longitude import Longitude
