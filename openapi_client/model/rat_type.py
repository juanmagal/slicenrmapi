# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class RatType(
    schemas.ComposedSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Indicates the radio access used.
    """


    class MetaOapg:
        
        
        class any_of_0(
            schemas.EnumBase,
            schemas.StrSchema
        ):
        
        
            class MetaOapg:
                enum_value_to_name = {
                    "NR": "NR",
                    "EUTRA": "EUTRA",
                    "WLAN": "WLAN",
                    "VIRTUAL": "VIRTUAL",
                    "NBIOT": "NBIOT",
                    "WIRELINE": "WIRELINE",
                    "WIRELINE_CABLE": "WIRELINE_CABLE",
                    "WIRELINE_BBF": "WIRELINE_BBF",
                    "LTE-M": "LTEM",
                    "NR_U": "NR_U",
                    "EUTRA_U": "EUTRA_U",
                    "TRUSTED_N3GA": "TRUSTED_N3GA",
                    "TRUSTED_WLAN": "TRUSTED_WLAN",
                    "UTRA": "UTRA",
                    "GERA": "GERA",
                    "NR_LEO": "NR_LEO",
                    "NR_MEO": "NR_MEO",
                    "NR_GEO": "NR_GEO",
                    "NR_OTHER_SAT": "NR_OTHER_SAT",
                    "NR_REDCAP": "NR_REDCAP",
                }
            
            @schemas.classproperty
            def NR(cls):
                return cls("NR")
            
            @schemas.classproperty
            def EUTRA(cls):
                return cls("EUTRA")
            
            @schemas.classproperty
            def WLAN(cls):
                return cls("WLAN")
            
            @schemas.classproperty
            def VIRTUAL(cls):
                return cls("VIRTUAL")
            
            @schemas.classproperty
            def NBIOT(cls):
                return cls("NBIOT")
            
            @schemas.classproperty
            def WIRELINE(cls):
                return cls("WIRELINE")
            
            @schemas.classproperty
            def WIRELINE_CABLE(cls):
                return cls("WIRELINE_CABLE")
            
            @schemas.classproperty
            def WIRELINE_BBF(cls):
                return cls("WIRELINE_BBF")
            
            @schemas.classproperty
            def LTEM(cls):
                return cls("LTE-M")
            
            @schemas.classproperty
            def NR_U(cls):
                return cls("NR_U")
            
            @schemas.classproperty
            def EUTRA_U(cls):
                return cls("EUTRA_U")
            
            @schemas.classproperty
            def TRUSTED_N3GA(cls):
                return cls("TRUSTED_N3GA")
            
            @schemas.classproperty
            def TRUSTED_WLAN(cls):
                return cls("TRUSTED_WLAN")
            
            @schemas.classproperty
            def UTRA(cls):
                return cls("UTRA")
            
            @schemas.classproperty
            def GERA(cls):
                return cls("GERA")
            
            @schemas.classproperty
            def NR_LEO(cls):
                return cls("NR_LEO")
            
            @schemas.classproperty
            def NR_MEO(cls):
                return cls("NR_MEO")
            
            @schemas.classproperty
            def NR_GEO(cls):
                return cls("NR_GEO")
            
            @schemas.classproperty
            def NR_OTHER_SAT(cls):
                return cls("NR_OTHER_SAT")
            
            @schemas.classproperty
            def NR_REDCAP(cls):
                return cls("NR_REDCAP")
        any_of_1 = schemas.StrSchema
        
        @classmethod
        @functools.lru_cache()
        def any_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.any_of_0,
                cls.any_of_1,
            ]


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'RatType':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )
