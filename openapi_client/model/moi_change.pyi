# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class MoiChange(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "op",
            "path",
            "notificationId",
        }
        
        class properties:
            notificationId = schemas.IntSchema
        
            @staticmethod
            def op() -> typing.Type['Operation']:
                return Operation
            path = schemas.StrSchema
            
            
            class correlatedNotifications(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['CorrelatedNotification']:
                        return CorrelatedNotification
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['CorrelatedNotification'], typing.List['CorrelatedNotification']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'correlatedNotifications':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'CorrelatedNotification':
                    return super().__getitem__(i)
            additionalText = schemas.StrSchema
        
            @staticmethod
            def sourceIndicator() -> typing.Type['SourceIndicator']:
                return SourceIndicator
        
            @staticmethod
            def insert() -> typing.Type['Insert']:
                return Insert
            value = schemas.AnyTypeSchema
            oldValue = schemas.AnyTypeSchema
            __annotations__ = {
                "notificationId": notificationId,
                "op": op,
                "path": path,
                "correlatedNotifications": correlatedNotifications,
                "additionalText": additionalText,
                "sourceIndicator": sourceIndicator,
                "insert": insert,
                "value": value,
                "oldValue": oldValue,
            }
    
    op: 'Operation'
    path: MetaOapg.properties.path
    notificationId: MetaOapg.properties.notificationId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["notificationId"]) -> MetaOapg.properties.notificationId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["op"]) -> 'Operation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["path"]) -> MetaOapg.properties.path: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["correlatedNotifications"]) -> MetaOapg.properties.correlatedNotifications: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalText"]) -> MetaOapg.properties.additionalText: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sourceIndicator"]) -> 'SourceIndicator': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["insert"]) -> 'Insert': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["value"]) -> MetaOapg.properties.value: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["oldValue"]) -> MetaOapg.properties.oldValue: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["notificationId", "op", "path", "correlatedNotifications", "additionalText", "sourceIndicator", "insert", "value", "oldValue", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["notificationId"]) -> MetaOapg.properties.notificationId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["op"]) -> 'Operation': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["path"]) -> MetaOapg.properties.path: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["correlatedNotifications"]) -> typing.Union[MetaOapg.properties.correlatedNotifications, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalText"]) -> typing.Union[MetaOapg.properties.additionalText, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sourceIndicator"]) -> typing.Union['SourceIndicator', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["insert"]) -> typing.Union['Insert', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["value"]) -> typing.Union[MetaOapg.properties.value, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["oldValue"]) -> typing.Union[MetaOapg.properties.oldValue, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["notificationId", "op", "path", "correlatedNotifications", "additionalText", "sourceIndicator", "insert", "value", "oldValue", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        op: 'Operation',
        path: typing.Union[MetaOapg.properties.path, str, ],
        notificationId: typing.Union[MetaOapg.properties.notificationId, decimal.Decimal, int, ],
        correlatedNotifications: typing.Union[MetaOapg.properties.correlatedNotifications, list, tuple, schemas.Unset] = schemas.unset,
        additionalText: typing.Union[MetaOapg.properties.additionalText, str, schemas.Unset] = schemas.unset,
        sourceIndicator: typing.Union['SourceIndicator', schemas.Unset] = schemas.unset,
        insert: typing.Union['Insert', schemas.Unset] = schemas.unset,
        value: typing.Union[MetaOapg.properties.value, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        oldValue: typing.Union[MetaOapg.properties.oldValue, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'MoiChange':
        return super().__new__(
            cls,
            *_args,
            op=op,
            path=path,
            notificationId=notificationId,
            correlatedNotifications=correlatedNotifications,
            additionalText=additionalText,
            sourceIndicator=sourceIndicator,
            insert=insert,
            value=value,
            oldValue=oldValue,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.correlated_notification import CorrelatedNotification
from openapi_client.model.insert import Insert
from openapi_client.model.operation import Operation
from openapi_client.model.source_indicator import SourceIndicator
