# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class SubNetworkSingle2(
    schemas.ComposedSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    
                    
                    class attributes(
                        schemas.ComposedSchema,
                    ):
                    
                    
                        class MetaOapg:
                            
                            @classmethod
                            @functools.lru_cache()
                            def all_of(cls):
                                # we need this here to make our import statements work
                                # we must store _composed_schemas in here so the code is only run
                                # when we invoke this method. If we kept this at the class
                                # level we would get an error because the class level
                                # code would be run when this module is imported, and these composed
                                # classes don't exist yet because their module has not finished
                                # loading
                                return [
                                    SubNetworkAttr,
                                ]
                    
                    
                        def __new__(
                            cls,
                            *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                            **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                        ) -> 'attributes':
                            return super().__new__(
                                cls,
                                *_args,
                                _configuration=_configuration,
                                **kwargs,
                            )
                    __annotations__ = {
                        "attributes": attributes,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["attributes"]) -> MetaOapg.properties.attributes: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["attributes", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["attributes"]) -> typing.Union[MetaOapg.properties.attributes, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["attributes", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                attributes: typing.Union[MetaOapg.properties.attributes, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *_args,
                    attributes=attributes,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        
        class all_of_3(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                
                    @staticmethod
                    def SubNetwork() -> typing.Type['SubNetworkMultiple']:
                        return SubNetworkMultiple
                
                    @staticmethod
                    def NetworkSlice() -> typing.Type['NetworkSliceMultiple']:
                        return NetworkSliceMultiple
                
                    @staticmethod
                    def NetworkSliceSubnet() -> typing.Type['NetworkSliceSubnetMultiple']:
                        return NetworkSliceSubnetMultiple
                
                    @staticmethod
                    def EP_Transport() -> typing.Type['EPTransportMultiple']:
                        return EPTransportMultiple
                
                    @staticmethod
                    def NetworkSliceSubnetProviderCapabilities() -> typing.Type['NetworkSliceSubnetProviderCapabilitiesMultiple']:
                        return NetworkSliceSubnetProviderCapabilitiesMultiple
                
                    @staticmethod
                    def FeasibilityCheckAndReservationJob() -> typing.Type['FeasibilityCheckAndReservationJobMultiple']:
                        return FeasibilityCheckAndReservationJobMultiple
                    __annotations__ = {
                        "SubNetwork": SubNetwork,
                        "NetworkSlice": NetworkSlice,
                        "NetworkSliceSubnet": NetworkSliceSubnet,
                        "EP_Transport": EP_Transport,
                        "NetworkSliceSubnetProviderCapabilities": NetworkSliceSubnetProviderCapabilities,
                        "FeasibilityCheckAndReservationJob": FeasibilityCheckAndReservationJob,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["SubNetwork"]) -> 'SubNetworkMultiple': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["NetworkSlice"]) -> 'NetworkSliceMultiple': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["NetworkSliceSubnet"]) -> 'NetworkSliceSubnetMultiple': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["EP_Transport"]) -> 'EPTransportMultiple': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["NetworkSliceSubnetProviderCapabilities"]) -> 'NetworkSliceSubnetProviderCapabilitiesMultiple': ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["FeasibilityCheckAndReservationJob"]) -> 'FeasibilityCheckAndReservationJobMultiple': ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["SubNetwork", "NetworkSlice", "NetworkSliceSubnet", "EP_Transport", "NetworkSliceSubnetProviderCapabilities", "FeasibilityCheckAndReservationJob", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["SubNetwork"]) -> typing.Union['SubNetworkMultiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["NetworkSlice"]) -> typing.Union['NetworkSliceMultiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["NetworkSliceSubnet"]) -> typing.Union['NetworkSliceSubnetMultiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["EP_Transport"]) -> typing.Union['EPTransportMultiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["NetworkSliceSubnetProviderCapabilities"]) -> typing.Union['NetworkSliceSubnetProviderCapabilitiesMultiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["FeasibilityCheckAndReservationJob"]) -> typing.Union['FeasibilityCheckAndReservationJobMultiple', schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["SubNetwork", "NetworkSlice", "NetworkSliceSubnet", "EP_Transport", "NetworkSliceSubnetProviderCapabilities", "FeasibilityCheckAndReservationJob", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                SubNetwork: typing.Union['SubNetworkMultiple', schemas.Unset] = schemas.unset,
                NetworkSlice: typing.Union['NetworkSliceMultiple', schemas.Unset] = schemas.unset,
                NetworkSliceSubnet: typing.Union['NetworkSliceSubnetMultiple', schemas.Unset] = schemas.unset,
                EP_Transport: typing.Union['EPTransportMultiple', schemas.Unset] = schemas.unset,
                NetworkSliceSubnetProviderCapabilities: typing.Union['NetworkSliceSubnetProviderCapabilitiesMultiple', schemas.Unset] = schemas.unset,
                FeasibilityCheckAndReservationJob: typing.Union['FeasibilityCheckAndReservationJobMultiple', schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_3':
                return super().__new__(
                    cls,
                    *_args,
                    SubNetwork=SubNetwork,
                    NetworkSlice=NetworkSlice,
                    NetworkSliceSubnet=NetworkSliceSubnet,
                    EP_Transport=EP_Transport,
                    NetworkSliceSubnetProviderCapabilities=NetworkSliceSubnetProviderCapabilities,
                    FeasibilityCheckAndReservationJob=FeasibilityCheckAndReservationJob,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                Top,
                cls.all_of_1,
                SubNetworkNcO,
                cls.all_of_3,
            ]


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SubNetworkSingle2':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.ep_transport_multiple import EPTransportMultiple
from openapi_client.model.feasibility_check_and_reservation_job_multiple import FeasibilityCheckAndReservationJobMultiple
from openapi_client.model.network_slice_multiple import NetworkSliceMultiple
from openapi_client.model.network_slice_subnet_multiple import NetworkSliceSubnetMultiple
from openapi_client.model.network_slice_subnet_provider_capabilities_multiple import NetworkSliceSubnetProviderCapabilitiesMultiple
from openapi_client.model.sub_network_attr import SubNetworkAttr
from openapi_client.model.sub_network_multiple import SubNetworkMultiple
from openapi_client.model.sub_network_nc_o import SubNetworkNcO
from openapi_client.model.top import Top
