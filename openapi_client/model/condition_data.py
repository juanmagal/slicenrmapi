# coding: utf-8

"""
    Provisioning MnS

    OAS 3.0.1 definition of the Provisioning MnS Â© 2022, 3GPP Organizational Partners (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.  # noqa: E501

    The version of the OpenAPI document: 17.2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ConditionData(
    schemas.DictBase,
    schemas.NoneBase,
    schemas.Schema,
    schemas.NoneFrozenDictMixin
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Contains conditions of applicability for a rule.
    """


    class MetaOapg:
        required = {
            "condId",
        }
        
        class properties:
            condId = schemas.StrSchema
        
            @staticmethod
            def activationTime() -> typing.Type['DateTimeRm']:
                return DateTimeRm
        
            @staticmethod
            def deactivationTime() -> typing.Type['DateTimeRm']:
                return DateTimeRm
        
            @staticmethod
            def accessType() -> typing.Type['AccessType']:
                return AccessType
        
            @staticmethod
            def ratType() -> typing.Type['RatType']:
                return RatType
            __annotations__ = {
                "condId": condId,
                "activationTime": activationTime,
                "deactivationTime": deactivationTime,
                "accessType": accessType,
                "ratType": ratType,
            }

    
    condId: MetaOapg.properties.condId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["condId"]) -> MetaOapg.properties.condId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["activationTime"]) -> 'DateTimeRm': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["deactivationTime"]) -> 'DateTimeRm': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accessType"]) -> 'AccessType': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ratType"]) -> 'RatType': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["condId", "activationTime", "deactivationTime", "accessType", "ratType", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["condId"]) -> MetaOapg.properties.condId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["activationTime"]) -> typing.Union['DateTimeRm', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["deactivationTime"]) -> typing.Union['DateTimeRm', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accessType"]) -> typing.Union['AccessType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ratType"]) -> typing.Union['RatType', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["condId", "activationTime", "deactivationTime", "accessType", "ratType", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, None, ],
        activationTime: typing.Union['DateTimeRm', schemas.Unset] = schemas.unset,
        deactivationTime: typing.Union['DateTimeRm', schemas.Unset] = schemas.unset,
        accessType: typing.Union['AccessType', schemas.Unset] = schemas.unset,
        ratType: typing.Union['RatType', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ConditionData':
        return super().__new__(
            cls,
            *_args,
            activationTime=activationTime,
            deactivationTime=deactivationTime,
            accessType=accessType,
            ratType=ratType,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.access_type import AccessType
from openapi_client.model.date_time_rm import DateTimeRm
from openapi_client.model.rat_type import RatType
